/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaz;

//import fuentes.Tokens;
import Interfaz.Lexer;
import fuentes.Symbol;
import fuentes.parser;
import fuentes.scanner;
import java.awt.BorderLayout;
import java.awt.Font;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.StringReader;
import static java.lang.System.in;
import static java.nio.file.Files.lines;
import static java.nio.file.Files.lines;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import java.awt.Color;
import javax.swing.JTextPane;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import static javax.swing.JOptionPane.showMessageDialog;

import javax.swing.JPanel;
import javax.swing.JTextPane;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * 
 Inicio;
5+5+5/2*3 > 52 && 32 < 82-42/5^3
Funcion Automata {
}

si(a>5.5 || b < 42){
	Entero a,b;
	a= 55;
}

si( b==c && c != d){
	Entero x = 5;
	a= b*x;
}sino{
	a = 0;
}

Fin;

 * @author Luis
 */
public class Interfaz_c3d extends javax.swing.JFrame {

    /**
     * Creates new form Interfaz_C3D
     */
    
    public static JTextPane entrada; 
    DefaultTableModel tokens;
    JFileChooser seleccionar = new JFileChooser();
    FileOutputStream salida;
    FileInputStream entradaArch;
    public StyleContext sc;
    public DefaultStyledDocument doc;
    
    File archivo;
    public Interfaz_c3d() {
        initComponents();
        this.setLocationRelativeTo(null);
        cerrar();
       LineasText tmpL = new LineasText();
       entrada=tmpL.text_pane;
       posicionPuntero(tmpL);
       JPanel tmpP = new JPanel(new BorderLayout());
       tmpP.add(tmpL,BorderLayout.WEST);
       tmpP.add(tmpL.scrollPane,BorderLayout.CENTER);
       tabs.addTab("Consola",tmpP);
       tokens = (DefaultTableModel) tbtokens.getModel();
        tokens.addColumn("No.Linea");
        tokens.addColumn("Lexema");
        tokens.addColumn("Comp_Lexico");
        Font font = new Font("Consolas", Font.PLAIN, 14);
        entrada.setFont(font);
        
        //Pintar palabras
        sc = new StyleContext();
        doc = new DefaultStyledDocument(sc);
        scanner Scanp1 =new scanner (in); // aca va el objeto de la clase Scanner que genera el archivo Jflex
        Scanp1.pin.insertar(entrada.getText());
        entrada.setDocument(entrada.getDocument());

    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabs = new javax.swing.JTabbedPane();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAnalizarLex = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        consola = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbtokens = new javax.swing.JTable();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        errores = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        noLinea = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        noColumna = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        generar = new javax.swing.JMenuItem();
        generar1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(102, 0, 51));

        jTabbedPane2.setName(""); // NOI18N

        txtAnalizarLex.setColumns(20);
        txtAnalizarLex.setRows(5);
        jScrollPane2.setViewportView(txtAnalizarLex);

        jTabbedPane2.addTab("Analisis Lexico", jScrollPane2);

        consola.setColumns(20);
        consola.setRows(5);
        jScrollPane5.setViewportView(consola);

        jTabbedPane2.addTab("Codigo Intermedio", jScrollPane5);

        tbtokens.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tbtokens);

        jTabbedPane2.addTab("Tabla Tokens(AL)", jScrollPane1);

        jTabbedPane3.setBackground(new java.awt.Color(102, 0, 51));

        errores.setBackground(new java.awt.Color(102, 102, 102));
        errores.setColumns(20);
        errores.setForeground(new java.awt.Color(255, 255, 255));
        errores.setLineWrap(true);
        errores.setRows(5);
        jScrollPane3.setViewportView(errores);

        jTabbedPane3.addTab("Salida", jScrollPane3);

        jLabel1.setText("Linea:");

        noLinea.setText("0");

        jLabel3.setText("Columna:");

        noColumna.setText("0");

        jMenuBar1.setBackground(new java.awt.Color(102, 0, 51));

        jMenu1.setText("Archivo");

        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/agregar-documentos.png"))); // NOI18N
        jMenuItem2.setText("Nuevo");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/abrir-documento.png"))); // NOI18N
        jMenuItem1.setText("Abrir");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/expediente.png"))); // NOI18N
        jMenuItem3.setText("Guardar");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/guardar.png"))); // NOI18N
        jMenuItem4.setText("Guardar como");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logout.png"))); // NOI18N
        jMenuItem5.setText("Salir");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Ejecutar");

        generar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/video.png"))); // NOI18N
        generar.setText("Compilar");
        generar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generarActionPerformed(evt);
            }
        });
        jMenu2.add(generar);

        generar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/analisisCod.png"))); // NOI18N
        generar1.setText("Analizar");
        generar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generar1ActionPerformed(evt);
            }
        });
        jMenu2.add(generar1);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(334, 334, 334)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(noLinea)
                        .addGap(57, 57, 57)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(noColumna))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTabbedPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 916, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tabs, javax.swing.GroupLayout.PREFERRED_SIZE, 607, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTabbedPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 387, Short.MAX_VALUE)
                    .addComponent(tabs))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(noLinea)
                    .addComponent(jLabel3)
                    .addComponent(noColumna))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane2.getAccessibleContext().setAccessibleName("Salida\n");

        pack();
    }// </editor-fold>//GEN-END:initComponents
//----
    //Pintar palabras
    public void insertar(String texto){
   
        entrada.setDocument(doc);
        try {
            doc.insertString(0,texto,null);

        }catch (Exception ex) {
            System.out.println("ERROr: no se pudo establecer estilo de documento");
        }
    }
    //Funciones de colores
    public void pintaAzul(int posini,int posfin){
            Style azul = sc.addStyle("ConstantWidth", null);
            StyleConstants.setForeground(azul, Color.blue);
            doc.setCharacterAttributes(posini,posfin, azul, false);
       
    }
    
     private void analizarLexico() throws IOException {
         
        int cont = 1;
        String expr = (String) entrada.getText();
        Lexer lexer = new Lexer(new StringReader(expr));
        String resultado = "LINEA " + cont + "\t\tSIMBOLO\n";
        
        while (true) {
            Tokens token = lexer.yylex();
            if (token == null) {
                //txtAnalizarLex.setText(resultado);
                return;
            }
            System.out.print(token);
            switch (token) {
                case Linea:
                    cont++;
                    break;
                case alfabeto:
                    tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                    break;
                case automata:
                    tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                    break;
               case boleano:
                    tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                    break;
                case elemento:
                    tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                    break;
                case caracter:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
                case conjunto:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
                case entero:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
                case estado:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
                case expre:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
                case fin:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
                case flotante:
                     cont++;
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
                case grafico:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
                case inicio:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
                case mostrar:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
                case nuevo:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
                case funcion:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
                case validar:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
                case con:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
                case afd:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
               case afn:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
                case estadofinal:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
                case estadoinicial:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
                case hacer:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
                case hacia:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
                case mientras:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
                case er:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
                case Mostrartabla:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
                case ordenprincipal:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
                    //----------
                case Comillas:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"Comillas"});
                    break;
                case cadena:
                    tokens.addRow(new Object [] {cont,lexer.lexeme,"Tipo de dato"});
                    break;
                case T_dato:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"Tipo de dato"});
                     break;
                case If:
                    tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                    break;
                case Else:
                    tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                    break;
                case Do:
                    tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                    break;
                case While:
                    tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                    break;
                case For:
                    tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                    break;
                case Igual:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"Operador igual"});
                    break;
                case Suma:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"Operador suma"});
                    break;
                case Resta:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"Operador resta"});
                    break;
                case Multiplicacion:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"Operador multiplicacion"});
                    break;
                case Division:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"Operador division"});
                    break;
                case Op_logico:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"Operador logico"});
                    break;
                case Op_incremento:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"Operador incremento"});
                    break;
                case Op_relacional:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"Operador relacional"});
                    break;
                case Op_atribucion:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"Operador atribucion"});
                    break;
                case Op_booleano:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"Operador booleano"});
                    break;
                case Parentesis_a:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"Parentesis apertura"});
                    break;
                case Parentesis_c:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"Parentesis de cierre"});
                    break;
                case Llave_a:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"Llave de apertura"});
                    break;
                case Llave_c:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"Llave de cierre"});
                    break;
                case Corchete_a:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"corchete de apertura"});
                    break;
                case Corchete_c:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"corchete de cierre"});
                    break;
                case Main:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                    break;
                case P_coma:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"Punto y coma"});
                    break;
                case Identificador:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"Identificador"});
                    break;
                case Numero:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"Numero"});
                    break;
                case ERROR:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"Simbolo no definido"});
                    break;
                default:
                    resultado += "  < " + lexer.lexeme + " >\n";

                    
                    break;
            }
        }
    }
    
//----
    private void generarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generarActionPerformed
         errores.setText("");
        consola.setText("");
        consola.setText("");
        //agregamo las clases de los analizadores que se crean con jflex y cup
        String texto = entrada.getText();
        if(texto.isEmpty()){
            System.err.println("No es posible evaluar una cadena en blanco.");
            return;
        }
        try {
            notificar_er("-----------Analisis iniciado-----------");
            
            System.out.println("Inicia la generación de C3D...");
            scanner scan = new scanner(new BufferedReader( new StringReader(texto)));
            parser parser = new parser(scan);
            parser.parse();
            notificar_er("----------Analisis finalizado----------");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_generarActionPerformed

    private void generar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generar1ActionPerformed
         errores.setText("");
         tokens.setRowCount(0);  
        if(entrada.getText().equals("")){
            showMessageDialog(null,"No hay código para analizar.","ERROR", JOptionPane.ERROR_MESSAGE);
        }
        else{
           try{
               analizarLexico();
               Lexer lex = new Lexer(new BufferedReader(new StringReader(entrada.getText())));
               
           }catch(IOException ex){
              Logger.getLogger(Interfaz_c3d.class.getName()).log(Level.SEVERE, null, ex);
           }
        }
        
    }//GEN-LAST:event_generar1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        entrada.setText("");
        tokens.setRowCount(0);
        errores.setText("");
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        if(seleccionar.showDialog(null, "Abrir") == JFileChooser.APPROVE_OPTION){
            try{
              archivo = seleccionar.getSelectedFile();
              if(archivo.canRead()){
                  if(archivo.getName().endsWith("ma")){
                      String documento = abrirArchivo(archivo);
                      entrada.setText(documento);
                  }
                  else{
                    showMessageDialog(null,"No se pudo abrir el archivo seleccionado, /nla extensión del archivo no es .ma","ERROR",JOptionPane.ERROR_MESSAGE);
                  }
              }
            }catch(Exception ex){}
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        if(seleccionar.showDialog(null, "Guardar") == JFileChooser.APPROVE_OPTION){
            archivo=seleccionar.getSelectedFile();
            if(archivo.getName().endsWith("ma")){
                String documento = entrada.getText();
                String mensaje = guardarArchivo(archivo, documento);
                if(mensaje != null){
                    showMessageDialog(null,mensaje,"EXITO",JOptionPane.INFORMATION_MESSAGE);
                }
                else{
                    showMessageDialog(null,"No se pudo guardar el archivo","ERROR",JOptionPane.ERROR_MESSAGE);
                }
            }
            else{
                showMessageDialog(null,"Solo se permiten archivos con extensión .ma","ERROR",JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        guardarArchivo();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz_c3d.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz_c3d.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz_c3d.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz_c3d.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz_c3d().setVisible(true);
            }
        });
    }
    
    //Validación al cerrar la ventana
    public void cerrar(){
        try {
            this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
            addWindowListener(new WindowAdapter(){
               public void windowClosing(WindowEvent e) {
                   confirmarSalida();
               }
            });
            this.setVisible(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    public void confirmarSalida(){
        int valor= JOptionPane.showConfirmDialog(this,"¿Estás seguro que deseas salir? \nSe perderán todos los cambios realizados.", "Salir...",JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if (valor==JOptionPane.YES_OPTION){
            System.exit(0);
        }
    }
    //MANEJO DE ARCHIVOS
    //GUARDAR ARCHIVO
    public String guardarArchivo(File archivo, String documento){
        String mensaje = null;
        try{
            salida = new FileOutputStream(archivo);
            byte [] bytxt = documento.getBytes();
            salida.write(bytxt);
            mensaje = "El archivo se ha guarado exitosamente";
            
        }catch(Exception ex){
            
        }
        return mensaje;
    }
    
    //Función guardarArchivo
    public void guardarArchivo(){
        if(seleccionar.showDialog(null, "Guardar como") == JFileChooser.APPROVE_OPTION){
            archivo=seleccionar.getSelectedFile();
            if(archivo.getName().endsWith("ma")){
                String documento = entrada.getText();
                String mensaje = guardarArchivo(archivo, documento);
                if(mensaje != null){
                    showMessageDialog(null,mensaje,"EXITO",JOptionPane.INFORMATION_MESSAGE);
                }
                else{
                    showMessageDialog(null,"No se pudo guardar el archivo, \nsolo se permiten archivos con extensión .ma","ERROR",JOptionPane.ERROR_MESSAGE);
                }
            }
            else{
                showMessageDialog(null,"Solo se permiten archivos con extensión .lpg","ERROR",JOptionPane.ERROR_MESSAGE);
                
            }
        }
    }
    
    //ABRIR ARCHIVO
    public String abrirArchivo(File archivo){
        String documento = "";
        try{
            entradaArch = new FileInputStream(archivo);
            int ascci;
            while((ascci = entradaArch.read()) != -1){
                char caracter = (char) ascci;
                documento +=caracter;
            }
        }catch(Exception ex){
        }
        return documento;
    }
    
    private void posicionPuntero(LineasText lines){
        lines.text_pane.addCaretListener(new CaretListener(){
            
            @Override
            public void caretUpdate(CaretEvent e) {
                int pos = e.getDot();
		int fila = 1, columna=0;
		int ultimalinea=-1;
		String text =lines.text_pane.getText().replaceAll("\r","");
				
		for(int i=0;i<pos;i++){
                    if(text.charAt(i)==10){
                        fila++;
                        ultimalinea=i;
                    }
                }
				
		columna=pos-ultimalinea;                
                noLinea.setText(fila +"");
                noColumna.setText(columna+"");
            }
        });
    }
    
    public static void notificar(String cad){
        consola.append(cad+"\n");
    }
    
    public static void notificar_er(String cad){
        errores.append(cad+"\n");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JTextArea consola;
    private static javax.swing.JTextArea errores;
    private javax.swing.JMenuItem generar;
    private javax.swing.JMenuItem generar1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JLabel noColumna;
    private javax.swing.JLabel noLinea;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JTable tbtokens;
    private static javax.swing.JTextArea txtAnalizarLex;
    // End of variables declaration//GEN-END:variables
}
