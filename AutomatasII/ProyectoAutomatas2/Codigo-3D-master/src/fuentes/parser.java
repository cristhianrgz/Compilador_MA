
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Nov 24 10:58:37 MST 2019
//----------------------------------------------------

package fuentes;

import java_cup.runtime.Symbol;
import Interfaz.Interfaz_c3d;
import java.util.Stack;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Nov 24 10:58:37 MST 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\162\000\002\002\004\000\002\006\007\000\002\007" +
    "\004\000\002\007\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\004\000\002\023\004\000\002\023\004\000\002" +
    "\023\004\000\002\050\002\000\002\041\013\000\002\042" +
    "\004\000\002\042\003\000\002\051\002\000\002\043\007" +
    "\000\002\005\003\000\002\005\003\000\002\052\002\000" +
    "\002\044\006\000\002\044\002\000\002\053\002\000\002" +
    "\054\002\000\002\030\015\000\002\055\002\000\002\056" +
    "\002\000\002\045\015\000\002\057\002\000\002\060\002" +
    "\000\002\037\014\000\002\061\002\000\002\040\007\000" +
    "\002\040\002\000\002\062\002\000\002\063\002\000\002" +
    "\064\002\000\002\036\023\000\002\004\003\000\002\004" +
    "\003\000\002\065\002\000\002\066\002\000\002\027\013" +
    "\000\002\067\002\000\002\046\006\000\002\070\002\000" +
    "\002\046\006\000\002\071\002\000\002\046\006\000\002" +
    "\072\002\000\002\046\006\000\002\046\004\000\002\046" +
    "\003\000\002\047\005\000\002\047\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\002" +
    "\005\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\004\000\002\002\005\000\002\026\006\000" +
    "\002\025\005\000\002\025\007\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\032\011\000\002\010" +
    "\005\000\002\010\003\000\002\031\010\000\002\033\006" +
    "\000\002\034\010\000\002\035\010\000\002\011\005\000" +
    "\002\011\003\000\002\012\007\000\002\012\011\000\002" +
    "\012\011\000\002\012\013\000\002\015\012\000\002\015" +
    "\012\000\002\017\013\000\002\020\002\000\002\013\007" +
    "\000\002\014\007\000\002\016\006\000\002\021\010\000" +
    "\002\021\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0112\000\004\025\005\001\002\000\004\002\u0114\001" +
    "\002\000\004\071\006\001\002\000\070\003\047\004\042" +
    "\005\015\006\046\010\050\014\045\016\063\020\060\024" +
    "\024\030\016\035\065\036\031\037\070\042\027\044\043" +
    "\056\025\062\007\063\034\064\052\077\032\101\061\102" +
    "\062\103\014\105\051\110\064\111\056\112\022\001\002" +
    "\000\004\004\uffa8\001\002\000\100\003\ufff9\004\ufff9\005" +
    "\ufff9\006\ufff9\010\ufff9\014\ufff9\016\ufff9\020\ufff9\022\ufff9" +
    "\024\ufff9\030\ufff9\035\ufff9\036\ufff9\037\ufff9\042\ufff9\044" +
    "\ufff9\056\ufff9\062\ufff9\063\ufff9\064\ufff9\067\ufff9\077\ufff9" +
    "\101\ufff9\102\ufff9\103\ufff9\105\ufff9\106\ufff9\107\ufff9\110" +
    "\ufff9\111\ufff9\112\ufff9\001\002\000\100\003\ufffa\004\ufffa" +
    "\005\ufffa\006\ufffa\010\ufffa\014\ufffa\016\ufffa\020\ufffa\022" +
    "\ufffa\024\ufffa\030\ufffa\035\ufffa\036\ufffa\037\ufffa\042\ufffa" +
    "\044\ufffa\056\ufffa\062\ufffa\063\ufffa\064\ufffa\067\ufffa\077" +
    "\ufffa\101\ufffa\102\ufffa\103\ufffa\105\ufffa\106\ufffa\107\ufffa" +
    "\110\ufffa\111\ufffa\112\ufffa\001\002\000\004\004\u010f\001" +
    "\002\000\100\003\047\004\042\005\015\006\046\010\050" +
    "\014\045\016\063\020\060\022\ufffe\024\024\030\016\035" +
    "\065\036\031\037\070\042\027\044\043\056\025\062\007" +
    "\063\034\064\052\067\ufffe\077\032\101\061\102\062\103" +
    "\014\105\051\106\ufffe\107\ufffe\110\064\111\056\112\022" +
    "\001\002\000\004\064\u0100\001\002\000\140\003\uffaf\004" +
    "\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf" +
    "\013\uffaf\014\uffaf\016\uffaf\020\uffaf\022\uffaf\024\uffaf\030" +
    "\uffaf\035\uffaf\036\uffaf\037\uffaf\042\uffaf\044\uffaf\045\uffaf" +
    "\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054" +
    "\uffaf\055\uffaf\056\uffaf\057\uffaf\062\uffaf\063\uffaf\064\uffaf" +
    "\065\uffaf\067\uffaf\071\uffaf\077\uffaf\101\uffaf\102\uffaf\103" +
    "\uffaf\105\uffaf\106\uffaf\107\uffaf\110\uffaf\111\uffaf\112\uffaf" +
    "\001\002\000\006\015\352\041\351\001\002\000\004\022" +
    "\347\001\002\000\114\003\uffbe\004\uffbe\005\uffbe\006\uffbe" +
    "\010\uffbe\014\uffbe\016\uffbe\020\uffbe\022\uffbe\024\uffbe\030" +
    "\uffbe\035\uffbe\036\uffbe\037\uffbe\042\uffbe\044\uffbe\053\uffbe" +
    "\054\uffbe\055\uffbe\056\uffbe\057\uffbe\062\uffbe\063\uffbe\064" +
    "\uffbe\065\uffbe\067\uffbe\071\uffbe\077\uffbe\101\uffbe\102\uffbe" +
    "\103\uffbe\105\uffbe\106\uffbe\107\uffbe\110\uffbe\111\uffbe\112" +
    "\uffbe\001\002\000\100\003\uffed\004\uffed\005\uffed\006\uffed" +
    "\010\uffed\014\uffed\016\uffed\020\uffed\022\uffed\024\uffed\030" +
    "\uffed\035\uffed\036\uffed\037\uffed\042\uffed\044\uffed\056\uffed" +
    "\062\uffed\063\uffed\064\uffed\067\uffed\077\uffed\101\uffed\102" +
    "\uffed\103\uffed\105\uffed\106\uffed\107\uffed\110\uffed\111\uffed" +
    "\112\uffed\001\002\000\004\071\346\001\002\000\100\003" +
    "\ufff0\004\ufff0\005\ufff0\006\ufff0\010\ufff0\014\ufff0\016\ufff0" +
    "\020\ufff0\022\ufff0\024\ufff0\030\ufff0\035\ufff0\036\ufff0\037" +
    "\ufff0\042\ufff0\044\ufff0\056\ufff0\062\ufff0\063\ufff0\064\ufff0" +
    "\067\ufff0\077\ufff0\101\ufff0\102\ufff0\103\ufff0\105\ufff0\106" +
    "\ufff0\107\ufff0\110\ufff0\111\ufff0\112\ufff0\001\002\000\004" +
    "\064\342\001\002\000\016\004\133\005\015\006\046\010" +
    "\050\056\025\064\052\001\002\000\100\003\ufff8\004\ufff8" +
    "\005\ufff8\006\ufff8\010\ufff8\014\ufff8\016\ufff8\020\ufff8\022" +
    "\ufff8\024\ufff8\030\ufff8\035\ufff8\036\ufff8\037\ufff8\042\ufff8" +
    "\044\ufff8\056\ufff8\062\ufff8\063\ufff8\064\ufff8\067\ufff8\077" +
    "\ufff8\101\ufff8\102\ufff8\103\ufff8\105\ufff8\106\ufff8\107\ufff8" +
    "\110\ufff8\111\ufff8\112\ufff8\001\002\000\004\064\335\001" +
    "\002\000\100\003\uffec\004\uffec\005\uffec\006\uffec\010\uffec" +
    "\014\uffec\016\uffec\020\uffec\022\uffec\024\uffec\030\uffec\035" +
    "\uffec\036\uffec\037\uffec\042\uffec\044\uffec\056\uffec\062\uffec" +
    "\063\uffec\064\uffec\067\uffec\077\uffec\101\uffec\102\uffec\103" +
    "\uffec\105\uffec\106\uffec\107\uffec\110\uffec\111\uffec\112\uffec" +
    "\001\002\000\004\073\330\001\002\000\004\064\uffca\001" +
    "\002\000\100\003\ufff6\004\ufff6\005\ufff6\006\ufff6\010\ufff6" +
    "\014\ufff6\016\ufff6\020\ufff6\022\ufff6\024\ufff6\030\ufff6\035" +
    "\ufff6\036\ufff6\037\ufff6\042\ufff6\044\ufff6\056\ufff6\062\ufff6" +
    "\063\ufff6\064\ufff6\067\ufff6\077\ufff6\101\ufff6\102\ufff6\103" +
    "\ufff6\105\ufff6\106\ufff6\107\ufff6\110\ufff6\111\ufff6\112\ufff6" +
    "\001\002\000\004\004\uffa7\001\002\000\100\003\ufff1\004" +
    "\ufff1\005\ufff1\006\ufff1\010\ufff1\014\ufff1\016\ufff1\020\ufff1" +
    "\022\ufff1\024\ufff1\030\ufff1\035\ufff1\036\ufff1\037\ufff1\042" +
    "\ufff1\044\ufff1\056\ufff1\062\ufff1\063\ufff1\064\ufff1\067\ufff1" +
    "\077\ufff1\101\ufff1\102\ufff1\103\ufff1\105\ufff1\106\ufff1\107" +
    "\ufff1\110\ufff1\111\ufff1\112\ufff1\001\002\000\100\003\uffee" +
    "\004\uffee\005\uffee\006\uffee\010\uffee\014\uffee\016\uffee\020" +
    "\uffee\022\uffee\024\uffee\030\uffee\035\uffee\036\uffee\037\uffee" +
    "\042\uffee\044\uffee\056\uffee\062\uffee\063\uffee\064\uffee\067" +
    "\uffee\077\uffee\101\uffee\102\uffee\103\uffee\105\uffee\106\uffee" +
    "\107\uffee\110\uffee\111\uffee\112\uffee\001\002\000\100\003" +
    "\uffef\004\uffef\005\uffef\006\uffef\010\uffef\014\uffef\016\uffef" +
    "\020\uffef\022\uffef\024\uffef\030\uffef\035\uffef\036\uffef\037" +
    "\uffef\042\uffef\044\uffef\056\uffef\062\uffef\063\uffef\064\uffef" +
    "\067\uffef\077\uffef\101\uffef\102\uffef\103\uffef\105\uffef\106" +
    "\uffef\107\uffef\110\uffef\111\uffef\112\uffef\001\002\000\140" +
    "\003\uffbc\004\uffbc\005\uffbc\006\uffbc\007\135\010\137\011" +
    "\142\012\141\013\140\014\uffbc\016\uffbc\020\uffbc\022\uffbc" +
    "\024\uffbc\030\uffbc\035\uffbc\036\uffbc\037\uffbc\042\uffbc\044" +
    "\uffbc\045\313\046\316\047\311\050\312\051\315\052\314" +
    "\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\062\uffbc\063" +
    "\uffbc\064\uffbc\065\uffbc\067\uffbc\071\uffbc\077\uffbc\101\uffbc" +
    "\102\uffbc\103\uffbc\105\uffbc\106\uffbc\107\uffbc\110\uffbc\111" +
    "\uffbc\112\uffbc\001\002\000\100\003\ufff5\004\ufff5\005\ufff5" +
    "\006\ufff5\010\ufff5\014\ufff5\016\ufff5\020\ufff5\022\ufff5\024" +
    "\ufff5\030\ufff5\035\ufff5\036\ufff5\037\ufff5\042\ufff5\044\ufff5" +
    "\056\ufff5\062\ufff5\063\ufff5\064\ufff5\067\ufff5\077\ufff5\101" +
    "\ufff5\102\ufff5\103\ufff5\105\ufff5\106\ufff5\107\ufff5\110\ufff5" +
    "\111\ufff5\112\ufff5\001\002\000\136\003\uffb0\004\uffb0\005" +
    "\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0" +
    "\014\uffb0\016\uffb0\020\uffb0\022\uffb0\024\uffb0\030\uffb0\035" +
    "\uffb0\036\uffb0\037\uffb0\042\uffb0\044\uffb0\045\uffb0\046\uffb0" +
    "\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055" +
    "\uffb0\056\uffb0\057\uffb0\062\uffb0\063\uffb0\064\uffb0\067\uffb0" +
    "\073\305\077\uffb0\101\uffb0\102\uffb0\103\uffb0\105\uffb0\106" +
    "\uffb0\107\uffb0\110\uffb0\111\uffb0\112\uffb0\001\002\000\004" +
    "\066\274\001\002\000\100\003\ufff4\004\ufff4\005\ufff4\006" +
    "\ufff4\010\ufff4\014\ufff4\016\ufff4\020\ufff4\022\ufff4\024\ufff4" +
    "\030\ufff4\035\ufff4\036\ufff4\037\ufff4\042\ufff4\044\ufff4\056" +
    "\ufff4\062\ufff4\063\ufff4\064\ufff4\067\ufff4\077\ufff4\101\ufff4" +
    "\102\ufff4\103\ufff4\105\ufff4\106\ufff4\107\ufff4\110\ufff4\111" +
    "\ufff4\112\ufff4\001\002\000\004\004\263\001\002\000\140" +
    "\003\uffae\004\uffae\005\uffae\006\uffae\007\uffae\010\uffae\011" +
    "\uffae\012\uffae\013\uffae\014\uffae\016\uffae\020\uffae\022\uffae" +
    "\024\uffae\030\uffae\035\uffae\036\uffae\037\uffae\042\uffae\044" +
    "\uffae\045\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae" +
    "\053\uffae\054\uffae\055\uffae\056\uffae\057\uffae\062\uffae\063" +
    "\uffae\064\uffae\065\uffae\067\uffae\071\uffae\077\uffae\101\uffae" +
    "\102\uffae\103\uffae\105\uffae\106\uffae\107\uffae\110\uffae\111" +
    "\uffae\112\uffae\001\002\000\006\067\262\071\261\001\002" +
    "\000\014\004\133\005\015\006\046\010\050\064\052\001" +
    "\002\000\004\064\233\001\002\000\016\004\133\005\015" +
    "\006\046\010\050\056\025\064\052\001\002\000\110\003" +
    "\ufffd\004\ufffd\005\ufffd\006\ufffd\010\ufffd\014\ufffd\016\ufffd" +
    "\020\ufffd\022\ufffd\024\ufffd\030\ufffd\035\ufffd\036\ufffd\037" +
    "\ufffd\042\ufffd\044\ufffd\053\155\054\152\055\154\056\ufffd" +
    "\057\151\062\ufffd\063\ufffd\064\ufffd\067\ufffd\077\ufffd\101" +
    "\ufffd\102\ufffd\103\ufffd\105\ufffd\106\ufffd\107\ufffd\110\ufffd" +
    "\111\ufffd\112\ufffd\001\002\000\100\003\ufff3\004\ufff3\005" +
    "\ufff3\006\ufff3\010\ufff3\014\ufff3\016\ufff3\020\ufff3\022\ufff3" +
    "\024\ufff3\030\ufff3\035\ufff3\036\ufff3\037\ufff3\042\ufff3\044" +
    "\ufff3\056\ufff3\062\ufff3\063\ufff3\064\ufff3\067\ufff3\077\ufff3" +
    "\101\ufff3\102\ufff3\103\ufff3\105\ufff3\106\ufff3\107\ufff3\110" +
    "\ufff3\111\ufff3\112\ufff3\001\002\000\100\003\ufffc\004\ufffc" +
    "\005\ufffc\006\ufffc\010\ufffc\014\ufffc\016\ufffc\020\ufffc\022" +
    "\ufffc\024\ufffc\030\ufffc\035\ufffc\036\ufffc\037\ufffc\042\ufffc" +
    "\044\ufffc\056\ufffc\062\ufffc\063\ufffc\064\ufffc\067\ufffc\077" +
    "\ufffc\101\ufffc\102\ufffc\103\ufffc\105\ufffc\106\ufffc\107\ufffc" +
    "\110\ufffc\111\ufffc\112\ufffc\001\002\000\004\071\230\001" +
    "\002\000\100\003\ufff2\004\ufff2\005\ufff2\006\ufff2\010\ufff2" +
    "\014\ufff2\016\ufff2\020\ufff2\022\ufff2\024\ufff2\030\ufff2\035" +
    "\ufff2\036\ufff2\037\ufff2\042\ufff2\044\ufff2\056\ufff2\062\ufff2" +
    "\063\ufff2\064\ufff2\067\ufff2\077\ufff2\101\ufff2\102\ufff2\103" +
    "\ufff2\105\ufff2\106\ufff2\107\ufff2\110\ufff2\111\ufff2\112\ufff2" +
    "\001\002\000\004\073\223\001\002\000\004\066\211\001" +
    "\002\000\004\066\177\001\002\000\004\004\uffa6\001\002" +
    "\000\004\064\126\001\002\000\004\073\123\001\002\000" +
    "\100\003\ufffb\004\ufffb\005\ufffb\006\ufffb\010\ufffb\014\ufffb" +
    "\016\ufffb\020\ufffb\022\ufffb\024\ufffb\030\ufffb\035\ufffb\036" +
    "\ufffb\037\ufffb\042\ufffb\044\ufffb\056\ufffb\062\ufffb\063\ufffb" +
    "\064\ufffb\067\ufffb\077\ufffb\101\ufffb\102\ufffb\103\ufffb\105" +
    "\ufffb\106\ufffb\107\ufffb\110\ufffb\111\ufffb\112\ufffb\001\002" +
    "\000\100\003\ufff7\004\ufff7\005\ufff7\006\ufff7\010\ufff7\014" +
    "\ufff7\016\ufff7\020\ufff7\022\ufff7\024\ufff7\030\ufff7\035\ufff7" +
    "\036\ufff7\037\ufff7\042\ufff7\044\ufff7\056\ufff7\062\ufff7\063" +
    "\ufff7\064\ufff7\067\ufff7\077\ufff7\101\ufff7\102\ufff7\103\ufff7" +
    "\105\ufff7\106\ufff7\107\ufff7\110\ufff7\111\ufff7\112\ufff7\001" +
    "\002\000\004\073\071\001\002\000\004\064\072\001\002" +
    "\000\006\066\073\075\075\001\002\000\004\075\104\001" +
    "\002\000\004\065\110\001\002\000\004\070\076\001\002" +
    "\000\004\074\077\001\002\000\004\070\100\001\002\000" +
    "\006\066\101\075\102\001\002\000\004\075\104\001\002" +
    "\000\004\065\uff9c\001\002\000\004\067\107\001\002\000" +
    "\010\065\uff9d\067\uff9d\070\105\001\002\000\004\075\104" +
    "\001\002\000\006\065\uff9e\067\uff9e\001\002\000\004\065" +
    "\uff9a\001\002\000\004\071\111\001\002\000\100\003\uff9f" +
    "\004\uff9f\005\uff9f\006\uff9f\010\uff9f\014\uff9f\016\uff9f\020" +
    "\uff9f\022\uff9f\024\uff9f\030\uff9f\035\uff9f\036\uff9f\037\uff9f" +
    "\042\uff9f\044\uff9f\056\uff9f\062\uff9f\063\uff9f\064\uff9f\067" +
    "\uff9f\077\uff9f\101\uff9f\102\uff9f\103\uff9f\105\uff9f\106\uff9f" +
    "\107\uff9f\110\uff9f\111\uff9f\112\uff9f\001\002\000\004\067" +
    "\113\001\002\000\004\070\114\001\002\000\004\074\115" +
    "\001\002\000\004\070\116\001\002\000\006\066\117\075" +
    "\120\001\002\000\004\075\104\001\002\000\004\065\uff9b" +
    "\001\002\000\004\067\122\001\002\000\004\065\uff99\001" +
    "\002\000\004\075\124\001\002\000\004\071\125\001\002" +
    "\000\100\003\uffa1\004\uffa1\005\uffa1\006\uffa1\010\uffa1\014" +
    "\uffa1\016\uffa1\020\uffa1\022\uffa1\024\uffa1\030\uffa1\035\uffa1" +
    "\036\uffa1\037\uffa1\042\uffa1\044\uffa1\056\uffa1\062\uffa1\063" +
    "\uffa1\064\uffa1\067\uffa1\077\uffa1\101\uffa1\102\uffa1\103\uffa1" +
    "\105\uffa1\106\uffa1\107\uffa1\110\uffa1\111\uffa1\112\uffa1\001" +
    "\002\000\004\062\127\001\002\000\004\004\130\001\002" +
    "\000\004\073\uffd0\001\002\000\004\073\132\001\002\000" +
    "\014\004\133\005\015\006\046\010\050\064\052\001\002" +
    "\000\140\003\uffb0\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010" +
    "\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\016\uffb0\020\uffb0" +
    "\022\uffb0\024\uffb0\030\uffb0\035\uffb0\036\uffb0\037\uffb0\042" +
    "\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0" +
    "\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\062" +
    "\uffb0\063\uffb0\064\uffb0\065\uffb0\067\uffb0\071\uffb0\077\uffb0" +
    "\101\uffb0\102\uffb0\103\uffb0\105\uffb0\106\uffb0\107\uffb0\110" +
    "\uffb0\111\uffb0\112\uffb0\001\002\000\016\007\135\010\137" +
    "\011\142\012\141\013\140\071\136\001\002\000\014\004" +
    "\133\005\015\006\046\010\050\064\052\001\002\000\016" +
    "\004\uffcf\005\uffcf\006\uffcf\010\uffcf\056\uffcf\064\uffcf\001" +
    "\002\000\014\004\133\005\015\006\046\010\050\064\052" +
    "\001\002\000\014\004\133\005\015\006\046\010\050\064" +
    "\052\001\002\000\014\004\133\005\015\006\046\010\050" +
    "\064\052\001\002\000\014\004\133\005\015\006\046\010" +
    "\050\064\052\001\002\000\140\003\uffb3\004\uffb3\005\uffb3" +
    "\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\013\140\014" +
    "\uffb3\016\uffb3\020\uffb3\022\uffb3\024\uffb3\030\uffb3\035\uffb3" +
    "\036\uffb3\037\uffb3\042\uffb3\044\uffb3\045\uffb3\046\uffb3\047" +
    "\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3" +
    "\056\uffb3\057\uffb3\062\uffb3\063\uffb3\064\uffb3\065\uffb3\067" +
    "\uffb3\071\uffb3\077\uffb3\101\uffb3\102\uffb3\103\uffb3\105\uffb3" +
    "\106\uffb3\107\uffb3\110\uffb3\111\uffb3\112\uffb3\001\002\000" +
    "\140\003\uffb2\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2" +
    "\011\uffb2\012\uffb2\013\140\014\uffb2\016\uffb2\020\uffb2\022" +
    "\uffb2\024\uffb2\030\uffb2\035\uffb2\036\uffb2\037\uffb2\042\uffb2" +
    "\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052" +
    "\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\062\uffb2" +
    "\063\uffb2\064\uffb2\065\uffb2\067\uffb2\071\uffb2\077\uffb2\101" +
    "\uffb2\102\uffb2\103\uffb2\105\uffb2\106\uffb2\107\uffb2\110\uffb2" +
    "\111\uffb2\112\uffb2\001\002\000\140\003\uffb1\004\uffb1\005" +
    "\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\013\140" +
    "\014\uffb1\016\uffb1\020\uffb1\022\uffb1\024\uffb1\030\uffb1\035" +
    "\uffb1\036\uffb1\037\uffb1\042\uffb1\044\uffb1\045\uffb1\046\uffb1" +
    "\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055" +
    "\uffb1\056\uffb1\057\uffb1\062\uffb1\063\uffb1\064\uffb1\065\uffb1" +
    "\067\uffb1\071\uffb1\077\uffb1\101\uffb1\102\uffb1\103\uffb1\105" +
    "\uffb1\106\uffb1\107\uffb1\110\uffb1\111\uffb1\112\uffb1\001\002" +
    "\000\140\003\uffb4\004\uffb4\005\uffb4\006\uffb4\007\uffb4\010" +
    "\uffb4\011\142\012\141\013\140\014\uffb4\016\uffb4\020\uffb4" +
    "\022\uffb4\024\uffb4\030\uffb4\035\uffb4\036\uffb4\037\uffb4\042" +
    "\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4" +
    "\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\062" +
    "\uffb4\063\uffb4\064\uffb4\065\uffb4\067\uffb4\071\uffb4\077\uffb4" +
    "\101\uffb4\102\uffb4\103\uffb4\105\uffb4\106\uffb4\107\uffb4\110" +
    "\uffb4\111\uffb4\112\uffb4\001\002\000\016\004\133\005\015" +
    "\006\046\010\050\056\025\064\052\001\002\000\014\053" +
    "\155\054\152\055\154\057\151\071\153\001\002\000\016" +
    "\004\uffc1\005\uffc1\006\uffc1\010\uffc1\056\uffc1\064\uffc1\001" +
    "\002\000\016\004\uffc5\005\uffc5\006\uffc5\010\uffc5\056\uffc5" +
    "\064\uffc5\001\002\000\006\060\uffce\061\uffce\001\002\000" +
    "\016\004\uffc3\005\uffc3\006\uffc3\010\uffc3\056\uffc3\064\uffc3" +
    "\001\002\000\016\004\uffc7\005\uffc7\006\uffc7\010\uffc7\056" +
    "\uffc7\064\uffc7\001\002\000\016\004\133\005\015\006\046" +
    "\010\050\056\025\064\052\001\002\000\114\003\uffc6\004" +
    "\uffc6\005\uffc6\006\uffc6\010\uffc6\014\uffc6\016\uffc6\020\uffc6" +
    "\022\uffc6\024\uffc6\030\uffc6\035\uffc6\036\uffc6\037\uffc6\042" +
    "\uffc6\044\uffc6\053\uffc6\054\152\055\uffc6\056\uffc6\057\151" +
    "\062\uffc6\063\uffc6\064\uffc6\065\uffc6\067\uffc6\071\uffc6\077" +
    "\uffc6\101\uffc6\102\uffc6\103\uffc6\105\uffc6\106\uffc6\107\uffc6" +
    "\110\uffc6\111\uffc6\112\uffc6\001\002\000\016\004\133\005" +
    "\015\006\046\010\050\056\025\064\052\001\002\000\114" +
    "\003\uffc2\004\uffc2\005\uffc2\006\uffc2\010\uffc2\014\uffc2\016" +
    "\uffc2\020\uffc2\022\uffc2\024\uffc2\030\uffc2\035\uffc2\036\uffc2" +
    "\037\uffc2\042\uffc2\044\uffc2\053\uffc2\054\152\055\uffc2\056" +
    "\uffc2\057\151\062\uffc2\063\uffc2\064\uffc2\065\uffc2\067\uffc2" +
    "\071\uffc2\077\uffc2\101\uffc2\102\uffc2\103\uffc2\105\uffc2\106" +
    "\uffc2\107\uffc2\110\uffc2\111\uffc2\112\uffc2\001\002\000\006" +
    "\060\164\061\165\001\002\000\004\065\166\001\002\000" +
    "\004\065\uffcc\001\002\000\004\065\uffcb\001\002\000\004" +
    "\066\167\001\002\000\070\003\047\004\042\005\015\006" +
    "\046\010\050\014\045\016\063\020\060\024\024\030\016" +
    "\035\065\036\031\037\070\042\027\044\043\056\025\062" +
    "\007\063\034\064\052\077\032\101\061\102\062\103\014" +
    "\105\051\110\064\111\056\112\022\001\002\000\004\067" +
    "\171\001\002\000\100\003\uffcd\004\uffcd\005\uffcd\006\uffcd" +
    "\010\uffcd\014\uffcd\016\uffcd\020\uffcd\022\uffcd\024\uffcd\030" +
    "\uffcd\035\uffcd\036\uffcd\037\uffcd\042\uffcd\044\uffcd\056\uffcd" +
    "\062\uffcd\063\uffcd\064\uffcd\067\uffcd\077\uffcd\101\uffcd\102" +
    "\uffcd\103\uffcd\105\uffcd\106\uffcd\107\uffcd\110\uffcd\111\uffcd" +
    "\112\uffcd\001\002\000\016\004\133\005\015\006\046\010" +
    "\050\056\025\064\052\001\002\000\114\003\uffc4\004\uffc4" +
    "\005\uffc4\006\uffc4\010\uffc4\014\uffc4\016\uffc4\020\uffc4\022" +
    "\uffc4\024\uffc4\030\uffc4\035\uffc4\036\uffc4\037\uffc4\042\uffc4" +
    "\044\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\062" +
    "\uffc4\063\uffc4\064\uffc4\065\uffc4\067\uffc4\071\uffc4\077\uffc4" +
    "\101\uffc4\102\uffc4\103\uffc4\105\uffc4\106\uffc4\107\uffc4\110" +
    "\uffc4\111\uffc4\112\uffc4\001\002\000\016\004\133\005\015" +
    "\006\046\010\050\056\025\064\052\001\002\000\114\003" +
    "\uffc0\004\uffc0\005\uffc0\006\uffc0\010\uffc0\014\uffc0\016\uffc0" +
    "\020\uffc0\022\uffc0\024\uffc0\030\uffc0\035\uffc0\036\uffc0\037" +
    "\uffc0\042\uffc0\044\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0" +
    "\057\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0\067\uffc0\071" +
    "\uffc0\077\uffc0\101\uffc0\102\uffc0\103\uffc0\105\uffc0\106\uffc0" +
    "\107\uffc0\110\uffc0\111\uffc0\112\uffc0\001\002\000\140\003" +
    "\uffb5\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011\142" +
    "\012\141\013\140\014\uffb5\016\uffb5\020\uffb5\022\uffb5\024" +
    "\uffb5\030\uffb5\035\uffb5\036\uffb5\037\uffb5\042\uffb5\044\uffb5" +
    "\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053" +
    "\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\062\uffb5\063\uffb5" +
    "\064\uffb5\065\uffb5\067\uffb5\071\uffb5\077\uffb5\101\uffb5\102" +
    "\uffb5\103\uffb5\105\uffb5\106\uffb5\107\uffb5\110\uffb5\111\uffb5" +
    "\112\uffb5\001\002\000\070\003\uffdc\004\uffdc\005\uffdc\006" +
    "\uffdc\010\uffdc\014\uffdc\016\uffdc\020\uffdc\024\uffdc\030\uffdc" +
    "\035\uffdc\036\uffdc\037\uffdc\042\uffdc\044\uffdc\056\uffdc\062" +
    "\uffdc\063\uffdc\064\uffdc\077\uffdc\101\uffdc\102\uffdc\103\uffdc" +
    "\105\uffdc\110\uffdc\111\uffdc\112\uffdc\001\002\000\070\003" +
    "\047\004\042\005\015\006\046\010\050\014\045\016\063" +
    "\020\060\024\024\030\016\035\065\036\031\037\070\042" +
    "\027\044\043\056\025\062\007\063\034\064\052\077\032" +
    "\101\061\102\062\103\014\105\051\110\064\111\056\112" +
    "\022\001\002\000\004\067\202\001\002\000\004\077\203" +
    "\001\002\000\004\064\uffdb\001\002\000\004\064\205\001" +
    "\002\000\016\004\133\005\015\006\046\010\050\056\025" +
    "\064\052\001\002\000\014\053\155\054\152\055\154\057" +
    "\151\065\207\001\002\000\004\071\210\001\002\000\100" +
    "\003\uffda\004\uffda\005\uffda\006\uffda\010\uffda\014\uffda\016" +
    "\uffda\020\uffda\022\uffda\024\uffda\030\uffda\035\uffda\036\uffda" +
    "\037\uffda\042\uffda\044\uffda\056\uffda\062\uffda\063\uffda\064" +
    "\uffda\067\uffda\077\uffda\101\uffda\102\uffda\103\uffda\105\uffda" +
    "\106\uffda\107\uffda\110\uffda\111\uffda\112\uffda\001\002\000" +
    "\070\003\uffd9\004\uffd9\005\uffd9\006\uffd9\010\uffd9\014\uffd9" +
    "\016\uffd9\020\uffd9\024\uffd9\030\uffd9\035\uffd9\036\uffd9\037" +
    "\uffd9\042\uffd9\044\uffd9\056\uffd9\062\uffd9\063\uffd9\064\uffd9" +
    "\077\uffd9\101\uffd9\102\uffd9\103\uffd9\105\uffd9\110\uffd9\111" +
    "\uffd9\112\uffd9\001\002\000\070\003\047\004\042\005\015" +
    "\006\046\010\050\014\045\016\063\020\060\024\024\030" +
    "\016\035\065\036\031\037\070\042\027\044\043\056\025" +
    "\062\007\063\034\064\052\077\032\101\061\102\062\103" +
    "\014\105\051\110\064\111\056\112\022\001\002\000\004" +
    "\067\214\001\002\000\004\100\215\001\002\000\004\064" +
    "\uffd8\001\002\000\004\064\217\001\002\000\016\004\133" +
    "\005\015\006\046\010\050\056\025\064\052\001\002\000" +
    "\014\053\155\054\152\055\154\057\151\065\221\001\002" +
    "\000\004\071\222\001\002\000\100\003\uffd7\004\uffd7\005" +
    "\uffd7\006\uffd7\010\uffd7\014\uffd7\016\uffd7\020\uffd7\022\uffd7" +
    "\024\uffd7\030\uffd7\035\uffd7\036\uffd7\037\uffd7\042\uffd7\044" +
    "\uffd7\056\uffd7\062\uffd7\063\uffd7\064\uffd7\067\uffd7\077\uffd7" +
    "\101\uffd7\102\uffd7\103\uffd7\105\uffd7\106\uffd7\107\uffd7\110" +
    "\uffd7\111\uffd7\112\uffd7\001\002\000\004\064\224\001\002" +
    "\000\004\075\104\001\002\000\004\065\226\001\002\000" +
    "\004\071\227\001\002\000\100\003\uffa2\004\uffa2\005\uffa2" +
    "\006\uffa2\010\uffa2\014\uffa2\016\uffa2\020\uffa2\022\uffa2\024" +
    "\uffa2\030\uffa2\035\uffa2\036\uffa2\037\uffa2\042\uffa2\044\uffa2" +
    "\056\uffa2\062\uffa2\063\uffa2\064\uffa2\067\uffa2\077\uffa2\101" +
    "\uffa2\102\uffa2\103\uffa2\105\uffa2\106\uffa2\107\uffa2\110\uffa2" +
    "\111\uffa2\112\uffa2\001\002\000\100\003\uffeb\004\uffeb\005" +
    "\uffeb\006\uffeb\010\uffeb\014\uffeb\016\uffeb\020\uffeb\022\uffeb" +
    "\024\uffeb\030\uffeb\035\uffeb\036\uffeb\037\uffeb\042\uffeb\044" +
    "\uffeb\056\uffeb\062\uffeb\063\uffeb\064\uffeb\067\uffeb\077\uffeb" +
    "\101\uffeb\102\uffeb\103\uffeb\105\uffeb\106\uffeb\107\uffeb\110" +
    "\uffeb\111\uffeb\112\uffeb\001\002\000\014\053\155\054\152" +
    "\055\154\057\151\065\232\001\002\000\140\003\uffac\004" +
    "\uffac\005\uffac\006\uffac\007\uffac\010\uffac\011\uffac\012\uffac" +
    "\013\uffac\014\uffac\016\uffac\020\uffac\022\uffac\024\uffac\030" +
    "\uffac\035\uffac\036\uffac\037\uffac\042\uffac\044\uffac\045\uffac" +
    "\046\uffac\047\uffac\050\uffac\051\uffac\052\uffac\053\uffac\054" +
    "\uffac\055\uffac\056\uffac\057\uffac\062\uffac\063\uffac\064\uffac" +
    "\065\uffac\067\uffac\071\uffac\077\uffac\101\uffac\102\uffac\103" +
    "\uffac\105\uffac\106\uffac\107\uffac\110\uffac\111\uffac\112\uffac" +
    "\001\002\000\014\004\133\005\015\006\046\010\050\064" +
    "\052\001\002\000\016\007\135\010\137\011\142\012\141" +
    "\013\140\065\uffe7\001\002\000\004\065\236\001\002\000" +
    "\004\066\237\001\002\000\004\106\242\001\002\000\010" +
    "\067\uffdd\106\242\107\252\001\002\000\010\067\uffe4\106" +
    "\uffe4\107\uffe4\001\002\000\006\005\245\006\244\001\002" +
    "\000\004\072\uffe3\001\002\000\004\072\uffe0\001\002\000" +
    "\004\072\uffe1\001\002\000\004\072\247\001\002\000\070" +
    "\003\047\004\042\005\015\006\046\010\050\014\045\016" +
    "\063\020\060\024\024\030\016\035\065\036\031\037\070" +
    "\042\027\044\043\056\025\062\007\063\034\064\052\077" +
    "\032\101\061\102\062\103\014\105\051\110\064\111\056" +
    "\112\022\001\002\000\010\067\uffe2\106\uffe2\107\uffe2\001" +
    "\002\000\004\067\257\001\002\000\004\072\uffdf\001\002" +
    "\000\010\067\uffe5\106\uffe5\107\uffe5\001\002\000\004\072" +
    "\255\001\002\000\070\003\047\004\042\005\015\006\046" +
    "\010\050\014\045\016\063\020\060\024\024\030\016\035" +
    "\065\036\031\037\070\042\027\044\043\056\025\062\007" +
    "\063\034\064\052\077\032\101\061\102\062\103\014\105" +
    "\051\110\064\111\056\112\022\001\002\000\004\067\uffde" +
    "\001\002\000\100\003\uffe6\004\uffe6\005\uffe6\006\uffe6\010" +
    "\uffe6\014\uffe6\016\uffe6\020\uffe6\022\uffe6\024\uffe6\030\uffe6" +
    "\035\uffe6\036\uffe6\037\uffe6\042\uffe6\044\uffe6\056\uffe6\062" +
    "\uffe6\063\uffe6\064\uffe6\067\uffe6\077\uffe6\101\uffe6\102\uffe6" +
    "\103\uffe6\105\uffe6\106\uffe6\107\uffe6\110\uffe6\111\uffe6\112" +
    "\uffe6\001\002\000\140\003\uffad\004\uffad\005\uffad\006\uffad" +
    "\007\uffad\010\uffad\011\142\012\141\013\140\014\uffad\016" +
    "\uffad\020\uffad\022\uffad\024\uffad\030\uffad\035\uffad\036\uffad" +
    "\037\uffad\042\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050" +
    "\uffad\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad\056\uffad" +
    "\057\uffad\062\uffad\063\uffad\064\uffad\065\uffad\067\uffad\071" +
    "\uffad\077\uffad\101\uffad\102\uffad\103\uffad\105\uffad\106\uffad" +
    "\107\uffad\110\uffad\111\uffad\112\uffad\001\002\000\100\003" +
    "\uffe9\004\uffe9\005\uffe9\006\uffe9\010\uffe9\014\uffe9\016\uffe9" +
    "\020\uffe9\022\uffe9\024\uffe9\030\uffe9\035\uffe9\036\uffe9\037" +
    "\uffe9\042\uffe9\044\uffe9\056\uffe9\062\uffe9\063\uffe9\064\uffe9" +
    "\067\uffe9\077\uffe9\101\uffe9\102\uffe9\103\uffe9\105\uffe9\106" +
    "\uffe9\107\uffe9\110\uffe9\111\uffe9\112\uffe9\001\002\000\100" +
    "\003\uffe8\004\uffe8\005\uffe8\006\uffe8\010\uffe8\014\uffe8\016" +
    "\uffe8\020\uffe8\022\uffe8\024\uffe8\030\uffe8\035\uffe8\036\uffe8" +
    "\037\uffe8\042\uffe8\044\uffe8\056\uffe8\062\uffe8\063\uffe8\064" +
    "\uffe8\067\uffe8\077\uffe8\101\uffe8\102\uffe8\103\uffe8\105\uffe8" +
    "\106\uffe8\107\uffe8\110\uffe8\111\uffe8\112\uffe8\001\002\000" +
    "\004\073\264\001\002\000\004\064\265\001\002\000\004" +
    "\074\267\001\002\000\004\065\272\001\002\000\006\065" +
    "\uffa3\070\270\001\002\000\004\074\267\001\002\000\004" +
    "\065\uffa4\001\002\000\004\071\273\001\002\000\102\003" +
    "\uffa5\004\uffa5\005\uffa5\006\uffa5\010\uffa5\014\uffa5\016\uffa5" +
    "\020\uffa5\022\uffa5\024\uffa5\030\uffa5\035\uffa5\036\uffa5\037" +
    "\uffa5\042\uffa5\044\uffa5\056\uffa5\062\uffa5\063\uffa5\064\uffa5" +
    "\067\uffa5\076\uffa5\077\uffa5\101\uffa5\102\uffa5\103\uffa5\105" +
    "\uffa5\106\uffa5\107\uffa5\110\uffa5\111\uffa5\112\uffa5\001\002" +
    "\000\004\004\275\001\002\000\004\064\300\001\002\000" +
    "\004\067\277\001\002\000\100\003\uff92\004\uff92\005\uff92" +
    "\006\uff92\010\uff92\014\uff92\016\uff92\020\uff92\022\uff92\024" +
    "\uff92\030\uff92\035\uff92\036\uff92\037\uff92\042\uff92\044\uff92" +
    "\056\uff92\062\uff92\063\uff92\064\uff92\067\uff92\077\uff92\101" +
    "\uff92\102\uff92\103\uff92\105\uff92\106\uff92\107\uff92\110\uff92" +
    "\111\uff92\112\uff92\001\002\000\004\065\301\001\002\000" +
    "\004\071\302\001\002\000\006\067\uff90\076\303\001\002" +
    "\000\004\004\275\001\002\000\004\067\uff91\001\002\000" +
    "\014\004\133\005\015\006\046\010\050\064\052\001\002" +
    "\000\016\007\135\010\137\011\142\012\141\013\140\071" +
    "\307\001\002\000\100\003\uffab\004\uffab\005\uffab\006\uffab" +
    "\010\uffab\014\uffab\016\uffab\020\uffab\022\uffab\024\uffab\030" +
    "\uffab\035\uffab\036\uffab\037\uffab\042\uffab\044\uffab\056\uffab" +
    "\062\uffab\063\uffab\064\uffab\067\uffab\077\uffab\101\uffab\102" +
    "\uffab\103\uffab\105\uffab\106\uffab\107\uffab\110\uffab\111\uffab" +
    "\112\uffab\001\002\000\014\004\133\005\015\006\046\010" +
    "\050\064\052\001\002\000\014\004\uffb9\005\uffb9\006\uffb9" +
    "\010\uffb9\064\uffb9\001\002\000\014\004\uffb8\005\uffb8\006" +
    "\uffb8\010\uffb8\064\uffb8\001\002\000\014\004\uffbb\005\uffbb" +
    "\006\uffbb\010\uffbb\064\uffbb\001\002\000\014\004\uffb6\005" +
    "\uffb6\006\uffb6\010\uffb6\064\uffb6\001\002\000\014\004\uffb7" +
    "\005\uffb7\006\uffb7\010\uffb7\064\uffb7\001\002\000\014\004" +
    "\uffba\005\uffba\006\uffba\010\uffba\064\uffba\001\002\000\124" +
    "\003\uffbd\004\uffbd\005\uffbd\006\uffbd\007\135\010\137\011" +
    "\142\012\141\013\140\014\uffbd\016\uffbd\020\uffbd\022\uffbd" +
    "\024\uffbd\030\uffbd\035\uffbd\036\uffbd\037\uffbd\042\uffbd\044" +
    "\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\062\uffbd" +
    "\063\uffbd\064\uffbd\065\uffbd\067\uffbd\071\uffbd\077\uffbd\101" +
    "\uffbd\102\uffbd\103\uffbd\105\uffbd\106\uffbd\107\uffbd\110\uffbd" +
    "\111\uffbd\112\uffbd\001\002\000\004\064\321\001\002\000" +
    "\016\004\133\005\015\006\046\010\050\056\025\064\052" +
    "\001\002\000\014\053\155\054\152\055\154\057\151\065" +
    "\323\001\002\000\004\066\uffc9\001\002\000\004\066\325" +
    "\001\002\000\070\003\047\004\042\005\015\006\046\010" +
    "\050\014\045\016\063\020\060\024\024\030\016\035\065" +
    "\036\031\037\070\042\027\044\043\056\025\062\007\063" +
    "\034\064\052\077\032\101\061\102\062\103\014\105\051" +
    "\110\064\111\056\112\022\001\002\000\004\067\327\001" +
    "\002\000\100\003\uffc8\004\uffc8\005\uffc8\006\uffc8\010\uffc8" +
    "\014\uffc8\016\uffc8\020\uffc8\022\uffc8\024\uffc8\030\uffc8\035" +
    "\uffc8\036\uffc8\037\uffc8\042\uffc8\044\uffc8\056\uffc8\062\uffc8" +
    "\063\uffc8\064\uffc8\067\uffc8\077\uffc8\101\uffc8\102\uffc8\103" +
    "\uffc8\105\uffc8\106\uffc8\107\uffc8\110\uffc8\111\uffc8\112\uffc8" +
    "\001\002\000\004\064\331\001\002\000\004\075\104\001" +
    "\002\000\004\065\333\001\002\000\004\071\334\001\002" +
    "\000\100\003\uffa0\004\uffa0\005\uffa0\006\uffa0\010\uffa0\014" +
    "\uffa0\016\uffa0\020\uffa0\022\uffa0\024\uffa0\030\uffa0\035\uffa0" +
    "\036\uffa0\037\uffa0\042\uffa0\044\uffa0\056\uffa0\062\uffa0\063" +
    "\uffa0\064\uffa0\067\uffa0\077\uffa0\101\uffa0\102\uffa0\103\uffa0" +
    "\105\uffa0\106\uffa0\107\uffa0\110\uffa0\111\uffa0\112\uffa0\001" +
    "\002\000\004\004\336\001\002\000\004\065\337\001\002" +
    "\000\004\071\340\001\002\000\100\003\uff93\004\uff93\005" +
    "\uff93\006\uff93\010\uff93\014\uff93\016\uff93\020\uff93\022\uff93" +
    "\024\uff93\030\uff93\035\uff93\036\uff93\037\uff93\042\uff93\044" +
    "\uff93\056\uff93\062\uff93\063\uff93\064\uff93\067\uff93\077\uff93" +
    "\101\uff93\102\uff93\103\uff93\105\uff93\106\uff93\107\uff93\110" +
    "\uff93\111\uff93\112\uff93\001\002\000\114\003\uffbf\004\uffbf" +
    "\005\uffbf\006\uffbf\010\uffbf\014\uffbf\016\uffbf\020\uffbf\022" +
    "\uffbf\024\uffbf\030\uffbf\035\uffbf\036\uffbf\037\uffbf\042\uffbf" +
    "\044\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf\062" +
    "\uffbf\063\uffbf\064\uffbf\065\uffbf\067\uffbf\071\uffbf\077\uffbf" +
    "\101\uffbf\102\uffbf\103\uffbf\105\uffbf\106\uffbf\107\uffbf\110" +
    "\uffbf\111\uffbf\112\uffbf\001\002\000\004\004\343\001\002" +
    "\000\004\065\344\001\002\000\004\071\345\001\002\000" +
    "\100\003\uff94\004\uff94\005\uff94\006\uff94\010\uff94\014\uff94" +
    "\016\uff94\020\uff94\022\uff94\024\uff94\030\uff94\035\uff94\036" +
    "\uff94\037\uff94\042\uff94\044\uff94\056\uff94\062\uff94\063\uff94" +
    "\064\uff94\067\uff94\077\uff94\101\uff94\102\uff94\103\uff94\105" +
    "\uff94\106\uff94\107\uff94\110\uff94\111\uff94\112\uff94\001\002" +
    "\000\100\003\uffea\004\uffea\005\uffea\006\uffea\010\uffea\014" +
    "\uffea\016\uffea\020\uffea\022\uffea\024\uffea\030\uffea\035\uffea" +
    "\036\uffea\037\uffea\042\uffea\044\uffea\056\uffea\062\uffea\063" +
    "\uffea\064\uffea\067\uffea\077\uffea\101\uffea\102\uffea\103\uffea" +
    "\105\uffea\106\uffea\107\uffea\110\uffea\111\uffea\112\uffea\001" +
    "\002\000\004\071\350\001\002\000\004\002\000\001\002" +
    "\000\004\004\361\001\002\000\004\004\353\001\002\000" +
    "\004\064\354\001\002\000\004\065\355\001\002\000\004" +
    "\066\356\001\002\000\070\003\047\004\042\005\015\006" +
    "\046\010\050\014\045\016\063\020\060\024\024\030\016" +
    "\035\065\036\031\037\070\042\027\044\043\056\025\062" +
    "\007\063\034\064\052\077\032\101\061\102\062\103\014" +
    "\105\051\110\064\111\056\112\022\001\002\000\004\067" +
    "\360\001\002\000\100\003\uff98\004\uff98\005\uff98\006\uff98" +
    "\010\uff98\014\uff98\016\uff98\020\uff98\022\uff98\024\uff98\030" +
    "\uff98\035\uff98\036\uff98\037\uff98\042\uff98\044\uff98\056\uff98" +
    "\062\uff98\063\uff98\064\uff98\067\uff98\077\uff98\101\uff98\102" +
    "\uff98\103\uff98\105\uff98\106\uff98\107\uff98\110\uff98\111\uff98" +
    "\112\uff98\001\002\000\004\064\362\001\002\000\004\065" +
    "\363\001\002\000\004\066\364\001\002\000\004\014\045" +
    "\001\002\000\004\067\377\001\002\000\004\076\367\001" +
    "\002\000\004\021\370\001\002\000\004\004\371\001\002" +
    "\000\004\073\372\001\002\000\004\064\373\001\002\000" +
    "\004\065\uff95\001\002\000\004\065\375\001\002\000\004" +
    "\071\376\001\002\000\004\067\uff96\001\002\000\100\003" +
    "\uff97\004\uff97\005\uff97\006\uff97\010\uff97\014\uff97\016\uff97" +
    "\020\uff97\022\uff97\024\uff97\030\uff97\035\uff97\036\uff97\037" +
    "\uff97\042\uff97\044\uff97\056\uff97\062\uff97\063\uff97\064\uff97" +
    "\067\uff97\077\uff97\101\uff97\102\uff97\103\uff97\105\uff97\106" +
    "\uff97\107\uff97\110\uff97\111\uff97\112\uff97\001\002\000\016" +
    "\004\133\005\015\006\046\010\050\056\025\064\052\001" +
    "\002\000\014\053\155\054\152\055\154\057\151\065\uffd6" +
    "\001\002\000\004\065\u0103\001\002\000\004\066\u0104\001" +
    "\002\000\070\003\047\004\042\005\015\006\046\010\050" +
    "\014\045\016\063\020\060\024\024\030\016\035\065\036" +
    "\031\037\070\042\027\044\043\056\025\062\007\063\034" +
    "\064\052\077\032\101\061\102\062\103\014\105\051\110" +
    "\064\111\056\112\022\001\002\000\004\067\u0106\001\002" +
    "\000\102\003\uffd5\004\uffd5\005\uffd5\006\uffd5\010\uffd5\014" +
    "\uffd5\016\uffd5\020\uffd5\022\uffd5\024\uffd5\030\uffd5\035\uffd5" +
    "\036\uffd5\037\uffd5\042\uffd5\044\uffd5\056\uffd5\062\uffd5\063" +
    "\uffd5\064\uffd5\067\uffd5\077\uffd5\101\uffd5\102\uffd5\103\uffd5" +
    "\104\uffd5\105\uffd5\106\uffd5\107\uffd5\110\uffd5\111\uffd5\112" +
    "\uffd5\001\002\000\102\003\uffd1\004\uffd1\005\uffd1\006\uffd1" +
    "\010\uffd1\014\uffd1\016\uffd1\020\uffd1\022\uffd1\024\uffd1\030" +
    "\uffd1\035\uffd1\036\uffd1\037\uffd1\042\uffd1\044\uffd1\056\uffd1" +
    "\062\uffd1\063\uffd1\064\uffd1\067\uffd1\077\uffd1\101\uffd1\102" +
    "\uffd1\103\uffd1\104\u0109\105\uffd1\106\uffd1\107\uffd1\110\uffd1" +
    "\111\uffd1\112\uffd1\001\002\000\100\003\uffd4\004\uffd4\005" +
    "\uffd4\006\uffd4\010\uffd4\014\uffd4\016\uffd4\020\uffd4\022\uffd4" +
    "\024\uffd4\030\uffd4\035\uffd4\036\uffd4\037\uffd4\042\uffd4\044" +
    "\uffd4\056\uffd4\062\uffd4\063\uffd4\064\uffd4\067\uffd4\077\uffd4" +
    "\101\uffd4\102\uffd4\103\uffd4\105\uffd4\106\uffd4\107\uffd4\110" +
    "\uffd4\111\uffd4\112\uffd4\001\002\000\004\066\uffd3\001\002" +
    "\000\004\066\u010b\001\002\000\070\003\047\004\042\005" +
    "\015\006\046\010\050\014\045\016\063\020\060\024\024" +
    "\030\016\035\065\036\031\037\070\042\027\044\043\056" +
    "\025\062\007\063\034\064\052\077\032\101\061\102\062" +
    "\103\014\105\051\110\064\111\056\112\022\001\002\000" +
    "\004\067\u010d\001\002\000\100\003\uffd2\004\uffd2\005\uffd2" +
    "\006\uffd2\010\uffd2\014\uffd2\016\uffd2\020\uffd2\022\uffd2\024" +
    "\uffd2\030\uffd2\035\uffd2\036\uffd2\037\uffd2\042\uffd2\044\uffd2" +
    "\056\uffd2\062\uffd2\063\uffd2\064\uffd2\067\uffd2\077\uffd2\101" +
    "\uffd2\102\uffd2\103\uffd2\105\uffd2\106\uffd2\107\uffd2\110\uffd2" +
    "\111\uffd2\112\uffd2\001\002\000\012\022\uffff\067\uffff\106" +
    "\uffff\107\uffff\001\002\000\006\071\u0110\073\u0111\001\002" +
    "\000\100\003\uffaa\004\uffaa\005\uffaa\006\uffaa\010\uffaa\014" +
    "\uffaa\016\uffaa\020\uffaa\022\uffaa\024\uffaa\030\uffaa\035\uffaa" +
    "\036\uffaa\037\uffaa\042\uffaa\044\uffaa\056\uffaa\062\uffaa\063" +
    "\uffaa\064\uffaa\067\uffaa\077\uffaa\101\uffaa\102\uffaa\103\uffaa" +
    "\105\uffaa\106\uffaa\107\uffaa\110\uffaa\111\uffaa\112\uffaa\001" +
    "\002\000\014\004\133\005\015\006\046\010\050\064\052" +
    "\001\002\000\016\007\135\010\137\011\142\012\141\013" +
    "\140\071\u0113\001\002\000\100\003\uffa9\004\uffa9\005\uffa9" +
    "\006\uffa9\010\uffa9\014\uffa9\016\uffa9\020\uffa9\022\uffa9\024" +
    "\uffa9\030\uffa9\035\uffa9\036\uffa9\037\uffa9\042\uffa9\044\uffa9" +
    "\056\uffa9\062\uffa9\063\uffa9\064\uffa9\067\uffa9\077\uffa9\101" +
    "\uffa9\102\uffa9\103\uffa9\105\uffa9\106\uffa9\107\uffa9\110\uffa9" +
    "\111\uffa9\112\uffa9\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0112\000\004\006\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\060\002\037\007\016\013\032\014\040" +
    "\015\043\016\053\022\011\023\012\025\054\026\034\027" +
    "\056\030\027\031\065\032\010\033\007\034\025\035\066" +
    "\036\022\037\036\041\035\045\020\046\052\047\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\002\037\007\u010d\013\032\014" +
    "\040\015\043\016\053\022\011\023\012\025\054\026\034" +
    "\027\056\030\027\031\065\032\010\033\007\034\025\035" +
    "\066\036\022\037\036\041\035\045\020\046\052\047\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\037\046\340\047\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\065\317\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\307\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\257\001\001" +
    "\000\002\001\001\000\010\002\037\046\230\047\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\073" +
    "\001\001\000\004\011\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\062\130" +
    "\001\001\000\002\001\001\000\004\002\133\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\175\001\001" +
    "\000\004\063\146\001\001\000\004\002\145\001\001\000" +
    "\004\002\144\001\001\000\004\002\143\001\001\000\004" +
    "\002\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\002\037\046\147" +
    "\047\017\001\001\000\002\001\001\000\004\072\173\001" +
    "\001\000\004\070\171\001\001\000\004\064\161\001\001" +
    "\000\004\071\157\001\001\000\004\067\155\001\001\000" +
    "\010\002\037\046\156\047\017\001\001\000\002\001\001" +
    "\000\010\002\037\046\160\047\017\001\001\000\002\001" +
    "\001\000\004\004\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\002" +
    "\037\007\167\013\032\014\040\015\043\016\053\022\011" +
    "\023\012\025\054\026\034\027\056\030\027\031\065\032" +
    "\010\033\007\034\025\035\066\036\022\037\036\041\035" +
    "\045\020\046\052\047\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\037\046\172\047\017\001\001" +
    "\000\002\001\001\000\010\002\037\046\174\047\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\053\177" +
    "\001\001\000\060\002\037\007\200\013\032\014\040\015" +
    "\043\016\053\022\011\023\012\025\054\026\034\027\056" +
    "\030\027\031\065\032\010\033\007\034\025\035\066\036" +
    "\022\037\036\041\035\045\020\046\052\047\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\054\203\001" +
    "\001\000\002\001\001\000\010\002\037\046\205\047\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\055\211\001\001\000\060\002\037\007\212" +
    "\013\032\014\040\015\043\016\053\022\011\023\012\025" +
    "\054\026\034\027\056\030\027\031\065\032\010\033\007" +
    "\034\025\035\066\036\022\037\036\041\035\045\020\046" +
    "\052\047\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\056\215\001\001\000\002\001\001\000\010\002" +
    "\037\046\217\047\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\224\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\002\233\001\001\000\004\050\234\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\042\237\043" +
    "\240\001\001\000\006\043\252\044\250\001\001\000\002" +
    "\001\001\000\004\005\242\001\001\000\004\051\245\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\060\002\037\007\247\013\032\014\040\015\043\016" +
    "\053\022\011\023\012\025\054\026\034\027\056\030\027" +
    "\031\065\032\010\033\007\034\025\035\066\036\022\037" +
    "\036\041\035\045\020\046\052\047\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\052\253\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\002\037\007\255" +
    "\013\032\014\040\015\043\016\053\022\011\023\012\025" +
    "\054\026\034\027\056\030\027\031\065\032\010\033\007" +
    "\034\025\035\066\036\022\037\036\041\035\045\020\046" +
    "\052\047\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\265\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\270\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\275\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\303\001\001\000\002\001" +
    "\001\000\004\002\305\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\316\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\002\037\046\321\047\017\001\001\000\002" +
    "\001\001\000\004\066\323\001\001\000\002\001\001\000" +
    "\060\002\037\007\325\013\032\014\040\015\043\016\053" +
    "\022\011\023\012\025\054\026\034\027\056\030\027\031" +
    "\065\032\010\033\007\034\025\035\066\036\022\037\036" +
    "\041\035\045\020\046\052\047\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\331" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\002\037\007\356\013\032\014" +
    "\040\015\043\016\053\022\011\023\012\025\054\026\034" +
    "\027\056\030\027\031\065\032\010\033\007\034\025\035" +
    "\066\036\022\037\036\041\035\045\020\046\052\047\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\364" +
    "\032\365\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\373\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\037\046\u0100\047\017\001\001\000\004\057\u0101\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\002\037" +
    "\007\u0104\013\032\014\040\015\043\016\053\022\011\023" +
    "\012\025\054\026\034\027\056\030\027\031\065\032\010" +
    "\033\007\034\025\035\066\036\022\037\036\041\035\045" +
    "\020\046\052\047\017\001\001\000\002\001\001\000\004" +
    "\060\u0106\001\001\000\004\040\u0107\001\001\000\002\001" +
    "\001\000\004\061\u0109\001\001\000\002\001\001\000\060" +
    "\002\037\007\u010b\013\032\014\040\015\043\016\053\022" +
    "\011\023\012\025\054\026\034\027\056\030\027\031\065" +
    "\032\010\033\007\034\025\035\066\036\022\037\036\041" +
    "\035\045\020\046\052\047\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\002\u0111\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
    
    public void syntax_error(Symbol s){
        Interfaz_c3d.notificar_er("Error R de sintaxis: "+ s.value +" Linea "+(s.left)+" columna "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        Interfaz_c3d.notificar_er("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

//Codigo de acciones vamos a simular atrubutos heredados con variables globales
    String heredado="";
    String aux="";
    Stack<Display> display = new Stack<>();
    Display tmp;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // METODOS ::= ID PAR_A PAR_C PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODOS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // METODOS ::= ID PAR_A PAR_C PYCOMA ENTER METODOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODOS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // IMPLEOPRINCIPAL ::= OPRINPAL LLAV_A METODOS LLAV_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPLEOPRINCIPAL",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // MOSTRARTABLA ::= MTABLA PAR_A ID PAR_C PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MOSTRARTABLA",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // MOSTRARGRAFICO ::= GRAFICO PAR_A ID PAR_C PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MOSTRARGRAFICO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DEFEXPRESION ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFEXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SENESPECIALES ::= DECALFABETO ENTER EXPRESION ID ASIG PAR_A DEFEXPRESION PAR_C PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENESPECIALES",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // IMPLEFUNCION ::= FUNCION ER ID PAR_A PAR_C LLAV_A SENESPECIALES LLAV_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPLEFUNCION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // IMPLEFUNCION ::= FUNCION AUTOMATA ID PAR_A PAR_C LLAV_A SENTENCIAS LLAV_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPLEFUNCION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ELEMENTOSTRANSICION ::= LLAV_A ELEMENTOSESTADOS LLAV_C COMA ELEMENTO COMA LLAV_A ELEMENTOSESTADOS LLAV_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELEMENTOSTRANSICION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ELEMENTOSTRANSICION ::= ELEMENTOESTADO COMA ELEMENTO COMA LLAV_A ELEMENTOSESTADOS LLAV_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELEMENTOSTRANSICION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ELEMENTOSTRANSICION ::= LLAV_A ELEMENTOSESTADOS LLAV_C COMA ELEMENTO COMA ELEMENTOESTADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELEMENTOSTRANSICION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ELEMENTOSTRANSICION ::= ELEMENTOESTADO COMA ELEMENTO COMA ELEMENTOESTADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELEMENTOSTRANSICION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ELEMENTOSESTADOS ::= ELEMENTOESTADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELEMENTOSESTADOS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ELEMENTOSESTADOS ::= ELEMENTOESTADO COMA ELEMENTOSESTADOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELEMENTOSESTADOS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DECTRANSICIONES ::= TRANSICION ASIG PAR_A ELEMENTOSTRANSICION PAR_C PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECTRANSICIONES",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DECESTADOSFIN ::= EFINAL ASIG PAR_A ELEMENTOSESTADOS PAR_C PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECESTADOSFIN",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DECESTADOI ::= EINICIAL ASIG ELEMENTOESTADO PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECESTADOI",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DECESTADOS ::= ESTADO ASIG PAR_A ELEMENTOSESTADOS PAR_C PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECESTADOS",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ELEMENTOS ::= ELEMENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ELEMENTOS ::= ELEMENTO COMA ELEMENTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DECALFABETO ::= ALFABETO ID ASIG PAR_A ELEMENTOS PAR_C PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECALFABETO",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TIPO ::= BOOLEANO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TIPO ::= CHAR1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TIPO ::= INT1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DECLARA ::= TIPO ID ASIG EXP PYCOMA 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Interfaz_c3d.notificar("Asigna "+exp+" a cada varibale declarada.");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DECLARA ::= TIPO ID PYCOMA 
            {
              Object RESULT =null;
		
                Interfaz_c3d.notificar("Reserva espacio y almacena el id de las variables.");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ASIGNA ::= ID ASIG EXP PYCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Interfaz_c3d.notificar(id+"="+exp);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNA",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= PAR_A LOG PAR_C 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Atributo_C3D val = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = val.aux;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= MENOS EXP 
            {
              String RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=Generador_tmp.genera_tmp();
                Interfaz_c3d.notificar(RESULT+"="+sim+val);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= DECIMAL 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                RESULT=val;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= ENTERO 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=val;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP ::= ID 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=val;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP ::= EXP POT EXP 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=Generador_tmp.genera_tmp();
                Interfaz_c3d.notificar(RESULT+"="+val+sim+val2);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP ::= EXP DIV EXP 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=Generador_tmp.genera_tmp();
                Interfaz_c3d.notificar(RESULT+"="+val+sim+val2);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP ::= EXP POR EXP 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=Generador_tmp.genera_tmp();
                Interfaz_c3d.notificar(RESULT+"="+val+sim+val2);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXP ::= EXP MENOS EXP 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=Generador_tmp.genera_tmp();
                Interfaz_c3d.notificar(RESULT+"="+val+sim+val2);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP ::= EXP MAS EXP 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=Generador_tmp.genera_tmp(); //sintetizo el temporal 
                Interfaz_c3d.notificar(RESULT+"="+val+sim+val2); //imprimo la cadena la operacion
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OP_REL ::= NEQUAL 
            {
              String RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=sim;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP_REL ::= EQUAL 
            {
              String RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=sim;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP_REL ::= BELOWE 
            {
              String RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=sim;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OP_REL ::= ABOVEE 
            {
              String RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=sim;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OP_REL ::= BELOW 
            {
              String RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=sim;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OP_REL ::= ABOVE 
            {
              String RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=sim;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // REL ::= EXP 
            {
              Atributo_C3D RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT= new Atributo_C3D();
                RESULT.aux= val;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("REL",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // REL ::= EXP OP_REL EXP 
            {
              Atributo_C3D RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT= new Atributo_C3D();
                RESULT.etq_true= Generador_tmp.genera_etq();
                RESULT.etq_false= Generador_tmp.genera_etq();
                //imprimimos la condicion de la expresion relacional con su saltos
                Interfaz_c3d.notificar("if "+t1+op+t2+" then goto "+RESULT.etq_true+"\ngoto "+RESULT.etq_false);
                // creamos la cadena temporal solo se usa en XOR
                RESULT.aux= "if "+t1+op+t2+" then goto "+RESULT.etq_false+"\ngoto "+RESULT.etq_true; 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("REL",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LOG ::= REL 
            {
              Atributo_C3D RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Atributo_C3D val = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=val;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOG",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LOG ::= NOT LOG 
            {
              Atributo_C3D RESULT =null;
		int relleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int relright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Atributo_C3D rel = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT= new Atributo_C3D();
                RESULT.etq_true = rel.etq_false;
                RESULT.etq_false = rel.etq_true;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOG",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LOG ::= LOG NAND NT$18 LOG 
            {
              Atributo_C3D RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Atributo_C3D) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rel1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rel1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Atributo_C3D rel1 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rel2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rel2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Atributo_C3D rel2 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new Atributo_C3D();
                RESULT.etq_true= rel1.etq_false+","+rel2.etq_false;  
                RESULT.etq_false= rel2.etq_true;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOG",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$18 ::= 
            {
              Atributo_C3D RESULT =null;
		int rel1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rel1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Atributo_C3D rel1 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                Interfaz_c3d.notificar(rel1.etq_true+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LOG ::= LOG XOR NT$17 LOG 
            {
              Atributo_C3D RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Atributo_C3D) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rel1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rel1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Atributo_C3D rel1 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rel2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rel2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Atributo_C3D rel2 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Interfaz_c3d.notificar(rel1.etq_true+":");
                Interfaz_c3d.notificar(rel2.aux);
                RESULT= new Atributo_C3D();
                RESULT.etq_true =rel2.etq_true;
                RESULT.etq_false=rel2.etq_false;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOG",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$17 ::= 
            {
              Atributo_C3D RESULT =null;
		int rel1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rel1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Atributo_C3D rel1 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                Interfaz_c3d.notificar(rel1.etq_false+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LOG ::= LOG AND NT$16 LOG 
            {
              Atributo_C3D RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Atributo_C3D) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rel1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rel1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Atributo_C3D rel1 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rel2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rel2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Atributo_C3D rel2 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new Atributo_C3D();
                RESULT.etq_true= rel2.etq_true;  
                RESULT.etq_false= rel1.etq_false+","+rel2.etq_false;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOG",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$16 ::= 
            {
              Atributo_C3D RESULT =null;
		int rel1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rel1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Atributo_C3D rel1 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                Interfaz_c3d.notificar(rel1.etq_true+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LOG ::= LOG OR NT$15 LOG 
            {
              Atributo_C3D RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Atributo_C3D) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rel1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rel1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Atributo_C3D rel1 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rel2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rel2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Atributo_C3D rel2 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new Atributo_C3D();
                RESULT.etq_true= rel1.etq_true+","+rel2.etq_true;  
                RESULT.etq_false= rel2.etq_false;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOG",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$15 ::= 
            {
              Atributo_C3D RESULT =null;
		int rel1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rel1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Atributo_C3D rel1 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                Interfaz_c3d.notificar(rel1.etq_false+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // WHILE ::= MIENTRAS NT$13 PAR_A LOG PAR_C NT$14 LLAV_A SENTENCIAS LLAV_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                Interfaz_c3d.notificar("goto "+display.peek().et_inicio); //etiqueta que retorna a la condición
                Interfaz_c3d.notificar(log.etq_false+":");
                Interfaz_c3d.notificar(display.peek().et_salida+":");
                display.pop();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                Interfaz_c3d.notificar(log.etq_true+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$13 ::= 
            {
              Object RESULT =null;

                tmp =  new Display(Generador_tmp.genera_etq(),Generador_tmp.genera_etq(),1);
                display.push(tmp);
                Interfaz_c3d.notificar(display.peek().et_inicio+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPER ::= DEC 
            {
              String RESULT =null;
		
                    String tmp=Generador_tmp.genera_tmp(); 
                    RESULT=tmp+"="+heredado+"-1\n"+heredado+"="+tmp;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPER",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPER ::= INC 
            {
              String RESULT =null;
		
                    String tmp=Generador_tmp.genera_tmp(); 
                    RESULT=tmp+"="+heredado+"+1\n"+heredado+"="+tmp;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPER",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FOR ::= PARA PAR_A INT1 ID NT$10 ASIG EXP PYCOMA NT$11 LOG PYCOMA NT$12 OPER PAR_C LLAV_A SENTENCIAS LLAV_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
                Interfaz_c3d.notificar(op);    
                Interfaz_c3d.notificar("goto "+display.peek().et_inicio); //etiqueta que retorna a la condición
                Interfaz_c3d.notificar(log.etq_false+":");
                Interfaz_c3d.notificar(display.peek().et_salida+":");
                display.pop();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                Interfaz_c3d.notificar(log.etq_true+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                Interfaz_c3d.notificar(id+"="+exp); //asigna el valor
                tmp =  new Display(Generador_tmp.genera_etq(),Generador_tmp.genera_etq(),1);
                display.push(tmp);
                Interfaz_c3d.notificar(display.peek().et_inicio+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$10 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                heredado=id;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ELSE ::= 
            {
              Object RESULT =null;
		
                Interfaz_c3d.notificar(heredado+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ELSE ::= SINO NT$9 LLAV_A SENTENCIAS LLAV_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                Interfaz_c3d.notificar(aux+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$9 ::= 
            {
              Object RESULT =null;

                aux=Generador_tmp.genera_etq();
                Interfaz_c3d.notificar("goto "+aux);
                Interfaz_c3d.notificar(heredado+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IF ::= SI PAR_A LOG NT$7 PAR_C LLAV_A SENTENCIAS LLAV_C NT$8 ELSE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
 
                heredado=log.etq_false; 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$7 ::= 
            {
              Object RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                Interfaz_c3d.notificar(log.etq_true+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // REPEAT ::= REPETIR LLAV_A NT$5 SENTENCIAS LLAV_C HASTA NT$6 PAR_A LOG PAR_C PYCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    Interfaz_c3d.notificar(log.etq_false+":");
                    Interfaz_c3d.notificar("goto "+aux);
                    Interfaz_c3d.notificar(log.etq_true+":");
                    Interfaz_c3d.notificar(display.peek().et_salida+":");
                    display.pop();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("REPEAT",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

                    Interfaz_c3d.notificar(display.peek().et_inicio+":");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$5 ::= 
            {
              Object RESULT =null;

                    tmp =  new Display(Generador_tmp.genera_etq(),Generador_tmp.genera_etq(),1);
                    display.push(tmp);
                    aux=Generador_tmp.genera_etq();
                    Interfaz_c3d.notificar(aux+":");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DO_WHILE ::= HACER LLAV_A NT$3 SENTENCIAS LLAV_C MIENTRAS NT$4 PAR_A LOG PAR_C PYCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        Interfaz_c3d.notificar(log.etq_true+":");
                        Interfaz_c3d.notificar("goto "+aux);
                        Interfaz_c3d.notificar(log.etq_false+":");
                        Interfaz_c3d.notificar(display.peek().et_salida+":");
                        display.pop();
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

                        Interfaz_c3d.notificar(display.peek().et_inicio+":");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$3 ::= 
            {
              Object RESULT =null;

                        tmp =  new Display(Generador_tmp.genera_etq(),Generador_tmp.genera_etq(),1);
                        display.push(tmp);
                        aux=Generador_tmp.genera_etq();
                        Interfaz_c3d.notificar(aux+":");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DEF ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DEF ::= DEFECTO NT$2 DPUNTO SENTENCIAS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                //a defecto despues de sus sentencias de una vez se le agrega la etiqueta de salida
                Interfaz_c3d.notificar("goto "+display.peek().et_salida);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$2 ::= 
            {
              Object RESULT =null;

                String et=Generador_tmp.genera_etq(); //generamos la etiqueta del caso
                Interfaz_c3d.notificar(et+":"); // la escribimos antes de sus sentencias
                aux+="goto "+et+"\n";
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VAL ::= DECIMAL 
            {
              String RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=dec;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VAL ::= ENTERO 
            {
              String RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=ent;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // C ::= CASO VAL NT$1 DPUNTO SENTENCIAS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$1 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                String et=Generador_tmp.genera_etq(); //generamos la etiqueta del caso
                Interfaz_c3d.notificar(et+":"); // la escribimos antes de sus sentencias
                aux+="if "+heredado+"=="+val+" goto "+et+"\n";
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CASOS ::= C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CASOS ::= CASOS C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SELECT ::= SELEC PAR_A EXP NT$0 PAR_C LLAV_A CASOS DEF LLAV_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		
                    Interfaz_c3d.notificar(display.peek().et_inicio+":");
                    Interfaz_c3d.notificar(aux);
                    Interfaz_c3d.notificar(display.peek().et_salida+":");
                    display.pop();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$0 ::= 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                    tmp= new Display(Generador_tmp.genera_etq(),Generador_tmp.genera_etq(),2); //generamos las etiquetas de inicio y salida
                    display.push(tmp);
                    Interfaz_c3d.notificar("goto "+display.peek().et_inicio);
                    heredado=exp; //valor a comparar con cada caso
                    aux=""; //cadena donde llevaremos los saltos condicionales de los casos
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // S ::= error LLAV_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // S ::= error PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // S ::= CONTINUA PYCOMA 
            {
              Object RESULT =null;
		
                if(display.isEmpty()){
                    Interfaz_c3d.notificar("ERROR: no existe una sentecia envolvente valida para detener");
                }else{
                    if(display.peek().tipo==2){
                        Interfaz_c3d.notificar("ERROR: la sentencia envolvnete no permite continue");
                    }else{
                        Interfaz_c3d.notificar("goto "+display.peek().et_inicio);
                    }
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // S ::= DETENER PYCOMA 
            {
              Object RESULT =null;
		 //vamos a validar cuando aparecen estas expresiones
                if(display.isEmpty()){
                    Interfaz_c3d.notificar("ERROR: no existe una sentecia envolvente valida para detener");
                }else{
                    Interfaz_c3d.notificar("goto "+display.peek().et_salida);
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // S ::= DO_WHILE 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // S ::= REPEAT 
            {
              Object RESULT =null;
		
                 //Interfaz_c3d.notificar(" "); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // S ::= SELECT 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // S ::= IF 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // S ::= FOR 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // S ::= ASIGNA 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // S ::= WHILE 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // S ::= IMPLEOPRINCIPAL 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // S ::= IMPLEFUNCION 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // S ::= MOSTRARTABLA 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // S ::= MOSTRARGRAFICO 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // S ::= DECTRANSICIONES 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // S ::= DECESTADOSFIN 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // S ::= DECESTADOI 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // S ::= DECALFABETO 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // S ::= DECESTADOS 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // S ::= DECLARA 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= LOG 
            {
              Object RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Interfaz_c3d.notificar(log.etq_true+":\n"+log.etq_false+":");
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIAS ::= S 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIAS ::= S SENTENCIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INI PYCOMA SENTENCIAS FIN PYCOMA 
            {
              Object RESULT =null;
		
                Generador_tmp.reset();
                Interfaz_c3d.notificar("Inicio:\n");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

