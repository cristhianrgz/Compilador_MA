
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package fuentes;

import java_cup.runtime.Symbol;
import Interfaz.Interfaz_c3d;
import java.util.Stack;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\002\004\000\002\006\007\000\002\007" +
    "\004\000\002\007\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\004\000\002\011\004\000\002\011" +
    "\004\000\002\011\004\000\002\031\002\000\002\022\013" +
    "\000\002\023\004\000\002\023\003\000\002\032\002\000" +
    "\002\024\007\000\002\005\003\000\002\005\003\000\002" +
    "\033\002\000\002\025\006\000\002\025\002\000\002\034" +
    "\002\000\002\035\002\000\002\016\015\000\002\036\002" +
    "\000\002\037\002\000\002\026\015\000\002\040\002\000" +
    "\002\041\002\000\002\020\014\000\002\042\002\000\002" +
    "\021\007\000\002\021\002\000\002\043\002\000\002\044" +
    "\002\000\002\045\002\000\002\017\023\000\002\004\003" +
    "\000\002\004\003\000\002\046\002\000\002\047\002\000" +
    "\002\015\013\000\002\050\002\000\002\027\006\000\002" +
    "\051\002\000\002\027\006\000\002\052\002\000\002\027" +
    "\006\000\002\053\002\000\002\027\006\000\002\027\004" +
    "\000\002\027\003\000\002\030\005\000\002\030\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\004\000\002\002\005\000\002" +
    "\014\006\000\002\013\005\000\002\013\007\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\012\005\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\004\025\005\001\002\000\004\002\262\001" +
    "\002\000\004\070\006\001\002\000\060\003\036\004\033" +
    "\005\013\006\035\010\037\014\034\016\051\017\010\020" +
    "\046\035\053\036\024\055\022\061\007\062\026\063\041" +
    "\073\025\075\047\076\050\077\014\101\040\104\052\105" +
    "\044\106\020\001\002\000\004\004\uffb1\001\002\000\004" +
    "\004\uffad\001\002\000\004\004\252\001\002\000\070\003" +
    "\ufffe\004\ufffe\005\ufffe\006\ufffe\010\ufffe\014\ufffe\016\ufffe" +
    "\017\ufffe\020\ufffe\022\ufffe\035\ufffe\036\ufffe\055\ufffe\061" +
    "\ufffe\062\ufffe\063\ufffe\066\ufffe\073\ufffe\075\ufffe\076\ufffe" +
    "\077\ufffe\101\ufffe\102\ufffe\103\ufffe\104\ufffe\105\ufffe\106" +
    "\ufffe\001\002\000\130\003\uffb8\004\uffb8\005\uffb8\006\uffb8" +
    "\007\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\016" +
    "\uffb8\017\uffb8\020\uffb8\022\uffb8\035\uffb8\036\uffb8\044\uffb8" +
    "\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053" +
    "\uffb8\054\uffb8\055\uffb8\056\uffb8\061\uffb8\062\uffb8\063\uffb8" +
    "\064\uffb8\066\uffb8\070\uffb8\073\uffb8\075\uffb8\076\uffb8\077" +
    "\uffb8\101\uffb8\102\uffb8\103\uffb8\104\uffb8\105\uffb8\106\uffb8" +
    "\001\002\000\004\063\234\001\002\000\062\003\036\004" +
    "\033\005\013\006\035\010\037\014\034\016\051\017\010" +
    "\020\046\022\232\035\053\036\024\055\022\061\007\062" +
    "\026\063\041\073\025\075\047\076\050\077\014\101\040" +
    "\104\052\105\044\106\020\001\002\000\104\003\uffc7\004" +
    "\uffc7\005\uffc7\006\uffc7\010\uffc7\014\uffc7\016\uffc7\017\uffc7" +
    "\020\uffc7\022\uffc7\035\uffc7\036\uffc7\052\uffc7\053\uffc7\054" +
    "\uffc7\055\uffc7\056\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7" +
    "\066\uffc7\070\uffc7\073\uffc7\075\uffc7\076\uffc7\077\uffc7\101" +
    "\uffc7\102\uffc7\103\uffc7\104\uffc7\105\uffc7\106\uffc7\001\002" +
    "\000\070\003\ufff6\004\ufff6\005\ufff6\006\ufff6\010\ufff6\014" +
    "\ufff6\016\ufff6\017\ufff6\020\ufff6\022\ufff6\035\ufff6\036\ufff6" +
    "\055\ufff6\061\ufff6\062\ufff6\063\ufff6\066\ufff6\073\ufff6\075" +
    "\ufff6\076\ufff6\077\ufff6\101\ufff6\102\ufff6\103\ufff6\104\ufff6" +
    "\105\ufff6\106\ufff6\001\002\000\004\070\231\001\002\000" +
    "\070\003\ufff9\004\ufff9\005\ufff9\006\ufff9\010\ufff9\014\ufff9" +
    "\016\ufff9\017\ufff9\020\ufff9\022\ufff9\035\ufff9\036\ufff9\055" +
    "\ufff9\061\ufff9\062\ufff9\063\ufff9\066\ufff9\073\ufff9\075\ufff9" +
    "\076\ufff9\077\ufff9\101\ufff9\102\ufff9\103\ufff9\104\ufff9\105" +
    "\ufff9\106\ufff9\001\002\000\016\004\061\005\013\006\035" +
    "\010\037\055\022\063\041\001\002\000\070\003\ufff5\004" +
    "\ufff5\005\ufff5\006\ufff5\010\ufff5\014\ufff5\016\ufff5\017\ufff5" +
    "\020\ufff5\022\ufff5\035\ufff5\036\ufff5\055\ufff5\061\ufff5\062" +
    "\ufff5\063\ufff5\066\ufff5\073\ufff5\075\ufff5\076\ufff5\077\ufff5" +
    "\101\ufff5\102\ufff5\103\ufff5\104\ufff5\105\ufff5\106\ufff5\001" +
    "\002\000\004\004\uffaa\001\002\000\004\063\uffd3\001\002" +
    "\000\004\004\uffb0\001\002\000\070\003\ufffa\004\ufffa\005" +
    "\ufffa\006\ufffa\010\ufffa\014\ufffa\016\ufffa\017\ufffa\020\ufffa" +
    "\022\ufffa\035\ufffa\036\ufffa\055\ufffa\061\ufffa\062\ufffa\063" +
    "\ufffa\066\ufffa\073\ufffa\075\ufffa\076\ufffa\077\ufffa\101\ufffa" +
    "\102\ufffa\103\ufffa\104\ufffa\105\ufffa\106\ufffa\001\002\000" +
    "\070\003\ufff7\004\ufff7\005\ufff7\006\ufff7\010\ufff7\014\ufff7" +
    "\016\ufff7\017\ufff7\020\ufff7\022\ufff7\035\ufff7\036\ufff7\055" +
    "\ufff7\061\ufff7\062\ufff7\063\ufff7\066\ufff7\073\ufff7\075\ufff7" +
    "\076\ufff7\077\ufff7\101\ufff7\102\ufff7\103\ufff7\104\ufff7\105" +
    "\ufff7\106\ufff7\001\002\000\070\003\ufff8\004\ufff8\005\ufff8" +
    "\006\ufff8\010\ufff8\014\ufff8\016\ufff8\017\ufff8\020\ufff8\022" +
    "\ufff8\035\ufff8\036\ufff8\055\ufff8\061\ufff8\062\ufff8\063\ufff8" +
    "\066\ufff8\073\ufff8\075\ufff8\076\ufff8\077\ufff8\101\ufff8\102" +
    "\ufff8\103\ufff8\104\ufff8\105\ufff8\106\ufff8\001\002\000\130" +
    "\003\uffc5\004\uffc5\005\uffc5\006\uffc5\007\063\010\065\011" +
    "\070\012\067\013\066\014\uffc5\016\uffc5\017\uffc5\020\uffc5" +
    "\022\uffc5\035\uffc5\036\uffc5\044\213\045\216\046\211\047" +
    "\212\050\215\051\214\052\uffc5\053\uffc5\054\uffc5\055\uffc5" +
    "\056\uffc5\061\uffc5\062\uffc5\063\uffc5\064\uffc5\066\uffc5\070" +
    "\uffc5\073\uffc5\075\uffc5\076\uffc5\077\uffc5\101\uffc5\102\uffc5" +
    "\103\uffc5\104\uffc5\105\uffc5\106\uffc5\001\002\000\126\003" +
    "\uffb9\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9" +
    "\012\uffb9\013\uffb9\014\uffb9\016\uffb9\017\uffb9\020\uffb9\022" +
    "\uffb9\035\uffb9\036\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9" +
    "\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056" +
    "\uffb9\061\uffb9\062\uffb9\063\uffb9\066\uffb9\072\205\073\uffb9" +
    "\075\uffb9\076\uffb9\077\uffb9\101\uffb9\102\uffb9\103\uffb9\104" +
    "\uffb9\105\uffb9\106\uffb9\001\002\000\004\004\uffaf\001\002" +
    "\000\130\003\uffb7\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010" +
    "\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7\016\uffb7\017\uffb7" +
    "\020\uffb7\022\uffb7\035\uffb7\036\uffb7\044\uffb7\045\uffb7\046" +
    "\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7" +
    "\055\uffb7\056\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7\066" +
    "\uffb7\070\uffb7\073\uffb7\075\uffb7\076\uffb7\077\uffb7\101\uffb7" +
    "\102\uffb7\103\uffb7\104\uffb7\105\uffb7\106\uffb7\001\002\000" +
    "\006\066\204\070\203\001\002\000\014\004\061\005\013" +
    "\006\035\010\037\063\041\001\002\000\004\063\155\001" +
    "\002\000\016\004\061\005\013\006\035\010\037\055\022" +
    "\063\041\001\002\000\100\003\ufffd\004\ufffd\005\ufffd\006" +
    "\ufffd\010\ufffd\014\ufffd\016\ufffd\017\ufffd\020\ufffd\022\ufffd" +
    "\035\ufffd\036\ufffd\052\102\053\100\054\103\055\ufffd\056" +
    "\077\061\ufffd\062\ufffd\063\ufffd\066\ufffd\073\ufffd\075\ufffd" +
    "\076\ufffd\077\ufffd\101\ufffd\102\ufffd\103\ufffd\104\ufffd\105" +
    "\ufffd\106\ufffd\001\002\000\070\003\ufffc\004\ufffc\005\ufffc" +
    "\006\ufffc\010\ufffc\014\ufffc\016\ufffc\017\ufffc\020\ufffc\022" +
    "\ufffc\035\ufffc\036\ufffc\055\ufffc\061\ufffc\062\ufffc\063\ufffc" +
    "\066\ufffc\073\ufffc\075\ufffc\076\ufffc\077\ufffc\101\ufffc\102" +
    "\ufffc\103\ufffc\104\ufffc\105\ufffc\106\ufffc\001\002\000\004" +
    "\070\152\001\002\000\070\003\ufffb\004\ufffb\005\ufffb\006" +
    "\ufffb\010\ufffb\014\ufffb\016\ufffb\017\ufffb\020\ufffb\022\ufffb" +
    "\035\ufffb\036\ufffb\055\ufffb\061\ufffb\062\ufffb\063\ufffb\066" +
    "\ufffb\073\ufffb\075\ufffb\076\ufffb\077\ufffb\101\ufffb\102\ufffb" +
    "\103\ufffb\104\ufffb\105\ufffb\106\ufffb\001\002\000\004\004" +
    "\uffac\001\002\000\004\065\140\001\002\000\004\065\126" +
    "\001\002\000\004\004\uffae\001\002\000\004\063\054\001" +
    "\002\000\004\004\uffab\001\002\000\004\061\055\001\002" +
    "\000\004\004\056\001\002\000\004\072\uffd9\001\002\000" +
    "\004\072\060\001\002\000\014\004\061\005\013\006\035" +
    "\010\037\063\041\001\002\000\130\003\uffb9\004\uffb9\005" +
    "\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9" +
    "\014\uffb9\016\uffb9\017\uffb9\020\uffb9\022\uffb9\035\uffb9\036" +
    "\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9" +
    "\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\061\uffb9\062" +
    "\uffb9\063\uffb9\064\uffb9\066\uffb9\070\uffb9\073\uffb9\075\uffb9" +
    "\076\uffb9\077\uffb9\101\uffb9\102\uffb9\103\uffb9\104\uffb9\105" +
    "\uffb9\106\uffb9\001\002\000\016\007\063\010\065\011\070" +
    "\012\067\013\066\070\064\001\002\000\014\004\061\005" +
    "\013\006\035\010\037\063\041\001\002\000\016\004\uffd8" +
    "\005\uffd8\006\uffd8\010\uffd8\055\uffd8\063\uffd8\001\002\000" +
    "\014\004\061\005\013\006\035\010\037\063\041\001\002" +
    "\000\014\004\061\005\013\006\035\010\037\063\041\001" +
    "\002\000\014\004\061\005\013\006\035\010\037\063\041" +
    "\001\002\000\014\004\061\005\013\006\035\010\037\063" +
    "\041\001\002\000\130\003\uffbc\004\uffbc\005\uffbc\006\uffbc" +
    "\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\066\014\uffbc\016" +
    "\uffbc\017\uffbc\020\uffbc\022\uffbc\035\uffbc\036\uffbc\044\uffbc" +
    "\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053" +
    "\uffbc\054\uffbc\055\uffbc\056\uffbc\061\uffbc\062\uffbc\063\uffbc" +
    "\064\uffbc\066\uffbc\070\uffbc\073\uffbc\075\uffbc\076\uffbc\077" +
    "\uffbc\101\uffbc\102\uffbc\103\uffbc\104\uffbc\105\uffbc\106\uffbc" +
    "\001\002\000\130\003\uffbb\004\uffbb\005\uffbb\006\uffbb\007" +
    "\uffbb\010\uffbb\011\uffbb\012\uffbb\013\066\014\uffbb\016\uffbb" +
    "\017\uffbb\020\uffbb\022\uffbb\035\uffbb\036\uffbb\044\uffbb\045" +
    "\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb" +
    "\054\uffbb\055\uffbb\056\uffbb\061\uffbb\062\uffbb\063\uffbb\064" +
    "\uffbb\066\uffbb\070\uffbb\073\uffbb\075\uffbb\076\uffbb\077\uffbb" +
    "\101\uffbb\102\uffbb\103\uffbb\104\uffbb\105\uffbb\106\uffbb\001" +
    "\002\000\130\003\uffba\004\uffba\005\uffba\006\uffba\007\uffba" +
    "\010\uffba\011\uffba\012\uffba\013\066\014\uffba\016\uffba\017" +
    "\uffba\020\uffba\022\uffba\035\uffba\036\uffba\044\uffba\045\uffba" +
    "\046\uffba\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054" +
    "\uffba\055\uffba\056\uffba\061\uffba\062\uffba\063\uffba\064\uffba" +
    "\066\uffba\070\uffba\073\uffba\075\uffba\076\uffba\077\uffba\101" +
    "\uffba\102\uffba\103\uffba\104\uffba\105\uffba\106\uffba\001\002" +
    "\000\130\003\uffbd\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010" +
    "\uffbd\011\070\012\067\013\066\014\uffbd\016\uffbd\017\uffbd" +
    "\020\uffbd\022\uffbd\035\uffbd\036\uffbd\044\uffbd\045\uffbd\046" +
    "\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd" +
    "\055\uffbd\056\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd\066" +
    "\uffbd\070\uffbd\073\uffbd\075\uffbd\076\uffbd\077\uffbd\101\uffbd" +
    "\102\uffbd\103\uffbd\104\uffbd\105\uffbd\106\uffbd\001\002\000" +
    "\016\004\061\005\013\006\035\010\037\055\022\063\041" +
    "\001\002\000\014\052\102\053\100\054\103\056\077\070" +
    "\101\001\002\000\016\004\uffca\005\uffca\006\uffca\010\uffca" +
    "\055\uffca\063\uffca\001\002\000\016\004\uffce\005\uffce\006" +
    "\uffce\010\uffce\055\uffce\063\uffce\001\002\000\006\057\uffd7" +
    "\060\uffd7\001\002\000\016\004\uffd0\005\uffd0\006\uffd0\010" +
    "\uffd0\055\uffd0\063\uffd0\001\002\000\016\004\uffcc\005\uffcc" +
    "\006\uffcc\010\uffcc\055\uffcc\063\uffcc\001\002\000\016\004" +
    "\061\005\013\006\035\010\037\055\022\063\041\001\002" +
    "\000\104\003\uffcb\004\uffcb\005\uffcb\006\uffcb\010\uffcb\014" +
    "\uffcb\016\uffcb\017\uffcb\020\uffcb\022\uffcb\035\uffcb\036\uffcb" +
    "\052\uffcb\053\100\054\uffcb\055\uffcb\056\077\061\uffcb\062" +
    "\uffcb\063\uffcb\064\uffcb\066\uffcb\070\uffcb\073\uffcb\075\uffcb" +
    "\076\uffcb\077\uffcb\101\uffcb\102\uffcb\103\uffcb\104\uffcb\105" +
    "\uffcb\106\uffcb\001\002\000\016\004\061\005\013\006\035" +
    "\010\037\055\022\063\041\001\002\000\104\003\uffcf\004" +
    "\uffcf\005\uffcf\006\uffcf\010\uffcf\014\uffcf\016\uffcf\017\uffcf" +
    "\020\uffcf\022\uffcf\035\uffcf\036\uffcf\052\uffcf\053\100\054" +
    "\uffcf\055\uffcf\056\077\061\uffcf\062\uffcf\063\uffcf\064\uffcf" +
    "\066\uffcf\070\uffcf\073\uffcf\075\uffcf\076\uffcf\077\uffcf\101" +
    "\uffcf\102\uffcf\103\uffcf\104\uffcf\105\uffcf\106\uffcf\001\002" +
    "\000\006\057\112\060\113\001\002\000\004\064\114\001" +
    "\002\000\004\064\uffd5\001\002\000\004\064\uffd4\001\002" +
    "\000\004\065\115\001\002\000\060\003\036\004\033\005" +
    "\013\006\035\010\037\014\034\016\051\017\010\020\046" +
    "\035\053\036\024\055\022\061\007\062\026\063\041\073" +
    "\025\075\047\076\050\077\014\101\040\104\052\105\044" +
    "\106\020\001\002\000\062\003\036\004\033\005\013\006" +
    "\035\010\037\014\034\016\051\017\010\020\046\035\053" +
    "\036\024\055\022\061\007\062\026\063\041\066\120\073" +
    "\025\075\047\076\050\077\014\101\040\104\052\105\044" +
    "\106\020\001\002\000\070\003\uffff\004\uffff\005\uffff\006" +
    "\uffff\010\uffff\014\uffff\016\uffff\017\uffff\020\uffff\022\uffff" +
    "\035\uffff\036\uffff\055\uffff\061\uffff\062\uffff\063\uffff\066" +
    "\uffff\073\uffff\075\uffff\076\uffff\077\uffff\101\uffff\102\uffff" +
    "\103\uffff\104\uffff\105\uffff\106\uffff\001\002\000\070\003" +
    "\uffd6\004\uffd6\005\uffd6\006\uffd6\010\uffd6\014\uffd6\016\uffd6" +
    "\017\uffd6\020\uffd6\022\uffd6\035\uffd6\036\uffd6\055\uffd6\061" +
    "\uffd6\062\uffd6\063\uffd6\066\uffd6\073\uffd6\075\uffd6\076\uffd6" +
    "\077\uffd6\101\uffd6\102\uffd6\103\uffd6\104\uffd6\105\uffd6\106" +
    "\uffd6\001\002\000\016\004\061\005\013\006\035\010\037" +
    "\055\022\063\041\001\002\000\104\003\uffcd\004\uffcd\005" +
    "\uffcd\006\uffcd\010\uffcd\014\uffcd\016\uffcd\017\uffcd\020\uffcd" +
    "\022\uffcd\035\uffcd\036\uffcd\052\uffcd\053\uffcd\054\uffcd\055" +
    "\uffcd\056\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd\066\uffcd" +
    "\070\uffcd\073\uffcd\075\uffcd\076\uffcd\077\uffcd\101\uffcd\102" +
    "\uffcd\103\uffcd\104\uffcd\105\uffcd\106\uffcd\001\002\000\016" +
    "\004\061\005\013\006\035\010\037\055\022\063\041\001" +
    "\002\000\104\003\uffc9\004\uffc9\005\uffc9\006\uffc9\010\uffc9" +
    "\014\uffc9\016\uffc9\017\uffc9\020\uffc9\022\uffc9\035\uffc9\036" +
    "\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\061\uffc9" +
    "\062\uffc9\063\uffc9\064\uffc9\066\uffc9\070\uffc9\073\uffc9\075" +
    "\uffc9\076\uffc9\077\uffc9\101\uffc9\102\uffc9\103\uffc9\104\uffc9" +
    "\105\uffc9\106\uffc9\001\002\000\130\003\uffbe\004\uffbe\005" +
    "\uffbe\006\uffbe\007\uffbe\010\uffbe\011\070\012\067\013\066" +
    "\014\uffbe\016\uffbe\017\uffbe\020\uffbe\022\uffbe\035\uffbe\036" +
    "\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe" +
    "\052\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\061\uffbe\062" +
    "\uffbe\063\uffbe\064\uffbe\066\uffbe\070\uffbe\073\uffbe\075\uffbe" +
    "\076\uffbe\077\uffbe\101\uffbe\102\uffbe\103\uffbe\104\uffbe\105" +
    "\uffbe\106\uffbe\001\002\000\060\003\uffe5\004\uffe5\005\uffe5" +
    "\006\uffe5\010\uffe5\014\uffe5\016\uffe5\017\uffe5\020\uffe5\035" +
    "\uffe5\036\uffe5\055\uffe5\061\uffe5\062\uffe5\063\uffe5\073\uffe5" +
    "\075\uffe5\076\uffe5\077\uffe5\101\uffe5\104\uffe5\105\uffe5\106" +
    "\uffe5\001\002\000\060\003\036\004\033\005\013\006\035" +
    "\010\037\014\034\016\051\017\010\020\046\035\053\036" +
    "\024\055\022\061\007\062\026\063\041\073\025\075\047" +
    "\076\050\077\014\101\040\104\052\105\044\106\020\001" +
    "\002\000\062\003\036\004\033\005\013\006\035\010\037" +
    "\014\034\016\051\017\010\020\046\035\053\036\024\055" +
    "\022\061\007\062\026\063\041\066\131\073\025\075\047" +
    "\076\050\077\014\101\040\104\052\105\044\106\020\001" +
    "\002\000\004\073\132\001\002\000\004\063\uffe4\001\002" +
    "\000\004\063\134\001\002\000\016\004\061\005\013\006" +
    "\035\010\037\055\022\063\041\001\002\000\014\052\102" +
    "\053\100\054\103\056\077\064\136\001\002\000\004\070" +
    "\137\001\002\000\070\003\uffe3\004\uffe3\005\uffe3\006\uffe3" +
    "\010\uffe3\014\uffe3\016\uffe3\017\uffe3\020\uffe3\022\uffe3\035" +
    "\uffe3\036\uffe3\055\uffe3\061\uffe3\062\uffe3\063\uffe3\066\uffe3" +
    "\073\uffe3\075\uffe3\076\uffe3\077\uffe3\101\uffe3\102\uffe3\103" +
    "\uffe3\104\uffe3\105\uffe3\106\uffe3\001\002\000\060\003\uffe2" +
    "\004\uffe2\005\uffe2\006\uffe2\010\uffe2\014\uffe2\016\uffe2\017" +
    "\uffe2\020\uffe2\035\uffe2\036\uffe2\055\uffe2\061\uffe2\062\uffe2" +
    "\063\uffe2\073\uffe2\075\uffe2\076\uffe2\077\uffe2\101\uffe2\104" +
    "\uffe2\105\uffe2\106\uffe2\001\002\000\060\003\036\004\033" +
    "\005\013\006\035\010\037\014\034\016\051\017\010\020" +
    "\046\035\053\036\024\055\022\061\007\062\026\063\041" +
    "\073\025\075\047\076\050\077\014\101\040\104\052\105" +
    "\044\106\020\001\002\000\062\003\036\004\033\005\013" +
    "\006\035\010\037\014\034\016\051\017\010\020\046\035" +
    "\053\036\024\055\022\061\007\062\026\063\041\066\143" +
    "\073\025\075\047\076\050\077\014\101\040\104\052\105" +
    "\044\106\020\001\002\000\004\074\144\001\002\000\004" +
    "\063\uffe1\001\002\000\004\063\146\001\002\000\016\004" +
    "\061\005\013\006\035\010\037\055\022\063\041\001\002" +
    "\000\014\052\102\053\100\054\103\056\077\064\150\001" +
    "\002\000\004\070\151\001\002\000\070\003\uffe0\004\uffe0" +
    "\005\uffe0\006\uffe0\010\uffe0\014\uffe0\016\uffe0\017\uffe0\020" +
    "\uffe0\022\uffe0\035\uffe0\036\uffe0\055\uffe0\061\uffe0\062\uffe0" +
    "\063\uffe0\066\uffe0\073\uffe0\075\uffe0\076\uffe0\077\uffe0\101" +
    "\uffe0\102\uffe0\103\uffe0\104\uffe0\105\uffe0\106\uffe0\001\002" +
    "\000\070\003\ufff4\004\ufff4\005\ufff4\006\ufff4\010\ufff4\014" +
    "\ufff4\016\ufff4\017\ufff4\020\ufff4\022\ufff4\035\ufff4\036\ufff4" +
    "\055\ufff4\061\ufff4\062\ufff4\063\ufff4\066\ufff4\073\ufff4\075" +
    "\ufff4\076\ufff4\077\ufff4\101\ufff4\102\ufff4\103\ufff4\104\ufff4" +
    "\105\ufff4\106\ufff4\001\002\000\014\052\102\053\100\054" +
    "\103\056\077\064\154\001\002\000\130\003\uffb5\004\uffb5" +
    "\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013" +
    "\uffb5\014\uffb5\016\uffb5\017\uffb5\020\uffb5\022\uffb5\035\uffb5" +
    "\036\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051" +
    "\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\061\uffb5" +
    "\062\uffb5\063\uffb5\064\uffb5\066\uffb5\070\uffb5\073\uffb5\075" +
    "\uffb5\076\uffb5\077\uffb5\101\uffb5\102\uffb5\103\uffb5\104\uffb5" +
    "\105\uffb5\106\uffb5\001\002\000\014\004\061\005\013\006" +
    "\035\010\037\063\041\001\002\000\016\007\063\010\065" +
    "\011\070\012\067\013\066\064\ufff0\001\002\000\004\064" +
    "\160\001\002\000\004\065\161\001\002\000\004\102\164" +
    "\001\002\000\010\066\uffe6\102\164\103\174\001\002\000" +
    "\010\066\uffed\102\uffed\103\uffed\001\002\000\006\005\167" +
    "\006\166\001\002\000\004\071\uffec\001\002\000\004\071" +
    "\uffe9\001\002\000\004\071\uffea\001\002\000\004\071\171" +
    "\001\002\000\060\003\036\004\033\005\013\006\035\010" +
    "\037\014\034\016\051\017\010\020\046\035\053\036\024" +
    "\055\022\061\007\062\026\063\041\073\025\075\047\076" +
    "\050\077\014\101\040\104\052\105\044\106\020\001\002" +
    "\000\066\003\036\004\033\005\013\006\035\010\037\014" +
    "\034\016\051\017\010\020\046\035\053\036\024\055\022" +
    "\061\007\062\026\063\041\066\uffeb\073\025\075\047\076" +
    "\050\077\014\101\040\102\uffeb\103\uffeb\104\052\105\044" +
    "\106\020\001\002\000\004\066\201\001\002\000\004\071" +
    "\uffe8\001\002\000\010\066\uffee\102\uffee\103\uffee\001\002" +
    "\000\004\071\177\001\002\000\060\003\036\004\033\005" +
    "\013\006\035\010\037\014\034\016\051\017\010\020\046" +
    "\035\053\036\024\055\022\061\007\062\026\063\041\073" +
    "\025\075\047\076\050\077\014\101\040\104\052\105\044" +
    "\106\020\001\002\000\062\003\036\004\033\005\013\006" +
    "\035\010\037\014\034\016\051\017\010\020\046\035\053" +
    "\036\024\055\022\061\007\062\026\063\041\066\uffe7\073" +
    "\025\075\047\076\050\077\014\101\040\104\052\105\044" +
    "\106\020\001\002\000\070\003\uffef\004\uffef\005\uffef\006" +
    "\uffef\010\uffef\014\uffef\016\uffef\017\uffef\020\uffef\022\uffef" +
    "\035\uffef\036\uffef\055\uffef\061\uffef\062\uffef\063\uffef\066" +
    "\uffef\073\uffef\075\uffef\076\uffef\077\uffef\101\uffef\102\uffef" +
    "\103\uffef\104\uffef\105\uffef\106\uffef\001\002\000\130\003" +
    "\uffb6\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011\070" +
    "\012\067\013\066\014\uffb6\016\uffb6\017\uffb6\020\uffb6\022" +
    "\uffb6\035\uffb6\036\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6" +
    "\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056" +
    "\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6\066\uffb6\070\uffb6" +
    "\073\uffb6\075\uffb6\076\uffb6\077\uffb6\101\uffb6\102\uffb6\103" +
    "\uffb6\104\uffb6\105\uffb6\106\uffb6\001\002\000\070\003\ufff2" +
    "\004\ufff2\005\ufff2\006\ufff2\010\ufff2\014\ufff2\016\ufff2\017" +
    "\ufff2\020\ufff2\022\ufff2\035\ufff2\036\ufff2\055\ufff2\061\ufff2" +
    "\062\ufff2\063\ufff2\066\ufff2\073\ufff2\075\ufff2\076\ufff2\077" +
    "\ufff2\101\ufff2\102\ufff2\103\ufff2\104\ufff2\105\ufff2\106\ufff2" +
    "\001\002\000\070\003\ufff1\004\ufff1\005\ufff1\006\ufff1\010" +
    "\ufff1\014\ufff1\016\ufff1\017\ufff1\020\ufff1\022\ufff1\035\ufff1" +
    "\036\ufff1\055\ufff1\061\ufff1\062\ufff1\063\ufff1\066\ufff1\073" +
    "\ufff1\075\ufff1\076\ufff1\077\ufff1\101\ufff1\102\ufff1\103\ufff1" +
    "\104\ufff1\105\ufff1\106\ufff1\001\002\000\014\004\061\005" +
    "\013\006\035\010\037\063\041\001\002\000\016\007\063" +
    "\010\065\011\070\012\067\013\066\070\207\001\002\000" +
    "\070\003\uffb4\004\uffb4\005\uffb4\006\uffb4\010\uffb4\014\uffb4" +
    "\016\uffb4\017\uffb4\020\uffb4\022\uffb4\035\uffb4\036\uffb4\055" +
    "\uffb4\061\uffb4\062\uffb4\063\uffb4\066\uffb4\073\uffb4\075\uffb4" +
    "\076\uffb4\077\uffb4\101\uffb4\102\uffb4\103\uffb4\104\uffb4\105" +
    "\uffb4\106\uffb4\001\002\000\014\004\061\005\013\006\035" +
    "\010\037\063\041\001\002\000\014\004\uffc2\005\uffc2\006" +
    "\uffc2\010\uffc2\063\uffc2\001\002\000\014\004\uffc1\005\uffc1" +
    "\006\uffc1\010\uffc1\063\uffc1\001\002\000\014\004\uffc4\005" +
    "\uffc4\006\uffc4\010\uffc4\063\uffc4\001\002\000\014\004\uffbf" +
    "\005\uffbf\006\uffbf\010\uffbf\063\uffbf\001\002\000\014\004" +
    "\uffc0\005\uffc0\006\uffc0\010\uffc0\063\uffc0\001\002\000\014" +
    "\004\uffc3\005\uffc3\006\uffc3\010\uffc3\063\uffc3\001\002\000" +
    "\114\003\uffc6\004\uffc6\005\uffc6\006\uffc6\007\063\010\065" +
    "\011\070\012\067\013\066\014\uffc6\016\uffc6\017\uffc6\020" +
    "\uffc6\022\uffc6\035\uffc6\036\uffc6\052\uffc6\053\uffc6\054\uffc6" +
    "\055\uffc6\056\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6\066" +
    "\uffc6\070\uffc6\073\uffc6\075\uffc6\076\uffc6\077\uffc6\101\uffc6" +
    "\102\uffc6\103\uffc6\104\uffc6\105\uffc6\106\uffc6\001\002\000" +
    "\004\063\221\001\002\000\016\004\061\005\013\006\035" +
    "\010\037\055\022\063\041\001\002\000\014\052\102\053" +
    "\100\054\103\056\077\064\223\001\002\000\004\065\uffd2" +
    "\001\002\000\004\065\225\001\002\000\060\003\036\004" +
    "\033\005\013\006\035\010\037\014\034\016\051\017\010" +
    "\020\046\035\053\036\024\055\022\061\007\062\026\063" +
    "\041\073\025\075\047\076\050\077\014\101\040\104\052" +
    "\105\044\106\020\001\002\000\062\003\036\004\033\005" +
    "\013\006\035\010\037\014\034\016\051\017\010\020\046" +
    "\035\053\036\024\055\022\061\007\062\026\063\041\066" +
    "\227\073\025\075\047\076\050\077\014\101\040\104\052" +
    "\105\044\106\020\001\002\000\070\003\uffd1\004\uffd1\005" +
    "\uffd1\006\uffd1\010\uffd1\014\uffd1\016\uffd1\017\uffd1\020\uffd1" +
    "\022\uffd1\035\uffd1\036\uffd1\055\uffd1\061\uffd1\062\uffd1\063" +
    "\uffd1\066\uffd1\073\uffd1\075\uffd1\076\uffd1\077\uffd1\101\uffd1" +
    "\102\uffd1\103\uffd1\104\uffd1\105\uffd1\106\uffd1\001\002\000" +
    "\104\003\uffc8\004\uffc8\005\uffc8\006\uffc8\010\uffc8\014\uffc8" +
    "\016\uffc8\017\uffc8\020\uffc8\022\uffc8\035\uffc8\036\uffc8\052" +
    "\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\061\uffc8\062\uffc8" +
    "\063\uffc8\064\uffc8\066\uffc8\070\uffc8\073\uffc8\075\uffc8\076" +
    "\uffc8\077\uffc8\101\uffc8\102\uffc8\103\uffc8\104\uffc8\105\uffc8" +
    "\106\uffc8\001\002\000\070\003\ufff3\004\ufff3\005\ufff3\006" +
    "\ufff3\010\ufff3\014\ufff3\016\ufff3\017\ufff3\020\ufff3\022\ufff3" +
    "\035\ufff3\036\ufff3\055\ufff3\061\ufff3\062\ufff3\063\ufff3\066" +
    "\ufff3\073\ufff3\075\ufff3\076\ufff3\077\ufff3\101\ufff3\102\ufff3" +
    "\103\ufff3\104\ufff3\105\ufff3\106\ufff3\001\002\000\004\070" +
    "\233\001\002\000\004\002\000\001\002\000\016\004\061" +
    "\005\013\006\035\010\037\055\022\063\041\001\002\000" +
    "\014\052\102\053\100\054\103\056\077\064\uffdf\001\002" +
    "\000\004\064\237\001\002\000\004\065\240\001\002\000" +
    "\060\003\036\004\033\005\013\006\035\010\037\014\034" +
    "\016\051\017\010\020\046\035\053\036\024\055\022\061" +
    "\007\062\026\063\041\073\025\075\047\076\050\077\014" +
    "\101\040\104\052\105\044\106\020\001\002\000\062\003" +
    "\036\004\033\005\013\006\035\010\037\014\034\016\051" +
    "\017\010\020\046\035\053\036\024\055\022\061\007\062" +
    "\026\063\041\066\242\073\025\075\047\076\050\077\014" +
    "\101\040\104\052\105\044\106\020\001\002\000\072\003" +
    "\uffde\004\uffde\005\uffde\006\uffde\010\uffde\014\uffde\016\uffde" +
    "\017\uffde\020\uffde\022\uffde\035\uffde\036\uffde\055\uffde\061" +
    "\uffde\062\uffde\063\uffde\066\uffde\073\uffde\075\uffde\076\uffde" +
    "\077\uffde\100\uffde\101\uffde\102\uffde\103\uffde\104\uffde\105" +
    "\uffde\106\uffde\001\002\000\072\003\uffda\004\uffda\005\uffda" +
    "\006\uffda\010\uffda\014\uffda\016\uffda\017\uffda\020\uffda\022" +
    "\uffda\035\uffda\036\uffda\055\uffda\061\uffda\062\uffda\063\uffda" +
    "\066\uffda\073\uffda\075\uffda\076\uffda\077\uffda\100\245\101" +
    "\uffda\102\uffda\103\uffda\104\uffda\105\uffda\106\uffda\001\002" +
    "\000\070\003\uffdd\004\uffdd\005\uffdd\006\uffdd\010\uffdd\014" +
    "\uffdd\016\uffdd\017\uffdd\020\uffdd\022\uffdd\035\uffdd\036\uffdd" +
    "\055\uffdd\061\uffdd\062\uffdd\063\uffdd\066\uffdd\073\uffdd\075" +
    "\uffdd\076\uffdd\077\uffdd\101\uffdd\102\uffdd\103\uffdd\104\uffdd" +
    "\105\uffdd\106\uffdd\001\002\000\004\065\uffdc\001\002\000" +
    "\004\065\247\001\002\000\060\003\036\004\033\005\013" +
    "\006\035\010\037\014\034\016\051\017\010\020\046\035" +
    "\053\036\024\055\022\061\007\062\026\063\041\073\025" +
    "\075\047\076\050\077\014\101\040\104\052\105\044\106" +
    "\020\001\002\000\062\003\036\004\033\005\013\006\035" +
    "\010\037\014\034\016\051\017\010\020\046\035\053\036" +
    "\024\055\022\061\007\062\026\063\041\066\251\073\025" +
    "\075\047\076\050\077\014\101\040\104\052\105\044\106" +
    "\020\001\002\000\070\003\uffdb\004\uffdb\005\uffdb\006\uffdb" +
    "\010\uffdb\014\uffdb\016\uffdb\017\uffdb\020\uffdb\022\uffdb\035" +
    "\uffdb\036\uffdb\055\uffdb\061\uffdb\062\uffdb\063\uffdb\066\uffdb" +
    "\073\uffdb\075\uffdb\076\uffdb\077\uffdb\101\uffdb\102\uffdb\103" +
    "\uffdb\104\uffdb\105\uffdb\106\uffdb\001\002\000\010\067\uffa8" +
    "\070\uffa8\072\uffa8\001\002\000\010\067\254\070\255\072" +
    "\256\001\002\000\004\004\261\001\002\000\070\003\uffb3" +
    "\004\uffb3\005\uffb3\006\uffb3\010\uffb3\014\uffb3\016\uffb3\017" +
    "\uffb3\020\uffb3\022\uffb3\035\uffb3\036\uffb3\055\uffb3\061\uffb3" +
    "\062\uffb3\063\uffb3\066\uffb3\073\uffb3\075\uffb3\076\uffb3\077" +
    "\uffb3\101\uffb3\102\uffb3\103\uffb3\104\uffb3\105\uffb3\106\uffb3" +
    "\001\002\000\014\004\061\005\013\006\035\010\037\063" +
    "\041\001\002\000\016\007\063\010\065\011\070\012\067" +
    "\013\066\070\260\001\002\000\070\003\uffb2\004\uffb2\005" +
    "\uffb2\006\uffb2\010\uffb2\014\uffb2\016\uffb2\017\uffb2\020\uffb2" +
    "\022\uffb2\035\uffb2\036\uffb2\055\uffb2\061\uffb2\062\uffb2\063" +
    "\uffb2\066\uffb2\073\uffb2\075\uffb2\076\uffb2\077\uffb2\101\uffb2" +
    "\102\uffb2\103\uffb2\104\uffb2\105\uffb2\106\uffb2\001\002\000" +
    "\010\067\uffa9\070\uffa9\072\uffa9\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\004\006\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\002\031\007\014\010\010\011\011" +
    "\013\042\014\026\015\044\016\022\017\020\020\030\022" +
    "\027\026\016\027\041\030\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\252\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\002\031" +
    "\010\010\011\116\013\042\014\026\015\044\016\022\017" +
    "\020\020\030\022\027\026\016\027\041\030\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\031\027\227\030\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\217\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\207\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\002\201\001\001\000\002\001\001\000\010\002" +
    "\031\027\152\030\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\056\001\001\000\002\001\001" +
    "\000\004\002\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\002\124\001\001\000\004\044\074\001\001" +
    "\000\004\002\073\001\001\000\004\002\072\001\001\000" +
    "\004\002\071\001\001\000\004\002\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\002\031\027\075\030\015\001\001\000\002" +
    "\001\001\000\004\053\122\001\001\000\004\051\120\001" +
    "\001\000\004\045\107\001\001\000\004\050\105\001\001" +
    "\000\004\052\103\001\001\000\010\002\031\027\104\030" +
    "\015\001\001\000\002\001\001\000\010\002\031\027\106" +
    "\030\015\001\001\000\002\001\001\000\004\004\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\002\031\007\115\010\010\011" +
    "\011\013\042\014\026\015\044\016\022\017\020\020\030" +
    "\022\027\026\016\027\041\030\015\001\001\000\034\002" +
    "\031\010\010\011\116\013\042\014\026\015\044\016\022" +
    "\017\020\020\030\022\027\026\016\027\041\030\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\002\031" +
    "\027\121\030\015\001\001\000\002\001\001\000\010\002" +
    "\031\027\123\030\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\126\001\001\000\036\002\031\007" +
    "\127\010\010\011\011\013\042\014\026\015\044\016\022" +
    "\017\020\020\030\022\027\026\016\027\041\030\015\001" +
    "\001\000\034\002\031\010\010\011\116\013\042\014\026" +
    "\015\044\016\022\017\020\020\030\022\027\026\016\027" +
    "\041\030\015\001\001\000\002\001\001\000\004\035\132" +
    "\001\001\000\002\001\001\000\010\002\031\027\134\030" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\140\001\001\000\036\002\031\007" +
    "\141\010\010\011\011\013\042\014\026\015\044\016\022" +
    "\017\020\020\030\022\027\026\016\027\041\030\015\001" +
    "\001\000\034\002\031\010\010\011\116\013\042\014\026" +
    "\015\044\016\022\017\020\020\030\022\027\026\016\027" +
    "\041\030\015\001\001\000\002\001\001\000\004\037\144" +
    "\001\001\000\002\001\001\000\010\002\031\027\146\030" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\002\155\001\001\000\004\031\156\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\023\161\024" +
    "\162\001\001\000\006\024\174\025\172\001\001\000\002" +
    "\001\001\000\004\005\164\001\001\000\004\032\167\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\002\031\007\171\010\010\011\011\013\042\014" +
    "\026\015\044\016\022\017\020\020\030\022\027\026\016" +
    "\027\041\030\015\001\001\000\034\002\031\010\010\011" +
    "\116\013\042\014\026\015\044\016\022\017\020\020\030" +
    "\022\027\026\016\027\041\030\015\001\001\000\002\001" +
    "\001\000\004\033\175\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\002\031\007\177\010\010\011\011\013" +
    "\042\014\026\015\044\016\022\017\020\020\030\022\027" +
    "\026\016\027\041\030\015\001\001\000\034\002\031\010" +
    "\010\011\116\013\042\014\026\015\044\016\022\017\020" +
    "\020\030\022\027\026\016\027\041\030\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\205\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\002\216\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\002\031\027\221\030\015\001\001\000" +
    "\002\001\001\000\004\047\223\001\001\000\002\001\001" +
    "\000\036\002\031\007\225\010\010\011\011\013\042\014" +
    "\026\015\044\016\022\017\020\020\030\022\027\026\016" +
    "\027\041\030\015\001\001\000\034\002\031\010\010\011" +
    "\116\013\042\014\026\015\044\016\022\017\020\020\030" +
    "\022\027\026\016\027\041\030\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\031\027\234\030\015\001" +
    "\001\000\004\040\235\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\002\031\007\240\010\010\011\011\013" +
    "\042\014\026\015\044\016\022\017\020\020\030\022\027" +
    "\026\016\027\041\030\015\001\001\000\034\002\031\010" +
    "\010\011\116\013\042\014\026\015\044\016\022\017\020" +
    "\020\030\022\027\026\016\027\041\030\015\001\001\000" +
    "\004\041\242\001\001\000\004\021\243\001\001\000\002" +
    "\001\001\000\004\042\245\001\001\000\002\001\001\000" +
    "\036\002\031\007\247\010\010\011\011\013\042\014\026" +
    "\015\044\016\022\017\020\020\030\022\027\026\016\027" +
    "\041\030\015\001\001\000\034\002\031\010\010\011\116" +
    "\013\042\014\026\015\044\016\022\017\020\020\030\022" +
    "\027\026\016\027\041\030\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\002\256\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
    
    public void syntax_error(Symbol s){
        Interfaz_c3d.notificar_er("Error R de sintaxis: "+ s.value +" Linea "+(s.left)+" columna "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        Interfaz_c3d.notificar_er("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

//Codigo de acciones vamos a simular atrubutos heredados con variables globales
    String heredado="";
    String aux="";
    Stack<Display> display = new Stack<>();
    Display tmp;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INI PYCOMA SENTENCIAS FIN PYCOMA 
            {
              Object RESULT =null;
		
                Generador_tmp.reset();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIAS ::= SENTENCIAS S 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIAS ::= S 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= LOG 
            {
              Object RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Interfaz_c3d.notificar(log.etq_true+":\n"+log.etq_false+":");
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // S ::= DECLARA 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // S ::= WHILE 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // S ::= ASIGNA 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // S ::= FOR 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // S ::= IF 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // S ::= SELECT 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // S ::= REPEAT 
            {
              Object RESULT =null;
		
                 //Interfaz_c3d.notificar(" "); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // S ::= DO_WHILE 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // S ::= DETENER PYCOMA 
            {
              Object RESULT =null;
		 //vamos a validar cuando aparecen estas expresiones
                if(display.isEmpty()){
                    Interfaz_c3d.notificar("ERROR: no existe una sentecia envolvente valida para detener");
                }else{
                    Interfaz_c3d.notificar("goto "+display.peek().et_salida);
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // S ::= CONTINUA PYCOMA 
            {
              Object RESULT =null;
		
                if(display.isEmpty()){
                    Interfaz_c3d.notificar("ERROR: no existe una sentecia envolvente valida para detener");
                }else{
                    if(display.peek().tipo==2){
                        Interfaz_c3d.notificar("ERROR: la sentencia envolvnete no permite continue");
                    }else{
                        Interfaz_c3d.notificar("goto "+display.peek().et_inicio);
                    }
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // S ::= error PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // S ::= error LLAV_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$0 ::= 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                    tmp= new Display(Generador_tmp.genera_etq(),Generador_tmp.genera_etq(),2); //generamos las etiquetas de inicio y salida
                    display.push(tmp);
                    Interfaz_c3d.notificar("goto "+display.peek().et_inicio);
                    heredado=exp; //valor a comparar con cada caso
                    aux=""; //cadena donde llevaremos los saltos condicionales de los casos
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SELECT ::= SELEC PAR_A EXP NT$0 PAR_C LLAV_A CASOS DEF LLAV_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		
                    Interfaz_c3d.notificar(display.peek().et_inicio+":");
                    Interfaz_c3d.notificar(aux);
                    Interfaz_c3d.notificar(display.peek().et_salida+":");
                    display.pop();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CASOS ::= CASOS C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CASOS ::= C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$1 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                String et=Generador_tmp.genera_etq(); //generamos la etiqueta del caso
                Interfaz_c3d.notificar(et+":"); // la escribimos antes de sus sentencias
                aux+="if "+heredado+"=="+val+" goto "+et+"\n";
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // C ::= CASO VAL NT$1 DPUNTO SENTENCIAS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VAL ::= ENTERO 
            {
              String RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=ent;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VAL ::= DECIMAL 
            {
              String RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=dec;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$2 ::= 
            {
              Object RESULT =null;

                String et=Generador_tmp.genera_etq(); //generamos la etiqueta del caso
                Interfaz_c3d.notificar(et+":"); // la escribimos antes de sus sentencias
                aux+="goto "+et+"\n";
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DEF ::= DEFECTO NT$2 DPUNTO SENTENCIAS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                //a defecto despues de sus sentencias de una vez se le agrega la etiqueta de salida
                Interfaz_c3d.notificar("goto "+display.peek().et_salida);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DEF ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$3 ::= 
            {
              Object RESULT =null;

                        tmp =  new Display(Generador_tmp.genera_etq(),Generador_tmp.genera_etq(),1);
                        display.push(tmp);
                        aux=Generador_tmp.genera_etq();
                        Interfaz_c3d.notificar(aux+":");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

                        Interfaz_c3d.notificar(display.peek().et_inicio+":");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DO_WHILE ::= HACER LLAV_A NT$3 SENTENCIAS LLAV_C MIENTRAS NT$4 PAR_A LOG PAR_C PYCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        Interfaz_c3d.notificar(log.etq_true+":");
                        Interfaz_c3d.notificar("goto "+aux);
                        Interfaz_c3d.notificar(log.etq_false+":");
                        Interfaz_c3d.notificar(display.peek().et_salida+":");
                        display.pop();
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$5 ::= 
            {
              Object RESULT =null;

                    tmp =  new Display(Generador_tmp.genera_etq(),Generador_tmp.genera_etq(),1);
                    display.push(tmp);
                    aux=Generador_tmp.genera_etq();
                    Interfaz_c3d.notificar(aux+":");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

                    Interfaz_c3d.notificar(display.peek().et_inicio+":");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // REPEAT ::= REPETIR LLAV_A NT$5 SENTENCIAS LLAV_C HASTA NT$6 PAR_A LOG PAR_C PYCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    Interfaz_c3d.notificar(log.etq_false+":");
                    Interfaz_c3d.notificar("goto "+aux);
                    Interfaz_c3d.notificar(log.etq_true+":");
                    Interfaz_c3d.notificar(display.peek().et_salida+":");
                    display.pop();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("REPEAT",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$7 ::= 
            {
              Object RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                Interfaz_c3d.notificar(log.etq_true+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
 
                heredado=log.etq_false; 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IF ::= SI PAR_A LOG NT$7 PAR_C LLAV_A SENTENCIAS LLAV_C NT$8 ELSE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$9 ::= 
            {
              Object RESULT =null;

                aux=Generador_tmp.genera_etq();
                Interfaz_c3d.notificar("goto "+aux);
                Interfaz_c3d.notificar(heredado+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ELSE ::= SINO NT$9 LLAV_A SENTENCIAS LLAV_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                Interfaz_c3d.notificar(aux+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ELSE ::= 
            {
              Object RESULT =null;
		
                Interfaz_c3d.notificar(heredado+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$10 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                heredado=id;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                Interfaz_c3d.notificar(id+"="+exp); //asigna el valor
                tmp =  new Display(Generador_tmp.genera_etq(),Generador_tmp.genera_etq(),1);
                display.push(tmp);
                Interfaz_c3d.notificar(display.peek().et_inicio+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                Interfaz_c3d.notificar(log.etq_true+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FOR ::= PARA PAR_A INT1 ID NT$10 ASIG EXP PYCOMA NT$11 LOG PYCOMA NT$12 OPER PAR_C LLAV_A SENTENCIAS LLAV_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
                Interfaz_c3d.notificar(op);    
                Interfaz_c3d.notificar("goto "+display.peek().et_inicio); //etiqueta que retorna a la condición
                Interfaz_c3d.notificar(log.etq_false+":");
                Interfaz_c3d.notificar(display.peek().et_salida+":");
                display.pop();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPER ::= INC 
            {
              String RESULT =null;
		
                    String tmp=Generador_tmp.genera_tmp(); 
                    RESULT=tmp+"="+heredado+"+1\n"+heredado+"="+tmp;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPER",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPER ::= DEC 
            {
              String RESULT =null;
		
                    String tmp=Generador_tmp.genera_tmp(); 
                    RESULT=tmp+"="+heredado+"-1\n"+heredado+"="+tmp;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPER",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$13 ::= 
            {
              Object RESULT =null;

                tmp =  new Display(Generador_tmp.genera_etq(),Generador_tmp.genera_etq(),1);
                display.push(tmp);
                Interfaz_c3d.notificar(display.peek().et_inicio+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                Interfaz_c3d.notificar(log.etq_true+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // WHILE ::= MIENTRAS NT$13 PAR_A LOG PAR_C NT$14 LLAV_A SENTENCIAS LLAV_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                Interfaz_c3d.notificar("goto "+display.peek().et_inicio); //etiqueta que retorna a la condición
                Interfaz_c3d.notificar(log.etq_false+":");
                Interfaz_c3d.notificar(display.peek().et_salida+":");
                display.pop();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$15 ::= 
            {
              Atributo_C3D RESULT =null;
		int rel1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rel1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Atributo_C3D rel1 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                Interfaz_c3d.notificar(rel1.etq_false+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LOG ::= LOG OR NT$15 LOG 
            {
              Atributo_C3D RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Atributo_C3D) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rel1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rel1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Atributo_C3D rel1 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rel2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rel2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Atributo_C3D rel2 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new Atributo_C3D();
                RESULT.etq_true= rel1.etq_true+","+rel2.etq_true;  
                RESULT.etq_false= rel2.etq_false;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOG",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$16 ::= 
            {
              Atributo_C3D RESULT =null;
		int rel1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rel1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Atributo_C3D rel1 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                Interfaz_c3d.notificar(rel1.etq_true+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LOG ::= LOG AND NT$16 LOG 
            {
              Atributo_C3D RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Atributo_C3D) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rel1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rel1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Atributo_C3D rel1 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rel2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rel2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Atributo_C3D rel2 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new Atributo_C3D();
                RESULT.etq_true= rel2.etq_true;  
                RESULT.etq_false= rel1.etq_false+","+rel2.etq_false;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOG",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$17 ::= 
            {
              Atributo_C3D RESULT =null;
		int rel1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rel1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Atributo_C3D rel1 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                Interfaz_c3d.notificar(rel1.etq_false+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LOG ::= LOG XOR NT$17 LOG 
            {
              Atributo_C3D RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Atributo_C3D) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rel1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rel1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Atributo_C3D rel1 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rel2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rel2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Atributo_C3D rel2 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Interfaz_c3d.notificar(rel1.etq_true+":");
                Interfaz_c3d.notificar(rel2.aux);
                RESULT= new Atributo_C3D();
                RESULT.etq_true =rel2.etq_true;
                RESULT.etq_false=rel2.etq_false;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOG",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$18 ::= 
            {
              Atributo_C3D RESULT =null;
		int rel1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rel1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Atributo_C3D rel1 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                Interfaz_c3d.notificar(rel1.etq_true+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LOG ::= LOG NAND NT$18 LOG 
            {
              Atributo_C3D RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Atributo_C3D) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rel1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rel1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Atributo_C3D rel1 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rel2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rel2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Atributo_C3D rel2 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new Atributo_C3D();
                RESULT.etq_true= rel1.etq_false+","+rel2.etq_false;  
                RESULT.etq_false= rel2.etq_true;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOG",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LOG ::= NOT LOG 
            {
              Atributo_C3D RESULT =null;
		int relleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int relright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Atributo_C3D rel = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT= new Atributo_C3D();
                RESULT.etq_true = rel.etq_false;
                RESULT.etq_false = rel.etq_true;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOG",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LOG ::= REL 
            {
              Atributo_C3D RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Atributo_C3D val = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=val;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOG",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // REL ::= EXP OP_REL EXP 
            {
              Atributo_C3D RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT= new Atributo_C3D();
                RESULT.etq_true= Generador_tmp.genera_etq();
                RESULT.etq_false= Generador_tmp.genera_etq();
                //imprimimos la condicion de la expresion relacional con su saltos
                Interfaz_c3d.notificar("if "+t1+op+t2+" then goto "+RESULT.etq_true+"\ngoto "+RESULT.etq_false);
                // creamos la cadena temporal solo se usa en XOR
                RESULT.aux= "if "+t1+op+t2+" then goto "+RESULT.etq_false+"\ngoto "+RESULT.etq_true; 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("REL",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // REL ::= EXP 
            {
              Atributo_C3D RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT= new Atributo_C3D();
                RESULT.aux= val;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("REL",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OP_REL ::= ABOVE 
            {
              String RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=sim;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OP_REL ::= BELOW 
            {
              String RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=sim;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OP_REL ::= ABOVEE 
            {
              String RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=sim;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OP_REL ::= BELOWE 
            {
              String RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=sim;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OP_REL ::= EQUAL 
            {
              String RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=sim;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OP_REL ::= NEQUAL 
            {
              String RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=sim;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP ::= EXP MAS EXP 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=Generador_tmp.genera_tmp(); //sintetizo el temporal 
                Interfaz_c3d.notificar(RESULT+"="+val+sim+val2); //imprimo la cadena la operacion
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP ::= EXP MENOS EXP 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=Generador_tmp.genera_tmp();
                Interfaz_c3d.notificar(RESULT+"="+val+sim+val2);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP ::= EXP POR EXP 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=Generador_tmp.genera_tmp();
                Interfaz_c3d.notificar(RESULT+"="+val+sim+val2);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP ::= EXP DIV EXP 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=Generador_tmp.genera_tmp();
                Interfaz_c3d.notificar(RESULT+"="+val+sim+val2);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP ::= EXP POT EXP 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=Generador_tmp.genera_tmp();
                Interfaz_c3d.notificar(RESULT+"="+val+sim+val2);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP ::= ID 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=val;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXP ::= ENTERO 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=val;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXP ::= DECIMAL 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                RESULT=val;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXP ::= MENOS EXP 
            {
              String RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=Generador_tmp.genera_tmp();
                Interfaz_c3d.notificar(RESULT+"="+sim+val);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP ::= PAR_A LOG PAR_C 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Atributo_C3D val = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = val.aux;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ASIGNA ::= ID ASIG EXP PYCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Interfaz_c3d.notificar(id+"="+exp);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNA",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECLARA ::= TIPO L PYCOMA 
            {
              Object RESULT =null;
		
                Interfaz_c3d.notificar("Reserva espacio y almacena el id de las variables.");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARA",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DECLARA ::= TIPO L ASIG EXP PYCOMA 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Interfaz_c3d.notificar("Asigna "+exp+" a cada varibale declarada.");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARA",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TIPO ::= INT1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // TIPO ::= CHAR1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // TIPO ::= ALFABETO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // TIPO ::= BOOLEANO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // TIPO ::= CONJUNTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // TIPO ::= ESTADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TIPO ::= EINICIAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TIPO ::= EFINAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // L ::= L COMA ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // L ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
