/* The following code was generated by JFlex 1.4.3 on 11/24/19 10:58 a.m. */

package fuentes;

import java_cup.runtime.Symbol;
import Interfaz.Interfaz_c3d;

//Scanner para generar C3D


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/24/19 10:58 a.m. from the specification file
 * <tt>src/fuentes/lexico.jflex</tt>
 */
public class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 66, 67,  0, 66, 66,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    66, 17,  0,  0,  0,  0, 18,  0,  1,  2, 12,  9,  5, 10, 41, 13, 
    40, 40, 40, 40, 40, 40, 40, 40, 40, 40,  7,  6, 15,  8, 16,  0, 
     0, 25, 28, 24, 33, 19, 27, 37, 39, 36, 31, 65, 26, 30, 20, 23, 
    35, 65, 22, 32, 21, 29, 38, 65, 34, 65, 65,  0,  0,  0, 14, 64, 
     0, 49, 52, 48, 57, 43, 51, 61, 63, 60, 55, 42, 50, 54, 44, 47, 
    59, 42, 46, 56, 45, 53, 62, 42, 58, 42, 42,  3, 11,  4,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\1\22\23\1\24\22\23\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\3\0\1\41\17\0\1\42\7\0"+
    "\1\43\1\41\22\43\1\42\6\43\10\0\1\44\6\0"+
    "\1\45\15\0\1\46\10\43\1\44\6\43\1\45\15\43"+
    "\13\0\1\47\10\0\1\50\2\0\1\51\6\0\13\43"+
    "\1\47\10\43\1\50\2\43\1\51\6\43\2\0\1\52"+
    "\1\53\1\0\1\54\2\0\1\55\20\0\1\56\1\57"+
    "\1\60\2\43\1\52\1\53\1\43\1\54\2\43\1\55"+
    "\20\43\1\56\1\57\1\60\1\61\2\0\1\62\20\0"+
    "\1\63\2\0\1\61\2\43\1\62\20\43\1\63\2\43"+
    "\1\64\3\0\1\65\7\0\1\66\1\0\1\67\2\0"+
    "\1\70\1\71\1\72\1\73\1\64\3\43\1\65\7\43"+
    "\1\66\1\43\1\67\2\43\1\70\1\71\1\72\1\73"+
    "\6\0\1\74\1\75\1\76\1\77\1\100\1\101\1\0"+
    "\1\102\1\0\6\43\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\1\43\1\102\1\43\2\0\1\103\2\0\1\104"+
    "\2\0\2\43\1\103\2\43\1\104\2\43\2\0\1\105"+
    "\3\0\2\43\1\105\3\43\4\0\1\106\4\43\1\106"+
    "\3\0\1\107\3\43\1\107\1\0\1\110\1\0\1\43"+
    "\1\110\1\43\1\111\1\112\1\111\1\112";

  private static int [] zzUnpackAction() {
    int [] result = new int[472];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\104\0\104\0\104\0\104\0\104\0\104"+
    "\0\104\0\210\0\314\0\u0110\0\u0154\0\104\0\104\0\104"+
    "\0\u0198\0\u01dc\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374"+
    "\0\u03b8\0\u03fc\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594"+
    "\0\u05d8\0\u061c\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770\0\u07b4"+
    "\0\u07f8\0\u083c\0\u0880\0\u08c4\0\u0908\0\u094c\0\u0990\0\u09d4"+
    "\0\u0a18\0\u0a5c\0\u0aa0\0\u0ae4\0\u0b28\0\u0b6c\0\u0bb0\0\u0bf4"+
    "\0\u0c38\0\104\0\104\0\104\0\104\0\104\0\104\0\104"+
    "\0\104\0\104\0\104\0\104\0\104\0\u0c7c\0\u0cc0\0\u0d04"+
    "\0\u0484\0\u0d48\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c\0\u0ee0"+
    "\0\u0f24\0\u0f68\0\u0fac\0\u0ff0\0\u1034\0\u1078\0\u10bc\0\u1100"+
    "\0\u1144\0\u1188\0\u11cc\0\u1210\0\u1254\0\u1298\0\u12dc\0\u1320"+
    "\0\u1364\0\u07b4\0\u13a8\0\u13ec\0\u1430\0\u1474\0\u14b8\0\u14fc"+
    "\0\u1540\0\u1584\0\u15c8\0\u160c\0\u1650\0\u1694\0\u16d8\0\u171c"+
    "\0\u1760\0\u17a4\0\u17e8\0\u182c\0\u1870\0\u18b4\0\u18f8\0\u193c"+
    "\0\u1980\0\u19c4\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c"+
    "\0\u1ba0\0\u1be4\0\u1c28\0\u1c6c\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c"+
    "\0\u1dc0\0\u1e04\0\104\0\u1e48\0\u1e8c\0\u1ed0\0\u1f14\0\u1f58"+
    "\0\u1f9c\0\u1fe0\0\u2024\0\u2068\0\u20ac\0\u20f0\0\u2134\0\u2178"+
    "\0\u1320\0\u21bc\0\u2200\0\u2244\0\u2288\0\u22cc\0\u2310\0\u2354"+
    "\0\u2398\0\u23dc\0\u2420\0\u2464\0\u24a8\0\u24ec\0\u2530\0\u2574"+
    "\0\u1364\0\u25b8\0\u25fc\0\u2640\0\u2684\0\u26c8\0\u270c\0\u2750"+
    "\0\u2794\0\u27d8\0\u281c\0\u2860\0\u28a4\0\u28e8\0\u292c\0\u2970"+
    "\0\u29b4\0\u29f8\0\u2a3c\0\u2a80\0\u2ac4\0\u2b08\0\u2b4c\0\u2b90"+
    "\0\u2bd4\0\104\0\u2c18\0\u2c5c\0\u2ca0\0\u2ce4\0\u2d28\0\u2d6c"+
    "\0\u2db0\0\u2df4\0\104\0\u2e38\0\u2e7c\0\104\0\u2ec0\0\u2f04"+
    "\0\u2f48\0\u2f8c\0\u2fd0\0\u3014\0\u3058\0\u309c\0\u30e0\0\u3124"+
    "\0\u3168\0\u31ac\0\u31f0\0\u3234\0\u3278\0\u32bc\0\u3300\0\u1364"+
    "\0\u3344\0\u3388\0\u33cc\0\u3410\0\u3454\0\u3498\0\u34dc\0\u3520"+
    "\0\u1364\0\u3564\0\u35a8\0\u1364\0\u35ec\0\u3630\0\u3674\0\u36b8"+
    "\0\u36fc\0\u3740\0\u3784\0\u37c8\0\104\0\104\0\u380c\0\104"+
    "\0\u3850\0\u3894\0\u38d8\0\u391c\0\u3960\0\u39a4\0\u39e8\0\u3a2c"+
    "\0\u3a70\0\u3ab4\0\u3af8\0\u3b3c\0\u3b80\0\u3bc4\0\u3c08\0\u3c4c"+
    "\0\u3c90\0\u3cd4\0\u3d18\0\104\0\104\0\104\0\u3d5c\0\u3da0"+
    "\0\u1364\0\u1364\0\u3de4\0\u1364\0\u3e28\0\u3e6c\0\u3eb0\0\u3ef4"+
    "\0\u3f38\0\u3f7c\0\u3fc0\0\u4004\0\u4048\0\u408c\0\u40d0\0\u4114"+
    "\0\u4158\0\u419c\0\u41e0\0\u4224\0\u4268\0\u42ac\0\u42f0\0\u1364"+
    "\0\u1364\0\u1364\0\104\0\u4334\0\u4378\0\104\0\u43bc\0\u4400"+
    "\0\u4444\0\u4488\0\u44cc\0\u4510\0\u4554\0\u4598\0\u45dc\0\u4620"+
    "\0\u4664\0\u46a8\0\u46ec\0\u4730\0\u4774\0\u47b8\0\104\0\u47fc"+
    "\0\u4840\0\u1364\0\u4884\0\u48c8\0\u1364\0\u490c\0\u4950\0\u4994"+
    "\0\u49d8\0\u4a1c\0\u4a60\0\u4aa4\0\u4ae8\0\u4b2c\0\u4b70\0\u4bb4"+
    "\0\u4bf8\0\u4c3c\0\u4c80\0\u4cc4\0\u4d08\0\u1364\0\u4d4c\0\u4d90"+
    "\0\u4dd4\0\u4e18\0\u4e5c\0\u4ea0\0\104\0\u4ee4\0\u4f28\0\u4f6c"+
    "\0\u4fb0\0\u4ff4\0\u5038\0\u507c\0\104\0\u50c0\0\u5104\0\u5148"+
    "\0\u518c\0\104\0\104\0\104\0\104\0\u51d0\0\u5214\0\u5258"+
    "\0\u529c\0\u1364\0\u52e0\0\u5324\0\u5368\0\u53ac\0\u53f0\0\u5434"+
    "\0\u5478\0\u1364\0\u54bc\0\u5500\0\u5544\0\u5588\0\u1364\0\u1364"+
    "\0\u1364\0\u1364\0\u55cc\0\u5610\0\u5654\0\u5698\0\u56dc\0\u5720"+
    "\0\104\0\104\0\104\0\104\0\104\0\104\0\u5764\0\104"+
    "\0\u57a8\0\u57ec\0\u5830\0\u5874\0\u58b8\0\u58fc\0\u5940\0\u1364"+
    "\0\u1364\0\u1364\0\u1364\0\u1364\0\u1364\0\u5984\0\u1364\0\u59c8"+
    "\0\u5a0c\0\u5a50\0\104\0\u5a94\0\u5ad8\0\104\0\u5b1c\0\u5b60"+
    "\0\u5ba4\0\u5be8\0\u1364\0\u5c2c\0\u5c70\0\u1364\0\u5cb4\0\u5cf8"+
    "\0\u5d3c\0\u5d80\0\104\0\u5dc4\0\u5e08\0\u5e4c\0\u5e90\0\u5ed4"+
    "\0\u1364\0\u5f18\0\u5f5c\0\u5fa0\0\u5fe4\0\u6028\0\u606c\0\u60b0"+
    "\0\104\0\u60f4\0\u6138\0\u617c\0\u61c0\0\u1364\0\u6204\0\u6248"+
    "\0\u628c\0\104\0\u62d0\0\u6314\0\u6358\0\u1364\0\u639c\0\104"+
    "\0\u63e0\0\u6424\0\u1364\0\u6468\0\104\0\104\0\u1364\0\u1364";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[472];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\34\1\37\1\34"+
    "\1\40\1\41\1\34\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\2\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\50\1\60\1\61\1\50\1\62\1\50"+
    "\1\63\1\64\1\50\1\65\1\66\1\67\1\70\1\71"+
    "\1\2\1\34\1\72\1\73\114\0\1\74\104\0\1\75"+
    "\104\0\1\76\104\0\1\77\100\0\1\100\103\0\1\101"+
    "\103\0\1\102\10\0\1\103\1\104\103\0\1\105\105\0"+
    "\1\106\13\0\1\107\1\0\1\110\5\0\1\111\3\0"+
    "\1\106\13\0\1\107\1\0\1\110\46\0\1\112\12\0"+
    "\1\111\14\0\1\112\44\0\1\113\21\0\1\111\5\0"+
    "\1\113\50\0\1\114\24\0\1\111\2\0\1\114\56\0"+
    "\1\115\21\0\1\111\5\0\1\115\54\0\1\116\1\0"+
    "\1\117\16\0\1\111\6\0\1\116\1\0\1\117\54\0"+
    "\1\120\2\0\1\121\12\0\1\111\11\0\1\120\2\0"+
    "\1\121\66\0\1\111\65\0\1\122\2\0\1\123\6\0"+
    "\1\124\3\0\1\111\11\0\1\122\2\0\1\123\6\0"+
    "\1\124\36\0\1\125\20\0\1\111\6\0\1\125\53\0"+
    "\1\126\14\0\1\127\3\0\1\111\6\0\1\126\14\0"+
    "\1\127\32\0\1\130\20\0\1\131\3\0\1\111\2\0"+
    "\1\130\20\0\1\131\32\0\1\132\24\0\1\111\2\0"+
    "\1\132\61\0\1\133\16\0\1\111\10\0\1\133\46\0"+
    "\1\134\23\0\1\111\3\0\1\134\55\0\1\135\21\0"+
    "\1\111\5\0\1\135\56\0\1\136\16\0\1\111\10\0"+
    "\1\136\53\0\1\137\16\0\1\111\10\0\1\137\72\0"+
    "\1\47\1\140\55\0\25\141\1\142\1\0\30\141\25\0"+
    "\1\141\1\143\13\141\1\144\1\141\1\145\5\141\1\142"+
    "\1\0\2\141\1\143\13\141\1\144\1\141\1\145\7\141"+
    "\25\0\12\141\1\146\12\141\1\142\1\0\13\141\1\146"+
    "\14\141\25\0\3\141\1\147\21\141\1\142\1\0\4\141"+
    "\1\147\23\141\25\0\1\150\24\141\1\142\1\0\1\141"+
    "\1\150\26\141\25\0\3\141\1\151\21\141\1\142\1\0"+
    "\4\141\1\151\23\141\25\0\4\141\1\152\1\141\1\153"+
    "\16\141\1\142\1\0\5\141\1\152\1\141\1\153\20\141"+
    "\25\0\7\141\1\154\2\141\1\155\12\141\1\142\1\0"+
    "\10\141\1\154\2\141\1\155\14\141\25\0\7\141\1\156"+
    "\2\141\1\157\6\141\1\160\3\141\1\142\1\0\10\141"+
    "\1\156\2\141\1\157\6\141\1\160\5\141\25\0\4\141"+
    "\1\161\20\141\1\142\1\0\5\141\1\161\22\141\25\0"+
    "\4\141\1\162\14\141\1\163\3\141\1\142\1\0\5\141"+
    "\1\162\14\141\1\163\5\141\25\0\1\164\20\141\1\165"+
    "\3\141\1\142\1\0\1\141\1\164\20\141\1\165\5\141"+
    "\25\0\1\166\24\141\1\142\1\0\1\141\1\166\26\141"+
    "\25\0\6\141\1\167\16\141\1\142\1\0\7\141\1\167"+
    "\20\141\25\0\1\141\1\170\23\141\1\142\1\0\2\141"+
    "\1\170\25\141\25\0\3\141\1\171\21\141\1\142\1\0"+
    "\4\141\1\171\23\141\25\0\6\141\1\172\16\141\1\142"+
    "\1\0\7\141\1\172\20\141\25\0\6\141\1\173\16\141"+
    "\1\142\1\0\7\141\1\173\20\141\27\0\1\174\27\0"+
    "\1\174\53\0\1\175\3\0\1\176\23\0\1\175\3\0"+
    "\1\176\65\0\1\177\27\0\1\177\33\0\1\200\27\0"+
    "\1\200\61\0\1\201\27\0\1\201\65\0\1\202\27\0"+
    "\1\202\51\0\1\203\27\0\1\203\36\0\1\204\27\0"+
    "\1\204\55\0\1\205\11\0\1\206\15\0\1\205\11\0"+
    "\1\206\46\0\1\207\27\0\1\207\45\0\1\210\27\0"+
    "\1\210\55\0\1\211\27\0\1\211\50\0\1\212\27\0"+
    "\1\212\53\0\1\213\27\0\1\213\56\0\1\214\27\0"+
    "\1\214\64\0\1\215\27\0\1\215\36\0\1\216\27\0"+
    "\1\216\62\0\1\217\27\0\1\217\45\0\1\220\27\0"+
    "\1\220\54\0\1\221\5\0\1\222\21\0\1\221\5\0"+
    "\1\222\46\0\1\223\27\0\1\223\71\0\1\224\27\0"+
    "\1\224\40\0\1\225\27\0\1\225\54\0\1\226\27\0"+
    "\1\226\51\0\1\227\7\0\1\230\17\0\1\227\7\0"+
    "\1\230\63\0\1\231\56\0\26\141\1\0\30\141\25\0"+
    "\2\141\1\232\23\141\1\0\3\141\1\232\24\141\25\0"+
    "\2\141\1\233\3\141\1\234\17\141\1\0\3\141\1\233"+
    "\3\141\1\234\20\141\25\0\20\141\1\235\5\141\1\0"+
    "\21\141\1\235\6\141\25\0\1\236\25\141\1\0\1\141"+
    "\1\236\26\141\25\0\6\141\1\237\17\141\1\0\7\141"+
    "\1\237\20\141\25\0\20\141\1\240\5\141\1\0\21\141"+
    "\1\240\6\141\25\0\16\141\1\241\7\141\1\0\17\141"+
    "\1\241\10\141\25\0\1\141\1\242\24\141\1\0\2\141"+
    "\1\242\25\141\25\0\3\141\1\243\11\141\1\244\10\141"+
    "\1\0\4\141\1\243\11\141\1\244\11\141\25\0\10\141"+
    "\1\245\15\141\1\0\11\141\1\245\16\141\25\0\2\141"+
    "\1\246\23\141\1\0\3\141\1\246\24\141\25\0\4\141"+
    "\1\247\21\141\1\0\5\141\1\247\22\141\25\0\1\141"+
    "\1\250\24\141\1\0\2\141\1\250\25\141\25\0\1\141"+
    "\1\251\24\141\1\0\2\141\1\251\25\141\25\0\4\141"+
    "\1\252\21\141\1\0\5\141\1\252\22\141\25\0\15\141"+
    "\1\253\10\141\1\0\16\141\1\253\11\141\25\0\1\254"+
    "\25\141\1\0\1\141\1\254\26\141\25\0\7\141\1\255"+
    "\16\141\1\0\10\141\1\255\17\141\25\0\1\141\1\256"+
    "\24\141\1\0\2\141\1\256\25\141\25\0\2\141\1\257"+
    "\5\141\1\260\15\141\1\0\3\141\1\257\5\141\1\260"+
    "\16\141\25\0\3\141\1\261\22\141\1\0\4\141\1\261"+
    "\23\141\25\0\21\141\1\262\4\141\1\0\22\141\1\262"+
    "\5\141\25\0\6\141\1\263\17\141\1\0\7\141\1\263"+
    "\20\141\25\0\7\141\1\264\16\141\1\0\10\141\1\264"+
    "\17\141\25\0\5\141\1\265\7\141\1\266\10\141\1\0"+
    "\6\141\1\265\7\141\1\266\11\141\25\0\1\267\27\0"+
    "\1\267\61\0\1\270\27\0\1\270\55\0\1\271\27\0"+
    "\1\271\46\0\1\272\27\0\1\272\73\0\1\273\27\0"+
    "\1\273\31\0\1\274\27\0\1\274\52\0\1\275\27\0"+
    "\1\275\53\0\1\276\27\0\1\276\55\0\1\277\11\0"+
    "\1\300\15\0\1\277\11\0\1\300\45\0\1\301\27\0"+
    "\1\301\51\0\1\302\27\0\1\302\55\0\1\303\27\0"+
    "\1\303\51\0\1\304\27\0\1\304\51\0\1\305\27\0"+
    "\1\305\56\0\1\306\27\0\1\306\55\0\1\307\27\0"+
    "\1\307\46\0\1\310\27\0\1\310\52\0\1\311\27\0"+
    "\1\311\52\0\1\312\27\0\1\312\57\0\1\313\27\0"+
    "\1\313\47\0\1\314\27\0\1\314\53\0\1\315\27\0"+
    "\1\315\61\0\1\316\27\0\1\316\52\0\1\317\27\0"+
    "\1\317\56\0\1\320\27\0\1\320\64\0\1\321\27\0"+
    "\1\321\32\0\1\322\20\0\1\323\6\0\1\322\20\0"+
    "\1\323\34\0\1\324\27\0\1\324\51\0\1\325\25\141"+
    "\1\0\1\141\1\325\26\141\25\0\6\141\1\326\17\141"+
    "\1\0\7\141\1\326\20\141\25\0\10\141\1\327\15\141"+
    "\1\0\11\141\1\327\16\141\25\0\3\141\1\330\22\141"+
    "\1\0\4\141\1\330\23\141\25\0\23\141\1\331\2\141"+
    "\1\0\24\141\1\331\3\141\25\0\1\141\1\332\24\141"+
    "\1\0\2\141\1\332\25\141\25\0\1\333\25\141\1\0"+
    "\1\141\1\333\26\141\25\0\1\334\25\141\1\0\1\141"+
    "\1\334\26\141\25\0\2\141\1\335\11\141\1\336\11\141"+
    "\1\0\3\141\1\335\11\141\1\336\12\141\25\0\6\141"+
    "\1\337\17\141\1\0\7\141\1\337\20\141\25\0\4\141"+
    "\1\340\21\141\1\0\5\141\1\340\22\141\25\0\6\141"+
    "\1\341\17\141\1\0\7\141\1\341\20\141\25\0\4\141"+
    "\1\342\21\141\1\0\5\141\1\342\22\141\25\0\2\141"+
    "\1\343\23\141\1\0\3\141\1\343\24\141\25\0\5\141"+
    "\1\344\20\141\1\0\6\141\1\344\21\141\25\0\7\141"+
    "\1\345\16\141\1\0\10\141\1\345\17\141\25\0\2\141"+
    "\1\346\23\141\1\0\3\141\1\346\24\141\25\0\1\141"+
    "\1\347\24\141\1\0\2\141\1\347\25\141\25\0\1\350"+
    "\25\141\1\0\1\141\1\350\26\141\25\0\4\141\1\351"+
    "\21\141\1\0\5\141\1\351\22\141\25\0\1\352\25\141"+
    "\1\0\1\141\1\352\26\141\25\0\1\353\25\141\1\0"+
    "\1\141\1\353\26\141\25\0\6\141\1\354\17\141\1\0"+
    "\7\141\1\354\20\141\25\0\5\141\1\355\20\141\1\0"+
    "\6\141\1\355\21\141\25\0\10\141\1\356\15\141\1\0"+
    "\11\141\1\356\16\141\25\0\21\141\1\357\4\141\1\0"+
    "\22\141\1\357\5\141\25\0\1\360\20\141\1\361\4\141"+
    "\1\0\1\141\1\360\20\141\1\361\5\141\25\0\2\141"+
    "\1\362\23\141\1\0\3\141\1\362\24\141\30\0\1\363"+
    "\27\0\1\363\66\0\1\364\27\0\1\364\36\0\1\365"+
    "\14\0\1\366\12\0\1\365\14\0\1\366\35\0\1\367"+
    "\27\0\1\367\57\0\1\370\27\0\1\370\64\0\1\371"+
    "\27\0\1\371\40\0\1\372\27\0\1\372\52\0\1\373"+
    "\27\0\1\373\73\0\1\374\27\0\1\374\44\0\1\375"+
    "\27\0\1\375\46\0\1\376\27\0\1\376\57\0\1\377"+
    "\27\0\1\377\55\0\1\u0100\27\0\1\u0100\46\0\1\u0101"+
    "\27\0\1\u0101\66\0\1\u0102\27\0\1\u0102\32\0\1\u0103"+
    "\27\0\1\u0103\56\0\1\u0104\27\0\1\u0104\52\0\1\u0105"+
    "\27\0\1\u0105\56\0\1\u0106\27\0\1\u0106\47\0\1\u0107"+
    "\27\0\1\u0107\57\0\1\u0108\27\0\1\u0108\67\0\1\u0109"+
    "\27\0\1\u0109\53\0\1\u010a\27\0\1\u010a\50\0\1\u010b"+
    "\27\0\1\u010b\40\0\1\u010c\27\0\1\u010c\56\0\1\u010d"+
    "\27\0\1\u010d\53\0\1\u010e\27\0\1\u010e\45\0\3\141"+
    "\1\u010f\22\141\1\0\4\141\1\u010f\23\141\25\0\16\141"+
    "\1\u0110\7\141\1\0\17\141\1\u0110\10\141\25\0\1\141"+
    "\1\u0111\14\141\1\u0112\7\141\1\0\2\141\1\u0111\14\141"+
    "\1\u0112\10\141\25\0\1\u0113\25\141\1\0\1\141\1\u0113"+
    "\26\141\25\0\4\141\1\u0114\21\141\1\0\5\141\1\u0114"+
    "\22\141\25\0\15\141\1\u0115\10\141\1\0\16\141\1\u0115"+
    "\11\141\25\0\2\141\1\u0116\23\141\1\0\3\141\1\u0116"+
    "\24\141\25\0\1\141\1\u0117\24\141\1\0\2\141\1\u0117"+
    "\25\141\25\0\21\141\1\u0118\4\141\1\0\22\141\1\u0118"+
    "\5\141\25\0\12\141\1\u0119\13\141\1\0\13\141\1\u0119"+
    "\14\141\25\0\5\141\1\u011a\20\141\1\0\6\141\1\u011a"+
    "\21\141\25\0\11\141\1\u011b\14\141\1\0\12\141\1\u011b"+
    "\15\141\25\0\13\141\1\u011c\12\141\1\0\14\141\1\u011c"+
    "\13\141\25\0\6\141\1\u011d\17\141\1\0\7\141\1\u011d"+
    "\20\141\25\0\21\141\1\u011e\4\141\1\0\22\141\1\u011e"+
    "\5\141\25\0\1\u011f\25\141\1\0\1\141\1\u011f\26\141"+
    "\25\0\3\141\1\u0120\22\141\1\0\4\141\1\u0120\23\141"+
    "\25\0\2\141\1\u0121\23\141\1\0\3\141\1\u0121\24\141"+
    "\25\0\5\141\1\u0122\20\141\1\0\6\141\1\u0122\21\141"+
    "\25\0\1\141\1\u0123\24\141\1\0\2\141\1\u0123\25\141"+
    "\25\0\5\141\1\u0124\20\141\1\0\6\141\1\u0124\21\141"+
    "\25\0\21\141\1\u0125\4\141\1\0\22\141\1\u0125\5\141"+
    "\25\0\21\141\1\u0126\4\141\1\0\22\141\1\u0126\5\141"+
    "\25\0\16\141\1\u0127\7\141\1\0\17\141\1\u0127\10\141"+
    "\25\0\3\141\1\u0128\22\141\1\0\4\141\1\u0128\23\141"+
    "\25\0\6\141\1\u0129\17\141\1\0\7\141\1\u0129\20\141"+
    "\25\0\6\141\1\u012a\17\141\1\0\7\141\1\u012a\20\141"+
    "\31\0\1\u012b\27\0\1\u012b\53\0\1\u012c\27\0\1\u012c"+
    "\64\0\1\u012d\4\0\1\u012e\22\0\1\u012d\4\0\1\u012e"+
    "\52\0\1\u012f\27\0\1\u012f\53\0\1\u0130\27\0\1\u0130"+
    "\52\0\1\u0131\27\0\1\u0131\34\0\1\u0132\27\0\1\u0132"+
    "\53\0\1\u0133\27\0\1\u0133\54\0\1\u0134\27\0\1\u0134"+
    "\51\0\1\u0135\27\0\1\u0135\61\0\1\u0136\27\0\1\u0136"+
    "\46\0\1\u0137\27\0\1\u0137\56\0\1\u0138\27\0\1\u0138"+
    "\55\0\1\u0139\27\0\1\u0139\53\0\1\u013a\27\0\1\u013a"+
    "\50\0\1\u013b\27\0\1\u013b\55\0\1\u013c\27\0\1\u013c"+
    "\46\0\1\u013d\27\0\1\u013d\55\0\1\u013e\27\0\1\u013e"+
    "\55\0\1\u013f\27\0\1\u013f\54\0\1\u0140\27\0\1\u0140"+
    "\54\0\1\u0141\27\0\1\u0141\45\0\4\141\1\u0142\21\141"+
    "\1\0\5\141\1\u0142\22\141\25\0\4\141\1\u0143\21\141"+
    "\1\0\5\141\1\u0143\22\141\25\0\15\141\1\u0144\4\141"+
    "\1\u0145\3\141\1\0\16\141\1\u0144\4\141\1\u0145\4\141"+
    "\25\0\21\141\1\u0146\4\141\1\0\22\141\1\u0146\5\141"+
    "\25\0\21\141\1\u0147\4\141\1\0\22\141\1\u0147\5\141"+
    "\25\0\20\141\1\u0148\5\141\1\0\21\141\1\u0148\6\141"+
    "\25\0\1\141\1\u0149\24\141\1\0\2\141\1\u0149\25\141"+
    "\25\0\1\141\1\u014a\24\141\1\0\2\141\1\u014a\25\141"+
    "\25\0\2\141\1\u014b\23\141\1\0\3\141\1\u014b\24\141"+
    "\25\0\1\u014c\25\141\1\0\1\141\1\u014c\26\141\25\0"+
    "\6\141\1\u014d\17\141\1\0\7\141\1\u014d\20\141\25\0"+
    "\1\141\1\u014e\24\141\1\0\2\141\1\u014e\25\141\25\0"+
    "\4\141\1\u014f\21\141\1\0\5\141\1\u014f\22\141\25\0"+
    "\6\141\1\u0150\17\141\1\0\7\141\1\u0150\20\141\25\0"+
    "\6\141\1\u0151\17\141\1\0\7\141\1\u0151\20\141\25\0"+
    "\3\141\1\u0152\22\141\1\0\4\141\1\u0152\23\141\25\0"+
    "\5\141\1\u0153\20\141\1\0\6\141\1\u0153\21\141\25\0"+
    "\1\u0154\25\141\1\0\1\141\1\u0154\26\141\25\0\2\141"+
    "\1\u0155\23\141\1\0\3\141\1\u0155\24\141\25\0\4\141"+
    "\1\u0156\21\141\1\0\5\141\1\u0156\22\141\25\0\5\141"+
    "\1\u0157\20\141\1\0\6\141\1\u0157\21\141\25\0\6\141"+
    "\1\u0158\17\141\1\0\7\141\1\u0158\20\141\42\0\1\u0159"+
    "\3\0\1\u015a\23\0\1\u0159\3\0\1\u015a\53\0\1\u015b"+
    "\27\0\1\u015b\37\0\1\u015c\27\0\1\u015c\51\0\1\u015d"+
    "\27\0\1\u015d\53\0\1\u015e\27\0\1\u015e\62\0\1\u015f"+
    "\27\0\1\u015f\43\0\1\u0160\27\0\1\u0160\51\0\1\u0161"+
    "\27\0\1\u0161\55\0\1\u0162\27\0\1\u0162\53\0\1\u0163"+
    "\27\0\1\u0163\53\0\1\u0164\27\0\1\u0164\52\0\1\u0165"+
    "\27\0\1\u0165\53\0\1\u0166\27\0\1\u0166\55\0\1\u0167"+
    "\27\0\1\u0167\56\0\1\u0168\27\0\1\u0168\66\0\1\u0169"+
    "\27\0\1\u0169\35\0\1\u016a\27\0\1\u016a\54\0\1\u016b"+
    "\27\0\1\u016b\53\0\1\u016c\27\0\1\u016c\52\0\1\u016d"+
    "\27\0\1\u016d\50\0\15\141\1\u016e\3\141\1\u016f\4\141"+
    "\1\0\16\141\1\u016e\3\141\1\u016f\5\141\25\0\21\141"+
    "\1\u0170\4\141\1\0\22\141\1\u0170\5\141\25\0\5\141"+
    "\1\u0171\20\141\1\0\6\141\1\u0171\21\141\25\0\3\141"+
    "\1\u0172\22\141\1\0\4\141\1\u0172\23\141\25\0\3\141"+
    "\1\u0173\22\141\1\0\4\141\1\u0173\23\141\25\0\12\141"+
    "\1\u0174\13\141\1\0\13\141\1\u0174\14\141\25\0\2\141"+
    "\1\u0175\23\141\1\0\3\141\1\u0175\24\141\25\0\1\u0176"+
    "\25\141\1\0\1\141\1\u0176\26\141\25\0\2\141\1\u0177"+
    "\23\141\1\0\3\141\1\u0177\24\141\25\0\2\141\1\u0178"+
    "\23\141\1\0\3\141\1\u0178\24\141\25\0\2\141\1\u0179"+
    "\23\141\1\0\3\141\1\u0179\24\141\25\0\1\141\1\u017a"+
    "\24\141\1\0\2\141\1\u017a\25\141\25\0\1\141\1\u017b"+
    "\24\141\1\0\2\141\1\u017b\25\141\25\0\3\141\1\u017c"+
    "\22\141\1\0\4\141\1\u017c\23\141\25\0\6\141\1\u017d"+
    "\17\141\1\0\7\141\1\u017d\20\141\25\0\21\141\1\u017e"+
    "\4\141\1\0\22\141\1\u017e\5\141\25\0\3\141\1\u017f"+
    "\22\141\1\0\4\141\1\u017f\23\141\25\0\4\141\1\u0180"+
    "\21\141\1\0\5\141\1\u0180\22\141\25\0\4\141\1\u0181"+
    "\21\141\1\0\5\141\1\u0181\22\141\25\0\3\141\1\u0182"+
    "\22\141\1\0\4\141\1\u0182\23\141\35\0\1\u0183\27\0"+
    "\1\u0183\44\0\1\u0184\27\0\1\u0184\56\0\1\u0185\27\0"+
    "\1\u0185\70\0\1\u0186\27\0\1\u0186\53\0\1\u0187\27\0"+
    "\1\u0187\40\0\1\u0188\27\0\1\u0188\51\0\1\u0189\27\0"+
    "\1\u0189\52\0\1\u018a\27\0\1\u018a\54\0\1\u018b\27\0"+
    "\1\u018b\55\0\1\u018c\27\0\1\u018c\45\0\1\u018d\27\0"+
    "\1\u018d\57\0\1\u018e\27\0\1\u018e\51\0\1\u018f\27\0"+
    "\1\u018f\66\0\1\u0190\27\0\1\u0190\42\0\1\u0191\27\0"+
    "\1\u0191\47\0\10\141\1\u0192\15\141\1\0\11\141\1\u0192"+
    "\16\141\25\0\1\141\1\u0193\24\141\1\0\2\141\1\u0193"+
    "\25\141\25\0\4\141\1\u0194\21\141\1\0\5\141\1\u0194"+
    "\22\141\25\0\21\141\1\u0195\4\141\1\0\22\141\1\u0195"+
    "\5\141\25\0\21\141\1\u0196\4\141\1\0\22\141\1\u0196"+
    "\5\141\25\0\6\141\1\u0197\17\141\1\0\7\141\1\u0197"+
    "\20\141\25\0\4\141\1\u0198\21\141\1\0\5\141\1\u0198"+
    "\22\141\25\0\3\141\1\u0199\22\141\1\0\4\141\1\u0199"+
    "\23\141\25\0\4\141\1\u019a\21\141\1\0\5\141\1\u019a"+
    "\22\141\25\0\6\141\1\u019b\17\141\1\0\7\141\1\u019b"+
    "\20\141\25\0\1\u019c\25\141\1\0\1\141\1\u019c\26\141"+
    "\25\0\4\141\1\u019d\21\141\1\0\5\141\1\u019d\22\141"+
    "\25\0\2\141\1\u019e\23\141\1\0\3\141\1\u019e\24\141"+
    "\25\0\15\141\1\u019f\10\141\1\0\16\141\1\u019f\11\141"+
    "\25\0\4\141\1\u01a0\21\141\1\0\5\141\1\u01a0\22\141"+
    "\46\0\1\u01a1\27\0\1\u01a1\53\0\1\u01a2\27\0\1\u01a2"+
    "\33\0\1\u01a3\27\0\1\u01a3\56\0\1\u01a4\27\0\1\u01a4"+
    "\50\0\1\u01a5\27\0\1\u01a5\55\0\1\u01a6\27\0\1\u01a6"+
    "\56\0\1\u01a7\27\0\1\u01a7\46\0\1\u01a8\27\0\1\u01a8"+
    "\52\0\21\141\1\u01a9\4\141\1\0\22\141\1\u01a9\5\141"+
    "\25\0\21\141\1\u01aa\4\141\1\0\22\141\1\u01aa\5\141"+
    "\25\0\1\141\1\u01ab\24\141\1\0\2\141\1\u01ab\25\141"+
    "\25\0\4\141\1\u01ac\21\141\1\0\5\141\1\u01ac\22\141"+
    "\25\0\1\141\1\u01ad\24\141\1\0\2\141\1\u01ad\25\141"+
    "\25\0\3\141\1\u01ae\22\141\1\0\4\141\1\u01ae\23\141"+
    "\25\0\6\141\1\u01af\17\141\1\0\7\141\1\u01af\20\141"+
    "\25\0\1\141\1\u01b0\24\141\1\0\2\141\1\u01b0\25\141"+
    "\26\0\1\u01b1\27\0\1\u01b1\57\0\1\u01b2\27\0\1\u01b2"+
    "\47\0\1\u01b3\27\0\1\u01b3\57\0\1\u01b4\27\0\1\u01b4"+
    "\57\0\1\u01b5\27\0\1\u01b5\50\0\1\u01b6\27\0\1\u01b6"+
    "\45\0\1\141\1\u01b7\24\141\1\0\2\141\1\u01b7\25\141"+
    "\25\0\5\141\1\u01b8\20\141\1\0\6\141\1\u01b8\21\141"+
    "\25\0\1\141\1\u01b9\24\141\1\0\2\141\1\u01b9\25\141"+
    "\25\0\5\141\1\u01ba\20\141\1\0\6\141\1\u01ba\21\141"+
    "\25\0\11\141\1\u01bb\14\141\1\0\12\141\1\u01bb\15\141"+
    "\25\0\6\141\1\u01bc\17\141\1\0\7\141\1\u01bc\20\141"+
    "\33\0\1\u01bd\27\0\1\u01bd\66\0\1\u01be\27\0\1\u01be"+
    "\53\0\1\u01bf\27\0\1\u01bf\41\0\1\u01c0\27\0\1\u01c0"+
    "\47\0\1\u01c1\27\0\1\u01c1\50\0\6\141\1\u01c2\17\141"+
    "\1\0\7\141\1\u01c2\20\141\25\0\21\141\1\u01c3\4\141"+
    "\1\0\22\141\1\u01c3\5\141\25\0\21\141\1\u01c4\4\141"+
    "\1\0\22\141\1\u01c4\5\141\25\0\7\141\1\u01c5\16\141"+
    "\1\0\10\141\1\u01c5\17\141\25\0\3\141\1\u01c6\22\141"+
    "\1\0\4\141\1\u01c6\23\141\34\0\1\u01c7\27\0\1\u01c7"+
    "\52\0\1\u01c8\27\0\1\u01c8\65\0\1\u01c9\27\0\1\u01c9"+
    "\41\0\1\u01ca\27\0\1\u01ca\45\0\7\141\1\u01cb\16\141"+
    "\1\0\10\141\1\u01cb\17\141\25\0\6\141\1\u01cc\17\141"+
    "\1\0\7\141\1\u01cc\20\141\25\0\20\141\1\u01cd\5\141"+
    "\1\0\21\141\1\u01cd\6\141\25\0\6\141\1\u01ce\17\141"+
    "\1\0\7\141\1\u01ce\20\141\25\0\1\u01cf\27\0\1\u01cf"+
    "\62\0\1\u01d0\27\0\1\u01d0\52\0\1\u01d1\27\0\1\u01d1"+
    "\45\0\1\u01d2\25\141\1\0\1\141\1\u01d2\26\141\25\0"+
    "\7\141\1\u01d3\16\141\1\0\10\141\1\u01d3\17\141\25\0"+
    "\6\141\1\u01d4\17\141\1\0\7\141\1\u01d4\20\141\42\0"+
    "\1\u01d5\27\0\1\u01d5\45\0\1\u01d6\27\0\1\u01d6\44\0"+
    "\15\141\1\u01d7\10\141\1\0\16\141\1\u01d7\11\141\25\0"+
    "\7\141\1\u01d8\16\141\1\0\10\141\1\u01d8\17\141\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25772];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\10\11\4\1\3\11\51\1\14\11\3\0\1\1"+
    "\17\0\1\1\7\0\33\1\10\0\1\1\6\0\1\11"+
    "\15\0\36\1\13\0\1\11\10\0\1\11\2\0\1\11"+
    "\6\0\36\1\2\0\2\11\1\0\1\11\2\0\1\1"+
    "\20\0\3\11\34\1\1\11\2\0\1\11\20\0\1\11"+
    "\2\0\30\1\3\0\1\11\7\0\1\11\1\0\1\1"+
    "\2\0\4\11\25\1\6\0\6\11\1\0\1\11\1\0"+
    "\17\1\2\0\1\11\2\0\1\11\2\0\10\1\2\0"+
    "\1\11\3\0\6\1\4\0\1\11\5\1\3\0\1\11"+
    "\4\1\1\0\1\11\1\0\3\1\2\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[472];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    //Código de usuario
public Pintar pin = new Pintar();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 37: 
          { return new Symbol(sym.FIN, yyline, yycolumn,yytext());
          }
        case 75: break;
        case 68: 
          { return new Symbol(sym.CONTINUA, yyline, yycolumn,yytext());
          }
        case 76: break;
        case 73: 
          { return new Symbol(sym.EFINAL, yyline, yycolumn,yytext());
          }
        case 77: break;
        case 39: 
          { return new Symbol(sym.CASO, yyline, yycolumn,yytext());
          }
        case 78: break;
        case 35: 
          { return new Symbol(sym.ID, yyline, yycolumn,yytext());
          }
        case 79: break;
        case 70: 
          { return new Symbol(sym.SELEC, yyline, yycolumn,yytext());
          }
        case 80: break;
        case 67: 
          { return new Symbol(sym.EXPRESION, yyline, yycolumn,yytext());
          }
        case 81: break;
        case 7: 
          { return new Symbol(sym.PYCOMA, yyline, yycolumn,yytext());
          }
        case 82: break;
        case 15: 
          { return new Symbol(sym.POT, yyline, yycolumn,yytext());
          }
        case 83: break;
        case 18: 
          { return new Symbol(sym.NOT, yyline, yycolumn,yytext());
          }
        case 84: break;
        case 14: 
          { return new Symbol(sym.DIV, yyline, yycolumn,yytext());
          }
        case 85: break;
        case 16: 
          { return new Symbol(sym.BELOW, yyline, yycolumn,yytext());
          }
        case 86: break;
        case 59: 
          { return new Symbol(sym.VALIDAR, yyline, yycolumn,yytext());
          }
        case 87: break;
        case 40: 
          { return new Symbol(sym.SINO, yyline, yycolumn,yytext());
          }
        case 88: break;
        case 57: 
          { return new Symbol(sym.DEFECTO, yyline, yycolumn,yytext());
          }
        case 89: break;
        case 41: 
          { return new Symbol(sym.PARA, yyline, yycolumn,yytext());
          }
        case 90: break;
        case 43: 
          { return new Symbol(sym.AFD, yyline, yycolumn,yytext());
          }
        case 91: break;
        case 74: 
          { return new Symbol(sym.OPRINPAL, yyline, yycolumn,yytext());
          }
        case 92: break;
        case 72: 
          { return new Symbol(sym.EINICIAL, yyline, yycolumn,yytext());
          }
        case 93: break;
        case 38: 
          { return new Symbol(sym.DECIMAL, yyline, yycolumn,yytext());
          }
        case 94: break;
        case 44: 
          { return new Symbol(sym.NUEVO, yyline, yycolumn,yytext());
          }
        case 95: break;
        case 33: 
          { return new Symbol(sym.ELEMENTOESTADO, yyline, yycolumn,yytext());
          }
        case 96: break;
        case 64: 
          { return new Symbol(sym.FLOTANTE, yyline, yycolumn,yytext());
          }
        case 97: break;
        case 8: 
          { return new Symbol(sym.DPUNTO, yyline, yycolumn,yytext());
          }
        case 98: break;
        case 19: 
          { return new Symbol(sym.ELEMENTO, yyline, yycolumn,yytext());
          }
        case 99: break;
        case 26: 
          { return new Symbol(sym.OR, yyline, yycolumn,yytext());
          }
        case 100: break;
        case 3: 
          { return new Symbol(sym.PAR_C, yyline, yycolumn,yytext());
          }
        case 101: break;
        case 17: 
          { return new Symbol(sym.ABOVE, yyline, yycolumn,yytext());
          }
        case 102: break;
        case 20: 
          { return new Symbol(sym.ENTERO, yyline, yycolumn,yytext());
          }
        case 103: break;
        case 22: 
          { /*Saltos de linea, ignorados*/
          }
        case 104: break;
        case 45: 
          { return new Symbol(sym.ORDEN, yyline, yycolumn,yytext());
          }
        case 105: break;
        case 61: 
          { return new Symbol(sym.CHAR1, yyline, yycolumn,yytext());
          }
        case 106: break;
        case 50: 
          { return new Symbol(sym.ER, yyline, yycolumn,yytext());
          }
        case 107: break;
        case 29: 
          { return new Symbol(sym.NEQUAL, yyline, yycolumn,yytext());
          }
        case 108: break;
        case 31: 
          { return new Symbol(sym.NAND, yyline, yycolumn,yytext());
          }
        case 109: break;
        case 34: 
          { return new Symbol(sym.SI, yyline, yycolumn,yytext());
          }
        case 110: break;
        case 30: 
          { return new Symbol(sym.XOR, yyline, yycolumn,yytext());
          }
        case 111: break;
        case 21: 
          { /*Espacios en blanco, ignorados*/
          }
        case 112: break;
        case 65: 
          { return new Symbol(sym.BOOLEANO, yyline, yycolumn,yytext());
          }
        case 113: break;
        case 52: 
          { return new Symbol(sym.ESTADO, yyline, yycolumn,yytext());
          }
        case 114: break;
        case 5: 
          { return new Symbol(sym.LLAV_C, yyline, yycolumn,yytext());
          }
        case 115: break;
        case 10: 
          { return new Symbol(sym.MAS, yyline, yycolumn,yytext());
          }
        case 116: break;
        case 9: 
          { return new Symbol(sym.ASIG, yyline, yycolumn,yytext());
          }
        case 117: break;
        case 28: 
          { return new Symbol(sym.ABOVEE, yyline, yycolumn,yytext());
          }
        case 118: break;
        case 51: 
          { pin.pintaAzul(yychar,yylength()); return new Symbol(sym.INI, yyline, yycolumn,yytext());
          }
        case 119: break;
        case 24: 
          { return new Symbol(sym.INC, yyline, yycolumn,yytext());
          }
        case 120: break;
        case 13: 
          { return new Symbol(sym.POR, yyline, yycolumn,yytext());
          }
        case 121: break;
        case 66: 
          { return new Symbol(sym.MIENTRAS, yyline, yycolumn,yytext());
          }
        case 122: break;
        case 36: 
          { return new Symbol(sym.CON, yyline, yycolumn,yytext());
          }
        case 123: break;
        case 63: 
          { return new Symbol(sym.AUTOMATA, yyline, yycolumn,yytext());
          }
        case 124: break;
        case 6: 
          { return new Symbol(sym.COMA, yyline, yycolumn,yytext());
          }
        case 125: break;
        case 69: 
          { return new Symbol(sym.TRANSICION, yyline, yycolumn,yytext());
          }
        case 126: break;
        case 27: 
          { return new Symbol(sym.BELOWE, yyline, yycolumn,yytext());
          }
        case 127: break;
        case 48: 
          { return new Symbol(sym.HASTA, yyline, yycolumn,yytext());
          }
        case 128: break;
        case 58: 
          { return new Symbol(sym.GRAFICO, yyline, yycolumn,yytext());
          }
        case 129: break;
        case 12: 
          { return new Symbol(sym.OREXP, yyline, yycolumn,yytext());
          }
        case 130: break;
        case 62: 
          { return new Symbol(sym.ALFABETO, yyline, yycolumn,yytext());
          }
        case 131: break;
        case 49: 
          { return new Symbol(sym.INT1, yyline, yycolumn,yytext());
          }
        case 132: break;
        case 56: 
          { return new Symbol(sym.DETENER, yyline, yycolumn,yytext());
          }
        case 133: break;
        case 25: 
          { return new Symbol(sym.DEC, yyline, yycolumn,yytext());
          }
        case 134: break;
        case 53: 
          { return new Symbol(sym.REPETIR, yyline, yycolumn,yytext());
          }
        case 135: break;
        case 42: 
          { return new Symbol(sym.AFN, yyline, yycolumn,yytext());
          }
        case 136: break;
        case 2: 
          { return new Symbol(sym.PAR_A, yyline, yycolumn,yytext());
          }
        case 137: break;
        case 23: 
          { return new Symbol(sym.EQUAL, yyline, yycolumn,yytext());
          }
        case 138: break;
        case 46: 
          { return new Symbol(sym.HACER, yyline, yycolumn,yytext());
          }
        case 139: break;
        case 1: 
          { String errLex = "Error léxico : '"+yytext()+"' en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1);
        Interfaz_c3d.notificar_er(errLex);
          }
        case 140: break;
        case 47: 
          { return new Symbol(sym.HACIA, yyline, yycolumn,yytext());
          }
        case 141: break;
        case 11: 
          { return new Symbol(sym.MENOS, yyline, yycolumn,yytext());
          }
        case 142: break;
        case 55: 
          { return new Symbol(sym.MOSTRAR, yyline, yycolumn,yytext());
          }
        case 143: break;
        case 71: 
          { return new Symbol(sym.MTABLA, yyline, yycolumn,yytext());
          }
        case 144: break;
        case 4: 
          { return new Symbol(sym.LLAV_A, yyline, yycolumn,yytext());
          }
        case 145: break;
        case 54: 
          { return new Symbol(sym.FUNCION, yyline, yycolumn,yytext());
          }
        case 146: break;
        case 32: 
          { return new Symbol(sym.AND, yyline, yycolumn,yytext());
          }
        case 147: break;
        case 60: 
          { return new Symbol(sym.CONJUNTO, yyline, yycolumn,yytext());
          }
        case 148: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
