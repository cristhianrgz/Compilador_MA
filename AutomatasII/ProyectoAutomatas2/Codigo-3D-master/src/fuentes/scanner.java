/* The following code was generated by JFlex 1.6.1 */

package fuentes;

import java_cup.runtime.Symbol;
import Interfaz.Interfaz_c3d;

//Scanner para generar C3D


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/fuentes/lexico.jflex</tt>
 */
public class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\56\1\57\1\60\1\56\1\56\22\0\1\56\1\20\4\0"+
    "\1\22\1\0\1\1\1\2\1\13\1\11\1\5\1\12\1\51\1\14"+
    "\12\50\1\7\1\6\1\16\1\10\1\17\2\0\1\31\1\34\1\30"+
    "\1\41\1\23\1\33\1\45\1\47\1\54\1\37\1\52\1\32\1\36"+
    "\1\24\1\27\1\43\1\52\1\26\1\53\1\25\1\35\1\46\1\52"+
    "\1\42\2\52\3\0\1\15\1\55\1\0\1\31\1\34\1\30\1\41"+
    "\1\23\1\33\1\45\1\47\1\54\1\37\1\52\1\32\1\36\1\24"+
    "\1\27\1\43\1\52\1\26\1\53\1\25\1\35\1\46\1\52\1\42"+
    "\2\52\1\3\1\21\1\4\7\0\1\60\113\0\1\52\37\0\1\52"+
    "\76\0\2\44\115\0\1\40\u1ea8\0\1\60\1\60\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\2\1\12\22\1\1\2\22\1\1\3\22"+
    "\1\23\2\22\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\22\1\0"+
    "\13\22\1\0\3\22\1\0\1\22\1\0\1\40\2\22"+
    "\1\0\3\22\1\0\1\22\1\40\2\22\2\0\6\22"+
    "\1\41\1\22\1\0\5\22\2\42\1\22\1\0\1\22"+
    "\1\0\1\22\2\0\3\22\1\0\3\22\1\0\1\22"+
    "\1\43\4\22\2\0\11\22\2\44\5\22\1\0\1\22"+
    "\1\0\1\22\1\0\1\45\2\22\1\46\1\0\1\22"+
    "\1\0\2\22\1\0\1\22\1\0\2\22\1\45\2\22"+
    "\1\0\1\47\1\50\2\22\1\47\1\50\1\51\1\22"+
    "\1\52\1\0\6\22\1\0\2\22\1\0\1\22\1\0"+
    "\1\22\1\0\2\22\2\0\1\22\1\0\1\22\1\53"+
    "\2\54\2\55\2\22\1\56\1\57\1\0\1\60\1\22"+
    "\1\57\1\0\2\22\1\0\6\22\1\0\2\22\1\0"+
    "\1\22\1\0\1\22\1\0\2\22\1\61\1\0\1\22"+
    "\1\0\2\22\1\61\3\0\3\22\2\62\1\22\1\0"+
    "\6\22\2\63\1\22\2\64\1\0\1\22\1\0\1\65"+
    "\1\66\2\67\2\70\1\22\3\0\3\22\1\0\1\22"+
    "\1\0\1\22\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\0\1\22\2\77\1\0\1\22\2\0\2\100\2\22"+
    "\1\0\1\22\2\101\1\0\1\22\1\0\1\22\2\0"+
    "\2\22\1\0\1\22\1\0\1\22\1\0\1\22\1\102"+
    "\1\0\1\102\1\22\1\0\1\22\1\0\1\22\2\103"+
    "\1\0\1\22\1\0\1\22\2\104\2\105\1\0\1\22"+
    "\2\106";

  private static int [] zzUnpackAction() {
    int [] result = new int[334];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\61\0\61\0\61\0\61\0\61\0\61"+
    "\0\61\0\142\0\223\0\304\0\61\0\61\0\61\0\365"+
    "\0\u0126\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d"+
    "\0\u02ae\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405"+
    "\0\u0436\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u058d"+
    "\0\61\0\61\0\61\0\61\0\61\0\61\0\61\0\61"+
    "\0\61\0\61\0\61\0\61\0\u05be\0\u05ef\0\u0620\0\u0651"+
    "\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9"+
    "\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961"+
    "\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9"+
    "\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71"+
    "\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9"+
    "\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\61\0\u024c\0\u0eee\0\u0f1f"+
    "\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7"+
    "\0\u10d8\0\u1109\0\u113a\0\u116b\0\u119c\0\u11cd\0\u0ae9\0\u11fe"+
    "\0\u122f\0\u1260\0\u1291\0\u12c2\0\u12f3\0\u1324\0\u1355\0\u1386"+
    "\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u147b\0\u14ac\0\61\0\u024c"+
    "\0\u14dd\0\u150e\0\u153f\0\u1570\0\u15a1\0\u15d2\0\u1603\0\u1634"+
    "\0\u1665\0\u1696\0\61\0\u16c7\0\u16f8\0\u024c\0\u1729\0\u175a"+
    "\0\u178b\0\u17bc\0\u17ed\0\u181e\0\u184f\0\u1880\0\u18b1\0\u18e2"+
    "\0\u024c\0\u1913\0\u1944\0\u1975\0\61\0\61\0\u19a6\0\u19d7"+
    "\0\u024c\0\u024c\0\u024c\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc"+
    "\0\u1afd\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1\0\u1bf2\0\u1c23\0\u1c54"+
    "\0\u1c85\0\u1cb6\0\u1ce7\0\u1d18\0\u1d49\0\u1d7a\0\u1dab\0\u1ddc"+
    "\0\u1e0d\0\u1e3e\0\u1e6f\0\u024c\0\61\0\u024c\0\61\0\u024c"+
    "\0\u1ea0\0\u1ed1\0\u024c\0\u1f02\0\u1f33\0\u024c\0\u1f64\0\u1f95"+
    "\0\u1fc6\0\u1ff7\0\u2028\0\u2059\0\u208a\0\u20bb\0\u20ec\0\u211d"+
    "\0\u214e\0\u217f\0\u21b0\0\u21e1\0\u2212\0\u2243\0\u2274\0\u22a5"+
    "\0\u22d6\0\u2307\0\u2338\0\u2369\0\61\0\u239a\0\u23cb\0\u23fc"+
    "\0\u242d\0\u245e\0\u024c\0\u248f\0\u24c0\0\u24f1\0\u2522\0\u2553"+
    "\0\u2584\0\61\0\u024c\0\u25b5\0\u25e6\0\u2617\0\u2648\0\u2679"+
    "\0\u26aa\0\u26db\0\u270c\0\61\0\u024c\0\u273d\0\u276e\0\u279f"+
    "\0\u27d0\0\u2801\0\u2832\0\u024c\0\u024c\0\61\0\u024c\0\61"+
    "\0\u024c\0\u2863\0\u2894\0\u28c5\0\u28f6\0\u2927\0\u2958\0\u2989"+
    "\0\u29ba\0\u29eb\0\u2a1c\0\u2a4d\0\u024c\0\u024c\0\u024c\0\u024c"+
    "\0\u024c\0\u024c\0\u2a7e\0\u2aaf\0\61\0\u024c\0\u2ae0\0\u2b11"+
    "\0\u2b42\0\u2b73\0\61\0\u024c\0\u2ba4\0\u2bd5\0\u2c06\0\u2c37"+
    "\0\61\0\u024c\0\u2c68\0\u2c99\0\u2cca\0\u2cfb\0\u2d2c\0\u2d5d"+
    "\0\u2d8e\0\u2dbf\0\u2df0\0\u2e21\0\u2e52\0\u2e83\0\u2eb4\0\u2ee5"+
    "\0\61\0\u2f16\0\u024c\0\u2f47\0\u2f78\0\u2fa9\0\u2fda\0\u300b"+
    "\0\61\0\u024c\0\u303c\0\u306d\0\u309e\0\u30cf\0\61\0\u024c"+
    "\0\61\0\u024c\0\u3100\0\u3131\0\61\0\u024c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[334];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\27\1\34\1\35\1\27\1\36\1\27"+
    "\1\37\1\40\1\27\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\2\1\27\1\47\1\50\1\2\1\51\1\52"+
    "\72\0\1\53\61\0\1\54\61\0\1\55\56\0\1\56"+
    "\60\0\1\57\60\0\1\60\7\0\1\61\1\0\1\62"+
    "\57\0\1\63\61\0\1\64\61\0\1\27\1\65\13\27"+
    "\1\66\1\27\1\67\1\27\1\0\4\27\1\0\1\27"+
    "\1\70\2\27\26\0\12\27\1\71\2\27\1\0\3\27"+
    "\1\0\4\27\1\0\4\27\26\0\15\27\1\0\3\27"+
    "\1\0\4\27\1\0\4\27\26\0\1\72\14\27\1\0"+
    "\3\27\1\0\4\27\1\0\4\27\26\0\3\27\1\73"+
    "\11\27\1\0\3\27\1\0\4\27\1\0\4\27\26\0"+
    "\4\27\1\74\1\27\1\75\6\27\1\0\3\27\1\0"+
    "\4\27\1\0\4\27\26\0\7\27\1\76\2\27\1\77"+
    "\2\27\1\0\3\27\1\0\4\27\1\0\4\27\26\0"+
    "\7\27\1\100\2\27\1\101\2\27\1\0\3\27\1\102"+
    "\4\27\1\0\2\27\1\103\1\27\26\0\4\27\1\104"+
    "\10\27\1\0\3\27\1\0\4\27\1\0\4\27\26\0"+
    "\4\27\1\105\10\27\1\0\3\27\1\106\4\27\1\0"+
    "\2\27\1\107\1\27\26\0\1\110\20\0\1\111\7\0"+
    "\1\111\27\0\1\112\14\27\1\0\3\27\1\0\4\27"+
    "\1\0\4\27\26\0\6\27\1\113\6\27\1\0\3\27"+
    "\1\0\4\27\1\0\4\27\27\0\1\114\57\0\3\27"+
    "\1\115\11\27\1\0\3\27\1\0\4\27\1\0\4\27"+
    "\26\0\6\27\1\116\6\27\1\0\3\27\1\0\4\27"+
    "\1\0\4\27\26\0\6\27\1\117\6\27\1\0\3\27"+
    "\1\0\4\27\1\0\4\27\53\0\1\46\1\120\32\0"+
    "\1\121\14\27\1\0\3\27\1\111\4\27\1\0\2\27"+
    "\1\122\1\27\26\0\1\27\1\123\13\27\1\0\3\27"+
    "\1\0\4\27\1\0\4\27\26\0\2\27\1\124\12\27"+
    "\1\0\3\27\1\0\4\27\1\0\4\27\30\0\1\125"+
    "\3\0\1\126\52\0\15\27\1\0\2\27\1\127\1\0"+
    "\4\27\1\0\4\27\26\0\2\27\1\130\3\27\1\131"+
    "\6\27\1\0\3\27\1\0\4\27\1\0\4\27\26\0"+
    "\1\132\14\27\1\0\3\27\1\0\4\27\1\0\4\27"+
    "\26\0\15\27\1\0\2\27\1\133\1\0\4\27\1\0"+
    "\4\27\26\0\15\27\1\0\1\134\2\27\1\0\4\27"+
    "\1\0\4\27\26\0\1\27\1\135\13\27\1\0\3\27"+
    "\1\0\4\27\1\0\4\27\26\0\3\27\1\136\11\27"+
    "\1\137\3\27\1\0\4\27\1\0\1\27\1\140\2\27"+
    "\26\0\10\27\1\141\4\27\1\0\3\27\1\0\4\27"+
    "\1\0\4\27\26\0\2\27\1\142\12\27\1\0\3\27"+
    "\1\0\4\27\1\0\4\27\26\0\4\27\1\143\10\27"+
    "\1\0\3\27\1\0\4\27\1\0\4\27\26\0\1\27"+
    "\1\144\13\27\1\0\3\27\1\0\4\27\1\0\4\27"+
    "\27\0\1\145\57\0\1\27\1\146\13\27\1\0\3\27"+
    "\1\0\4\27\1\0\4\27\26\0\4\27\1\147\10\27"+
    "\1\0\3\27\1\0\4\27\1\0\4\27\26\0\15\27"+
    "\1\150\3\27\1\0\4\27\1\0\1\27\1\151\2\27"+
    "\26\0\1\152\60\0\1\153\14\27\1\0\3\27\1\0"+
    "\4\27\1\0\4\27\35\0\1\154\52\0\1\155\57\0"+
    "\2\27\1\156\5\27\1\157\4\27\1\0\3\27\1\0"+
    "\4\27\1\0\4\27\26\0\3\27\1\160\11\27\1\0"+
    "\3\27\1\0\4\27\1\0\4\27\47\0\1\161\7\0"+
    "\1\161\27\0\6\27\1\162\6\27\1\0\3\27\1\0"+
    "\4\27\1\0\4\27\26\0\7\27\1\163\5\27\1\0"+
    "\3\27\1\0\4\27\1\0\4\27\26\0\5\27\1\164"+
    "\7\27\1\165\3\27\1\0\4\27\1\0\1\27\1\166"+
    "\2\27\53\0\1\167\33\0\7\27\1\170\5\27\1\0"+
    "\3\27\1\0\4\27\1\0\4\27\26\0\1\27\1\171"+
    "\13\27\1\0\3\27\1\0\4\27\1\0\4\27\26\0"+
    "\15\27\1\0\3\27\1\161\4\27\1\0\2\27\1\172"+
    "\1\27\26\0\1\173\14\27\1\0\3\27\1\0\4\27"+
    "\1\0\4\27\34\0\1\174\62\0\1\175\50\0\3\27"+
    "\1\176\11\27\1\0\3\27\1\0\4\27\1\0\4\27"+
    "\26\0\6\27\1\177\6\27\1\0\3\27\1\0\4\27"+
    "\1\0\4\27\26\0\10\27\1\200\4\27\1\0\3\27"+
    "\1\0\4\27\1\0\4\27\26\0\15\27\1\0\3\27"+
    "\1\0\1\27\1\201\2\27\1\0\4\27\26\0\1\202"+
    "\14\27\1\0\3\27\1\0\4\27\1\0\4\27\26\0"+
    "\1\203\14\27\1\0\3\27\1\0\4\27\1\0\4\27"+
    "\26\0\2\27\1\204\11\27\1\205\1\0\3\27\1\0"+
    "\4\27\1\0\4\27\26\0\6\27\1\206\6\27\1\0"+
    "\3\27\1\0\4\27\1\0\4\27\32\0\1\207\54\0"+
    "\4\27\1\210\10\27\1\0\3\27\1\0\4\27\1\0"+
    "\4\27\26\0\6\27\1\211\6\27\1\0\3\27\1\0"+
    "\4\27\1\0\4\27\26\0\4\27\1\212\10\27\1\0"+
    "\3\27\1\0\4\27\1\0\4\27\26\0\2\27\1\213"+
    "\12\27\1\0\3\27\1\0\4\27\1\0\4\27\26\0"+
    "\5\27\1\214\7\27\1\0\3\27\1\0\4\27\1\0"+
    "\4\27\26\0\7\27\1\215\5\27\1\0\3\27\1\0"+
    "\4\27\1\0\4\27\30\0\1\216\56\0\2\27\1\217"+
    "\12\27\1\0\3\27\1\0\4\27\1\0\4\27\27\0"+
    "\1\220\57\0\1\27\1\221\13\27\1\0\3\27\1\0"+
    "\4\27\1\0\4\27\26\0\1\222\64\0\1\223\54\0"+
    "\1\224\14\27\1\0\3\27\1\0\4\27\1\0\4\27"+
    "\26\0\1\225\14\27\1\0\3\27\1\0\4\27\1\0"+
    "\4\27\26\0\6\27\1\226\6\27\1\0\3\27\1\0"+
    "\4\27\1\0\4\27\33\0\1\227\53\0\10\27\1\230"+
    "\4\27\1\0\3\27\1\0\4\27\1\0\4\27\26\0"+
    "\15\27\1\0\3\27\1\231\4\27\1\0\2\27\1\232"+
    "\1\27\26\0\1\233\14\27\1\0\3\27\1\234\4\27"+
    "\1\0\2\27\1\235\1\27\30\0\1\236\56\0\2\27"+
    "\1\237\12\27\1\0\3\27\1\0\4\27\1\0\4\27"+
    "\26\0\1\240\14\27\1\0\3\27\1\0\4\27\1\0"+
    "\4\27\26\0\4\27\1\241\10\27\1\0\3\27\1\0"+
    "\4\27\1\0\4\27\26\0\5\27\1\242\7\27\1\0"+
    "\3\27\1\0\4\27\1\0\4\27\26\0\3\27\1\243"+
    "\11\27\1\0\3\27\1\0\4\27\1\0\4\27\44\0"+
    "\1\244\43\0\1\245\14\0\1\246\42\0\1\247\14\27"+
    "\1\0\3\27\1\0\4\27\1\0\4\27\26\0\15\27"+
    "\1\0\1\250\2\27\1\0\4\27\1\0\4\27\26\0"+
    "\1\27\1\251\13\27\1\0\1\252\2\27\1\0\4\27"+
    "\1\0\4\27\26\0\4\27\1\253\10\27\1\0\3\27"+
    "\1\0\4\27\1\0\4\27\26\0\2\27\1\254\12\27"+
    "\1\0\3\27\1\0\4\27\1\0\4\27\26\0\1\27"+
    "\1\255\13\27\1\0\3\27\1\0\4\27\1\0\4\27"+
    "\26\0\15\27\1\0\3\27\1\256\4\27\1\0\2\27"+
    "\1\257\1\27\26\0\12\27\1\260\2\27\1\0\3\27"+
    "\1\0\4\27\1\0\4\27\26\0\5\27\1\261\7\27"+
    "\1\0\3\27\1\0\4\27\1\0\4\27\26\0\11\27"+
    "\1\262\3\27\1\0\3\27\1\0\4\27\1\0\4\27"+
    "\26\0\13\27\1\263\1\27\1\0\3\27\1\0\4\27"+
    "\1\0\4\27\26\0\6\27\1\264\6\27\1\0\3\27"+
    "\1\0\4\27\1\0\4\27\26\0\15\27\1\0\3\27"+
    "\1\265\4\27\1\0\2\27\1\266\1\27\26\0\1\267"+
    "\14\27\1\0\3\27\1\0\4\27\1\0\4\27\31\0"+
    "\1\270\55\0\3\27\1\271\11\27\1\0\3\27\1\0"+
    "\4\27\1\0\4\27\30\0\1\272\56\0\2\27\1\273"+
    "\12\27\1\0\3\27\1\0\4\27\1\0\4\27\33\0"+
    "\1\274\53\0\1\27\1\275\13\27\1\0\3\27\1\0"+
    "\4\27\1\0\4\27\26\0\5\27\1\276\7\27\1\0"+
    "\3\27\1\0\4\27\1\0\4\27\47\0\1\277\7\0"+
    "\1\277\27\0\15\27\1\0\3\27\1\300\4\27\1\0"+
    "\2\27\1\301\1\27\44\0\1\302\42\0\15\27\1\0"+
    "\1\303\2\27\1\0\4\27\1\0\4\27\26\0\3\27"+
    "\1\304\11\27\1\0\3\27\1\0\4\27\1\0\4\27"+
    "\34\0\1\305\52\0\6\27\1\306\6\27\1\0\3\27"+
    "\1\0\4\27\1\0\4\27\34\0\1\307\52\0\6\27"+
    "\1\310\6\27\1\0\3\27\1\0\4\27\1\0\4\27"+
    "\26\0\5\27\1\311\7\27\1\0\3\27\1\0\4\27"+
    "\1\0\4\27\26\0\15\27\1\0\3\27\1\277\4\27"+
    "\1\0\2\27\1\312\1\27\26\0\4\27\1\313\10\27"+
    "\1\0\3\27\1\0\4\27\1\0\4\27\32\0\1\314"+
    "\54\0\15\27\1\315\3\27\1\0\1\316\3\27\1\0"+
    "\1\27\1\317\2\27\26\0\4\27\1\320\10\27\1\0"+
    "\3\27\1\0\4\27\1\0\4\27\26\0\15\27\1\0"+
    "\3\27\1\321\4\27\1\0\2\27\1\322\1\27\26\0"+
    "\15\27\1\0\2\27\1\323\1\0\4\27\1\0\4\27"+
    "\27\0\1\324\57\0\1\27\1\325\13\27\1\0\3\27"+
    "\1\0\4\27\1\0\4\27\26\0\1\27\1\326\13\27"+
    "\1\0\3\27\1\0\4\27\1\0\4\27\26\0\2\27"+
    "\1\327\12\27\1\0\3\27\1\0\4\27\1\0\4\27"+
    "\26\0\1\330\14\27\1\0\3\27\1\0\4\27\1\0"+
    "\4\27\26\0\6\27\1\331\6\27\1\0\3\27\1\0"+
    "\4\27\1\0\4\27\26\0\1\27\1\332\13\27\1\0"+
    "\3\27\1\0\4\27\1\0\4\27\32\0\1\333\54\0"+
    "\4\27\1\334\10\27\1\0\3\27\1\0\4\27\1\0"+
    "\4\27\26\0\6\27\1\335\6\27\1\0\3\27\1\0"+
    "\4\27\1\0\4\27\34\0\1\336\52\0\6\27\1\337"+
    "\6\27\1\0\3\27\1\0\4\27\1\0\4\27\31\0"+
    "\1\340\55\0\3\27\1\341\11\27\1\0\3\27\1\0"+
    "\4\27\1\0\4\27\33\0\1\342\53\0\1\343\14\27"+
    "\1\0\3\27\1\0\4\27\1\0\4\27\26\0\2\27"+
    "\1\344\12\27\1\0\3\27\1\0\4\27\1\0\4\27"+
    "\32\0\1\345\61\0\1\346\53\0\5\27\1\347\7\27"+
    "\1\0\3\27\1\0\4\27\1\0\4\27\34\0\1\350"+
    "\52\0\6\27\1\351\6\27\1\0\3\27\1\0\4\27"+
    "\1\0\4\27\26\0\5\27\1\352\7\27\1\0\3\27"+
    "\1\0\4\27\1\0\4\27\26\0\4\27\1\353\10\27"+
    "\1\0\3\27\1\0\4\27\1\0\4\27\36\0\1\354"+
    "\10\0\1\355\7\0\1\355\50\0\1\356\7\0\1\356"+
    "\27\0\15\27\1\0\3\27\1\356\4\27\1\0\2\27"+
    "\1\357\1\27\26\0\10\27\1\360\4\27\1\0\3\27"+
    "\1\355\4\27\1\0\2\27\1\361\1\27\31\0\1\362"+
    "\55\0\3\27\1\363\11\27\1\0\3\27\1\0\4\27"+
    "\1\0\4\27\26\0\3\27\1\364\11\27\1\0\3\27"+
    "\1\0\4\27\1\0\4\27\40\0\1\365\46\0\12\27"+
    "\1\366\2\27\1\0\3\27\1\0\4\27\1\0\4\27"+
    "\26\0\2\27\1\367\12\27\1\0\3\27\1\0\4\27"+
    "\1\0\4\27\26\0\1\370\14\27\1\0\3\27\1\0"+
    "\4\27\1\0\4\27\26\0\2\27\1\371\12\27\1\0"+
    "\3\27\1\0\4\27\1\0\4\27\26\0\2\27\1\372"+
    "\12\27\1\0\3\27\1\0\4\27\1\0\4\27\26\0"+
    "\2\27\1\373\12\27\1\0\3\27\1\0\4\27\1\0"+
    "\4\27\27\0\1\374\57\0\1\27\1\375\13\27\1\0"+
    "\3\27\1\0\4\27\1\0\4\27\26\0\1\27\1\376"+
    "\13\27\1\0\3\27\1\0\4\27\1\0\4\27\31\0"+
    "\1\377\55\0\3\27\1\u0100\11\27\1\0\3\27\1\0"+
    "\4\27\1\0\4\27\34\0\1\u0101\52\0\6\27\1\u0102"+
    "\6\27\1\0\3\27\1\0\4\27\1\0\4\27\47\0"+
    "\1\u0103\7\0\1\u0103\27\0\3\27\1\u0104\11\27\1\0"+
    "\3\27\1\0\4\27\1\0\4\27\26\0\4\27\1\u0105"+
    "\10\27\1\0\3\27\1\0\4\27\1\0\4\27\32\0"+
    "\1\u0106\54\0\4\27\1\u0107\10\27\1\0\3\27\1\0"+
    "\4\27\1\0\4\27\31\0\1\u0108\55\0\3\27\1\u0109"+
    "\11\27\1\0\3\27\1\0\4\27\1\0\4\27\26\0"+
    "\15\27\1\0\3\27\1\u0103\4\27\1\0\2\27\1\u010a"+
    "\1\27\47\0\1\u010b\7\0\1\u010b\30\0\1\u010c\63\0"+
    "\1\u010d\54\0\4\27\1\u010e\10\27\1\0\3\27\1\0"+
    "\4\27\1\0\4\27\26\0\15\27\1\0\3\27\1\u010b"+
    "\4\27\1\0\2\27\1\u010f\1\27\26\0\1\27\1\u0110"+
    "\13\27\1\0\3\27\1\0\4\27\1\0\4\27\26\0"+
    "\15\27\1\0\3\27\1\u0111\4\27\1\0\2\27\1\u0112"+
    "\1\27\34\0\1\u0113\52\0\6\27\1\u0114\6\27\1\0"+
    "\3\27\1\0\4\27\1\0\4\27\26\0\4\27\1\u0115"+
    "\10\27\1\0\3\27\1\0\4\27\1\0\4\27\26\0"+
    "\3\27\1\u0116\11\27\1\0\3\27\1\0\4\27\1\0"+
    "\4\27\26\0\4\27\1\u0117\10\27\1\0\3\27\1\0"+
    "\4\27\1\0\4\27\26\0\6\27\1\u0118\6\27\1\0"+
    "\3\27\1\0\4\27\1\0\4\27\26\0\1\u0119\14\27"+
    "\1\0\3\27\1\0\4\27\1\0\4\27\26\0\4\27"+
    "\1\u011a\10\27\1\0\3\27\1\0\4\27\1\0\4\27"+
    "\30\0\1\u011b\56\0\2\27\1\u011c\12\27\1\0\3\27"+
    "\1\0\4\27\1\0\4\27\43\0\1\u011d\12\0\1\u011d"+
    "\30\0\15\27\1\u011d\3\27\1\0\4\27\1\0\1\27"+
    "\1\u011e\2\27\32\0\1\u011f\54\0\4\27\1\u0120\10\27"+
    "\1\0\3\27\1\0\4\27\1\0\4\27\27\0\1\u0121"+
    "\100\0\1\u0122\7\0\1\u0122\30\0\1\u0123\57\0\1\27"+
    "\1\u0124\13\27\1\0\3\27\1\0\4\27\1\0\4\27"+
    "\26\0\1\27\1\u0125\13\27\1\0\3\27\1\0\4\27"+
    "\1\0\4\27\26\0\15\27\1\0\3\27\1\u0122\4\27"+
    "\1\0\2\27\1\u0126\1\27\27\0\1\u0127\57\0\1\27"+
    "\1\u0128\13\27\1\0\3\27\1\0\4\27\1\0\4\27"+
    "\31\0\1\u0129\55\0\3\27\1\u012a\11\27\1\0\3\27"+
    "\1\0\4\27\1\0\4\27\34\0\1\u012b\52\0\6\27"+
    "\1\u012c\6\27\1\0\3\27\1\0\4\27\1\0\4\27"+
    "\27\0\1\u012d\57\0\1\27\1\u012e\13\27\1\0\3\27"+
    "\1\0\4\27\1\0\4\27\34\0\1\u012f\57\0\1\u0130"+
    "\53\0\6\27\1\u0131\6\27\1\0\3\27\1\0\4\27"+
    "\1\0\4\27\26\0\5\27\1\u0132\7\27\1\0\3\27"+
    "\1\0\4\27\1\0\4\27\33\0\1\u0133\53\0\5\27"+
    "\1\u0134\7\27\1\0\3\27\1\0\4\27\1\0\4\27"+
    "\37\0\1\u0135\47\0\11\27\1\u0136\3\27\1\0\3\27"+
    "\1\0\4\27\1\0\4\27\34\0\1\u0137\52\0\6\27"+
    "\1\u0138\6\27\1\0\3\27\1\0\4\27\1\0\4\27"+
    "\35\0\1\u0139\72\0\1\u013a\7\0\1\u013a\27\0\7\27"+
    "\1\u013b\5\27\1\0\3\27\1\0\4\27\1\0\4\27"+
    "\26\0\15\27\1\0\3\27\1\u013a\4\27\1\0\2\27"+
    "\1\u013c\1\27\47\0\1\u013d\7\0\1\u013d\27\0\15\27"+
    "\1\0\3\27\1\u013d\4\27\1\0\2\27\1\u013e\1\27"+
    "\35\0\1\u013f\51\0\7\27\1\u0140\5\27\1\0\3\27"+
    "\1\0\4\27\1\0\4\27\31\0\1\u0141\55\0\3\27"+
    "\1\u0142\11\27\1\0\3\27\1\0\4\27\1\0\4\27"+
    "\34\0\1\u0143\52\0\6\27\1\u0144\6\27\1\0\3\27"+
    "\1\0\4\27\1\0\4\27\46\0\1\u0145\40\0\15\27"+
    "\1\0\2\27\1\u0146\1\0\4\27\1\0\4\27\34\0"+
    "\1\u0147\52\0\6\27\1\u0148\6\27\1\0\3\27\1\0"+
    "\4\27\1\0\4\27\35\0\1\u0149\51\0\7\27\1\u014a"+
    "\5\27\1\0\3\27\1\0\4\27\1\0\4\27\34\0"+
    "\1\u014b\52\0\6\27\1\u014c\6\27\1\0\3\27\1\0"+
    "\4\27\1\0\4\27\35\0\1\u014d\51\0\7\27\1\u014e"+
    "\5\27\1\0\3\27\1\0\4\27\1\0\4\27\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12642];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\10\11\3\1\3\11\31\1\14\11\1\1\1\0"+
    "\13\1\1\0\3\1\1\0\1\1\1\0\3\1\1\0"+
    "\3\1\1\0\4\1\2\0\10\1\1\0\5\1\1\11"+
    "\2\1\1\0\1\1\1\0\1\1\2\0\3\1\1\0"+
    "\3\1\1\0\6\1\2\0\11\1\1\11\6\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\11\3\1\1\0\1\1"+
    "\1\0\2\1\1\0\1\1\1\0\5\1\1\0\2\11"+
    "\7\1\1\0\6\1\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\0\2\1\2\0\1\1\1\0\2\1\1\11"+
    "\1\1\1\11\5\1\1\0\3\1\1\0\2\1\1\0"+
    "\6\1\1\0\2\1\1\0\1\1\1\0\1\1\1\0"+
    "\2\1\1\11\1\0\1\1\1\0\3\1\3\0\3\1"+
    "\1\11\2\1\1\0\6\1\1\11\4\1\1\0\1\1"+
    "\1\0\2\1\1\11\1\1\1\11\2\1\3\0\3\1"+
    "\1\0\1\1\1\0\7\1\1\0\1\1\1\11\1\1"+
    "\1\0\1\1\2\0\1\11\3\1\1\0\1\1\1\11"+
    "\1\1\1\0\1\1\1\0\1\1\2\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\1\0\2\1"+
    "\1\0\1\1\1\0\1\1\1\11\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\1\1\11\1\1\1\0\1\1"+
    "\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[334];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //Código de usuario


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 228) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { String errLex = "Error léxico : '"+yytext()+"' en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1);
        Interfaz_c3d.notificar_er(errLex);
            }
          case 71: break;
          case 2: 
            { return new Symbol(sym.PAR_A, yyline, yycolumn,yytext());
            }
          case 72: break;
          case 3: 
            { return new Symbol(sym.PAR_C, yyline, yycolumn,yytext());
            }
          case 73: break;
          case 4: 
            { return new Symbol(sym.LLAV_A, yyline, yycolumn,yytext());
            }
          case 74: break;
          case 5: 
            { return new Symbol(sym.LLAV_C, yyline, yycolumn,yytext());
            }
          case 75: break;
          case 6: 
            { return new Symbol(sym.COMA, yyline, yycolumn,yytext());
            }
          case 76: break;
          case 7: 
            { return new Symbol(sym.PYCOMA, yyline, yycolumn,yytext());
            }
          case 77: break;
          case 8: 
            { return new Symbol(sym.DPUNTO, yyline, yycolumn,yytext());
            }
          case 78: break;
          case 9: 
            { return new Symbol(sym.ASIG, yyline, yycolumn,yytext());
            }
          case 79: break;
          case 10: 
            { return new Symbol(sym.MAS, yyline, yycolumn,yytext());
            }
          case 80: break;
          case 11: 
            { return new Symbol(sym.MENOS, yyline, yycolumn,yytext());
            }
          case 81: break;
          case 12: 
            { return new Symbol(sym.POR, yyline, yycolumn,yytext());
            }
          case 82: break;
          case 13: 
            { return new Symbol(sym.DIV, yyline, yycolumn,yytext());
            }
          case 83: break;
          case 14: 
            { return new Symbol(sym.POT, yyline, yycolumn,yytext());
            }
          case 84: break;
          case 15: 
            { return new Symbol(sym.BELOW, yyline, yycolumn,yytext());
            }
          case 85: break;
          case 16: 
            { return new Symbol(sym.ABOVE, yyline, yycolumn,yytext());
            }
          case 86: break;
          case 17: 
            { return new Symbol(sym.NOT, yyline, yycolumn,yytext());
            }
          case 87: break;
          case 18: 
            { return new Symbol(sym.ID, yyline, yycolumn,yytext());
            }
          case 88: break;
          case 19: 
            { return new Symbol(sym.ENTERO, yyline, yycolumn,yytext());
            }
          case 89: break;
          case 20: 
            { /*Espacios en blanco, ignorados*/
            }
          case 90: break;
          case 21: 
            { /*Saltos de linea, ignorados*/
            }
          case 91: break;
          case 22: 
            { return new Symbol(sym.EQUAL, yyline, yycolumn,yytext());
            }
          case 92: break;
          case 23: 
            { return new Symbol(sym.INC, yyline, yycolumn,yytext());
            }
          case 93: break;
          case 24: 
            { return new Symbol(sym.DEC, yyline, yycolumn,yytext());
            }
          case 94: break;
          case 25: 
            { return new Symbol(sym.BELOWE, yyline, yycolumn,yytext());
            }
          case 95: break;
          case 26: 
            { return new Symbol(sym.ABOVEE, yyline, yycolumn,yytext());
            }
          case 96: break;
          case 27: 
            { return new Symbol(sym.NEQUAL, yyline, yycolumn,yytext());
            }
          case 97: break;
          case 28: 
            { return new Symbol(sym.XOR, yyline, yycolumn,yytext());
            }
          case 98: break;
          case 29: 
            { return new Symbol(sym.NAND, yyline, yycolumn,yytext());
            }
          case 99: break;
          case 30: 
            { return new Symbol(sym.OR, yyline, yycolumn,yytext());
            }
          case 100: break;
          case 31: 
            { return new Symbol(sym.AND, yyline, yycolumn,yytext());
            }
          case 101: break;
          case 32: 
            { return new Symbol(sym.SI, yyline, yycolumn,yytext());
            }
          case 102: break;
          case 33: 
            { return new Symbol(sym.CON, yyline, yycolumn,yytext());
            }
          case 103: break;
          case 34: 
            { return new Symbol(sym.FIN, yyline, yycolumn,yytext());
            }
          case 104: break;
          case 35: 
            { return new Symbol(sym.DECIMAL, yyline, yycolumn,yytext());
            }
          case 105: break;
          case 36: 
            { return new Symbol(sym.CASO, yyline, yycolumn,yytext());
            }
          case 106: break;
          case 37: 
            { return new Symbol(sym.SINO, yyline, yycolumn,yytext());
            }
          case 107: break;
          case 38: 
            { return new Symbol(sym.PARA, yyline, yycolumn,yytext());
            }
          case 108: break;
          case 39: 
            { return new Symbol(sym.AFN, yyline, yycolumn,yytext());
            }
          case 109: break;
          case 40: 
            { return new Symbol(sym.AFD, yyline, yycolumn,yytext());
            }
          case 110: break;
          case 41: 
            { return new Symbol(sym.NUEVO, yyline, yycolumn,yytext());
            }
          case 111: break;
          case 42: 
            { return new Symbol(sym.ORDEN, yyline, yycolumn,yytext());
            }
          case 112: break;
          case 43: 
            { return new Symbol(sym.HACER, yyline, yycolumn,yytext());
            }
          case 113: break;
          case 44: 
            { return new Symbol(sym.HACIA, yyline, yycolumn,yytext());
            }
          case 114: break;
          case 45: 
            { return new Symbol(sym.HASTA, yyline, yycolumn,yytext());
            }
          case 115: break;
          case 46: 
            { return new Symbol(sym.INT1, yyline, yycolumn,yytext());
            }
          case 116: break;
          case 47: 
            { return new Symbol(sym.ESTADO, yyline, yycolumn,yytext());
            }
          case 117: break;
          case 48: 
            { return new Symbol(sym.ER, yyline, yycolumn,yytext());
            }
          case 118: break;
          case 49: 
            { return new Symbol(sym.INI, yyline, yycolumn,yytext());
            }
          case 119: break;
          case 50: 
            { return new Symbol(sym.REPETIR, yyline, yycolumn,yytext());
            }
          case 120: break;
          case 51: 
            { return new Symbol(sym.FUNCION, yyline, yycolumn,yytext());
            }
          case 121: break;
          case 52: 
            { return new Symbol(sym.MOSTRAR, yyline, yycolumn,yytext());
            }
          case 122: break;
          case 53: 
            { return new Symbol(sym.DETENER, yyline, yycolumn,yytext());
            }
          case 123: break;
          case 54: 
            { return new Symbol(sym.DEFECTO, yyline, yycolumn,yytext());
            }
          case 124: break;
          case 55: 
            { return new Symbol(sym.GRAFICO, yyline, yycolumn,yytext());
            }
          case 125: break;
          case 56: 
            { return new Symbol(sym.VALIDAR, yyline, yycolumn,yytext());
            }
          case 126: break;
          case 57: 
            { return new Symbol(sym.CONJUNTO, yyline, yycolumn,yytext());
            }
          case 127: break;
          case 58: 
            { return new Symbol(sym.CHAR1, yyline, yycolumn,yytext());
            }
          case 128: break;
          case 59: 
            { return new Symbol(sym.ALFABETO, yyline, yycolumn,yytext());
            }
          case 129: break;
          case 60: 
            { return new Symbol(sym.AUTOMATA, yyline, yycolumn,yytext());
            }
          case 130: break;
          case 61: 
            { return new Symbol(sym.FLOTANTE, yyline, yycolumn,yytext());
            }
          case 131: break;
          case 62: 
            { return new Symbol(sym.BOOLEANO, yyline, yycolumn,yytext());
            }
          case 132: break;
          case 63: 
            { return new Symbol(sym.MIENTRAS, yyline, yycolumn,yytext());
            }
          case 133: break;
          case 64: 
            { return new Symbol(sym.EXPRESION, yyline, yycolumn,yytext());
            }
          case 134: break;
          case 65: 
            { return new Symbol(sym.CONTINUA, yyline, yycolumn,yytext());
            }
          case 135: break;
          case 66: 
            { return new Symbol(sym.EFINAL, yyline, yycolumn,yytext());
            }
          case 136: break;
          case 67: 
            { return new Symbol(sym.SELEC, yyline, yycolumn,yytext());
            }
          case 137: break;
          case 68: 
            { return new Symbol(sym.MTABLA, yyline, yycolumn,yytext());
            }
          case 138: break;
          case 69: 
            { return new Symbol(sym.EINICIAL, yyline, yycolumn,yytext());
            }
          case 139: break;
          case 70: 
            { return new Symbol(sym.OPRINPAL, yyline, yycolumn,yytext());
            }
          case 140: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
